<?php
namespace thrift;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * The interface definition for the Concourse Server API.
 */
interface ConcourseServiceIf {
  /**
   * Abort the current transaction, if one exists.
   * <p>
   * This method will discard any changes that are currently sitting in the
   * staging area. After this function returns, all subsequent operations will
   * commit to the database immediately until #stage(shared.AccessToken) is
   * called.
   * </p>
   * 
   * @param creds
   * @param transaction
   * @param environment
   * @throws TSecurityException
   * 
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\exceptions\SecurityException
   */
  public function abort(\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * Commit the current transaction, if one exists.
   * 
   * This method will attempt to permanently commit all the changes that are
   * currently sitting in the staging area. This function only returns TRUE
   * if all the changes can be successfully applied to the database. Otherwise,
   * this function returns FALSE and all the changes are discarded.
   * 
   * After this function returns, all subsequent operations will commit to the
   * database immediately until #stage(shared.AccessToken) is invoked.
   * 
   * @param creds
   * @param transaction
   * @param environment
   * @return boolean
   * @throws TSecurityException
   * @throws TTransactionException
   * 
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function commit(\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * Login to the service and receive an AccessToken, which is required for
   * all subsequent operations. The AccessToken has an undocumented TTL, so
   * clients must be prepared to handle token expiration for active clients.
   * 
   * @param username
   * @param password
   * @param environment
   * @return AccessToken
   * 
   * @param string $username
   * @param string $password
   * @param string $environment
   * @return \thrift\shared\AccessToken A temporary token that is returned by the
   * {@link ConcourseService#login(String, String)} method to grant access
   * to secure resources in place of raw credentials.
   * 
   * @throws \thrift\exceptions\SecurityException
   */
  public function login($username, $password, $environment);
  /**
   * Logout and immediately expire the access token. For optimal security,
   * the client should also discard the token after invoking this method.
   * 
   * @param token
   * @param environment
   * @throws TSecurityException
   * 
   * @param \thrift\shared\AccessToken $token
   * @param string $environment
   * @throws \thrift\exceptions\SecurityException
   */
  public function logout(\thrift\shared\AccessToken $token, $environment);
  /**
   * Start a new transaction.
   * <p>
   * This method will turn on STAGING mode so that all subsequent changes are
   * collected in an isolated buffer before possibly being committed to the
   * database. Staged operations are guaranteed to be reliable, all or nothing
   * units of work that allow correct recovery from failures and provide
   * isolation between clients so the database is always in a consistent state.
   * </p>
   * <p>
   * After this method returns, all subsequent operations will be done in
   * {@code staging} mode until either #abort(shared.AccessToken) or
   * #commit(shared.AccessToken) is called.
   * </p>
   * 
   * @param token
   * @param environment
   * @return TransactionToken
   * @throws TSecurityException
   * 
   * @param \thrift\shared\AccessToken $token
   * @param string $environment
   * @return \thrift\shared\TransactionToken A token that identifies a Transaction.
   * 
   * @throws \thrift\exceptions\SecurityException
   */
  public function stage(\thrift\shared\AccessToken $token, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $value
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\InvalidArgumentException
   */
  public function addKeyValueRecord($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $value
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\InvalidArgumentException
   */
  public function addKeyValue($key, \thrift\data\TObject $value, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $value
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\InvalidArgumentException
   */
  public function addKeyValueRecords($key, \thrift\data\TObject $value, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function clearRecord($record, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function clearRecords(array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function clearKeyRecord($key, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function clearKeysRecord(array $keys, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function clearKeyRecords($key, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function clearKeysRecords(array $keys, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $json
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function insertJson($json, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $json
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function insertJsonRecord($json, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $json
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function insertJsonRecords($json, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $value
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\InvalidArgumentException
   */
  public function removeKeyValueRecord($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $value
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\InvalidArgumentException
   */
  public function removeKeyValueRecords($key, \thrift\data\TObject $value, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $value
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\InvalidArgumentException
   */
  public function setKeyValueRecord($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $value
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\InvalidArgumentException
   */
  public function setKeyValue($key, \thrift\data\TObject $value, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $value
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\InvalidArgumentException
   */
  public function setKeyValueRecords($key, \thrift\data\TObject $value, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function inventory(\thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function selectRecord($record, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function selectRecords(array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function selectRecordTime($record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function selectRecordTimestr($record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function selectRecordsTime(array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function selectRecordsTimestr(array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function browseKey($key, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function browseKeys(array $keys, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function browseKeyTime($key, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function browseKeyTimestr($key, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function browseKeysTime(array $keys, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function browseKeysTimestr(array $keys, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return string[]
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function describeRecord($record, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return string[]
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function describeRecordTime($record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return string[]
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function describeRecordTimestr($record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function describeRecords(array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function describeRecordsTime(array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function describeRecordsTimestr(array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return \thrift\data\TObject[]
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function selectKeyRecord($key, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return \thrift\data\TObject[]
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function selectKeyRecordTime($key, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return \thrift\data\TObject[]
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function selectKeyRecordTimestr($key, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function selectKeysRecord(array $keys, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function selectKeysRecordTime(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function selectKeysRecordTimestr(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function selectKeysRecords(array $keys, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function selectKeyRecords($key, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function selectKeyRecordsTime($key, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function selectKeyRecordsTimestr($key, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function selectKeysRecordsTime(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function selectKeysRecordsTimestr(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \thrift\data\TCriteria $criteria
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function selectCriteria(\thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $ccl
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function selectCcl($ccl, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \thrift\data\TCriteria $criteria
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function selectCriteriaTime(\thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \thrift\data\TCriteria $criteria
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function selectCriteriaTimestr(\thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $ccl
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function selectCclTime($ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $ccl
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function selectCclTimestr($ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TCriteria $criteria
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function selectKeyCriteria($key, \thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $ccl
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function selectKeyCcl($key, $ccl, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TCriteria $criteria
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function selectKeyCriteriaTime($key, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TCriteria $criteria
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function selectKeyCriteriaTimestr($key, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $ccl
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function selectKeyCclTime($key, $ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $ccl
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function selectKeyCclTimestr($key, $ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param \thrift\data\TCriteria $criteria
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function selectKeysCriteria(array $keys, \thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param string $ccl
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function selectKeysCcl(array $keys, $ccl, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param \thrift\data\TCriteria $criteria
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function selectKeysCriteriaTime(array $keys, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param \thrift\data\TCriteria $criteria
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function selectKeysCriteriaTimestr(array $keys, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param string $ccl
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function selectKeysCclTime(array $keys, $ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param string $ccl
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function selectKeysCclTimestr(array $keys, $ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return \thrift\data\TObject A lightweight wrapper for a typed Object that has been encoded
   * as binary data.
   * 
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function getKeyRecord($key, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return \thrift\data\TObject A lightweight wrapper for a typed Object that has been encoded
   * as binary data.
   * 
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function getKeyRecordTime($key, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return \thrift\data\TObject A lightweight wrapper for a typed Object that has been encoded
   * as binary data.
   * 
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function getKeyRecordTimestr($key, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function getKeysRecord(array $keys, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function getKeysRecordTime(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function getKeysRecordTimestr(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function getKeysRecords(array $keys, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function getKeyRecords($key, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function getKeyRecordsTime($key, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function getKeyRecordsTimestr($key, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function getKeysRecordsTime(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function getKeysRecordsTimestr(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TCriteria $criteria
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function getKeyCriteria($key, \thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \thrift\data\TCriteria $criteria
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function getCriteria(\thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $ccl
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function getCcl($ccl, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \thrift\data\TCriteria $criteria
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function getCriteriaTime(\thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \thrift\data\TCriteria $criteria
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function getCriteriaTimestr(\thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $ccl
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function getCclTime($ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $ccl
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function getCclTimestr($ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $ccl
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function getKeyCcl($key, $ccl, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TCriteria $criteria
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function getKeyCriteriaTime($key, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TCriteria $criteria
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function getKeyCriteriaTimestr($key, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $ccl
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function getKeyCclTime($key, $ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $ccl
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function getKeyCclTimestr($key, $ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param \thrift\data\TCriteria $criteria
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function getKeysCriteria(array $keys, \thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param string $ccl
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function getKeysCcl(array $keys, $ccl, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param \thrift\data\TCriteria $criteria
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function getKeysCriteriaTime(array $keys, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param \thrift\data\TCriteria $criteria
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function getKeysCriteriaTimestr(array $keys, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param string $ccl
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function getKeysCclTime(array $keys, $ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param string $ccl
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function getKeysCclTimestr(array $keys, $ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $value
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function verifyKeyValueRecord($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $value
   * @param int $record
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function verifyKeyValueRecordTime($key, \thrift\data\TObject $value, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $value
   * @param int $record
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function verifyKeyValueRecordTimestr($key, \thrift\data\TObject $value, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param bool $identifier
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return string
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function jsonifyRecords(array $records, $identifier, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param int $timestamp
   * @param bool $identifier
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return string
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function jsonifyRecordsTime(array $records, $timestamp, $identifier, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param string $timestamp
   * @param bool $identifier
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return string
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function jsonifyRecordsTimestr(array $records, $timestamp, $identifier, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \thrift\data\TCriteria $criteria
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function findCriteria(\thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $ccl
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function findCcl($ccl, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $operator
   * @param \thrift\data\TObject[] $values
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function findKeyOperatorValues($key, $operator, array $values, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $operator
   * @param \thrift\data\TObject[] $values
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function findKeyOperatorValuesTime($key, $operator, array $values, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $operator
   * @param \thrift\data\TObject[] $values
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function findKeyOperatorValuesTimestr($key, $operator, array $values, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $operator
   * @param \thrift\data\TObject[] $values
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function findKeyOperatorstrValues($key, $operator, array $values, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $operator
   * @param \thrift\data\TObject[] $values
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function findKeyOperatorstrValuesTime($key, $operator, array $values, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $operator
   * @param \thrift\data\TObject[] $values
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function findKeyOperatorstrValuesTimestr($key, $operator, array $values, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $query
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int[]
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function search($key, $query, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function auditRecord($record, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param int $start
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function auditRecordStart($record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param string $start
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function auditRecordStartstr($record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param int $start
   * @param int $tend
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function auditRecordStartEnd($record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param string $start
   * @param string $tend
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function auditRecordStartstrEndstr($record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function auditKeyRecord($key, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param int $start
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function auditKeyRecordStart($key, $record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param string $start
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function auditKeyRecordStartstr($key, $record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param int $start
   * @param int $tend
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function auditKeyRecordStartEnd($key, $record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param string $start
   * @param string $tend
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function auditKeyRecordStartstrEndstr($key, $record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function chronologizeKeyRecord($key, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param int $start
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function chronologizeKeyRecordStart($key, $record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param string $start
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function chronologizeKeyRecordStartstr($key, $record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param int $start
   * @param int $tend
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function chronologizeKeyRecordStartEnd($key, $record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param string $start
   * @param string $tend
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function chronologizeKeyRecordStartstrEndstr($key, $record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param int $start
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function diffRecordStart($record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param string $start
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function diffRecordStartstr($record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param int $start
   * @param int $tend
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function diffRecordStartEnd($record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param string $start
   * @param string $tend
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function diffRecordStartstrEndstr($record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param int $start
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function diffKeyRecordStart($key, $record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param string $start
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function diffKeyRecordStartstr($key, $record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param int $start
   * @param int $tend
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function diffKeyRecordStartEnd($key, $record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param string $start
   * @param string $tend
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function diffKeyRecordStartstrEndstr($key, $record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $start
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function diffKeyStart($key, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $start
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function diffKeyStartstr($key, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $start
   * @param int $tend
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function diffKeyStartEnd($key, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param string $start
   * @param string $tend
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function diffKeyStartstrEndstr($key, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function revertKeysRecordsTime(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int[] $records
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function revertKeysRecordsTimestr(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function revertKeysRecordTime(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string[] $keys
   * @param int $record
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function revertKeysRecordTimestr(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function revertKeyRecordsTime($key, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int[] $records
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function revertKeyRecordsTimestr($key, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param int $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function revertKeyRecordTime($key, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param int $record
   * @param string $timestamp
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function revertKeyRecordTimestr($key, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int[] $records
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return array
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function pingRecords(array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function pingRecord($record, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $expected
   * @param int $record
   * @param \thrift\data\TObject $replacement
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return bool
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function verifyAndSwap($key, \thrift\data\TObject $expected, $record, \thrift\data\TObject $replacement, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $value
   * @param int $record
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\InvalidArgumentException
   */
  public function verifyOrSet($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $key
   * @param \thrift\data\TObject $value
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\DuplicateEntryException
   * @throws \thrift\exceptions\InvalidArgumentException
   */
  public function findOrAddKeyValue($key, \thrift\data\TObject $value, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \thrift\data\TCriteria $criteria
   * @param string $json
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\DuplicateEntryException
   */
  public function findOrInsertCriteriaJson(\thrift\data\TCriteria $criteria, $json, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param string $ccl
   * @param string $json
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $transaction
   * @param string $environment
   * @return int
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   * @throws \thrift\exceptions\DuplicateEntryException
   */
  public function findOrInsertCclJson($ccl, $json, \thrift\shared\AccessToken $creds,  $transaction, $environment);
  /**
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $token
   * @param string $environment
   * @return string
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function getServerEnvironment(\thrift\shared\AccessToken $creds,  $token, $environment);
  /**
   * @return string
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function getServerVersion();
  /**
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $token
   * @param string $environment
   * @return int
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   */
  public function time(\thrift\shared\AccessToken $creds,  $token, $environment);
  /**
   * @param string $phrase
   * @param \thrift\shared\AccessToken $creds
   * @param \thrift\shared\TransactionToken $token
   * @param string $environment
   * @return int
   * @throws \thrift\exceptions\SecurityException
   * @throws \thrift\exceptions\TransactionException
   * @throws \thrift\exceptions\ParseException
   */
  public function timePhrase($phrase, \thrift\shared\AccessToken $creds,  $token, $environment);
}

class ConcourseServiceClient implements \thrift\ConcourseServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function abort(\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_abort($creds, $transaction, $environment);
    $this->recv_abort();
  }

  public function send_abort(\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_abort_args();
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'abort', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('abort', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_abort()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_abort_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_abort_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    return;
  }

  public function commit(\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_commit($creds, $transaction, $environment);
    return $this->recv_commit();
  }

  public function send_commit(\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_commit_args();
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'commit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('commit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_commit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_commit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_commit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("commit failed: unknown result");
  }

  public function login($username, $password, $environment)
  {
    $this->send_login($username, $password, $environment);
    return $this->recv_login();
  }

  public function send_login($username, $password, $environment)
  {
    $args = new \thrift\ConcourseService_login_args();
    $args->username = $username;
    $args->password = $password;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'login', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('login', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_login()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_login_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_login_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("login failed: unknown result");
  }

  public function logout(\thrift\shared\AccessToken $token, $environment)
  {
    $this->send_logout($token, $environment);
    $this->recv_logout();
  }

  public function send_logout(\thrift\shared\AccessToken $token, $environment)
  {
    $args = new \thrift\ConcourseService_logout_args();
    $args->token = $token;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'logout', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('logout', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_logout()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_logout_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_logout_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    return;
  }

  public function stage(\thrift\shared\AccessToken $token, $environment)
  {
    $this->send_stage($token, $environment);
    return $this->recv_stage();
  }

  public function send_stage(\thrift\shared\AccessToken $token, $environment)
  {
    $args = new \thrift\ConcourseService_stage_args();
    $args->token = $token;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'stage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('stage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_stage()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_stage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_stage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("stage failed: unknown result");
  }

  public function addKeyValueRecord($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_addKeyValueRecord($key, $value, $record, $creds, $transaction, $environment);
    return $this->recv_addKeyValueRecord();
  }

  public function send_addKeyValueRecord($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_addKeyValueRecord_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addKeyValueRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addKeyValueRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addKeyValueRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_addKeyValueRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_addKeyValueRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("addKeyValueRecord failed: unknown result");
  }

  public function addKeyValue($key, \thrift\data\TObject $value, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_addKeyValue($key, $value, $creds, $transaction, $environment);
    return $this->recv_addKeyValue();
  }

  public function send_addKeyValue($key, \thrift\data\TObject $value, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_addKeyValue_args();
    $args->key = $key;
    $args->value = $value;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addKeyValue', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addKeyValue', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addKeyValue()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_addKeyValue_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_addKeyValue_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("addKeyValue failed: unknown result");
  }

  public function addKeyValueRecords($key, \thrift\data\TObject $value, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_addKeyValueRecords($key, $value, $records, $creds, $transaction, $environment);
    return $this->recv_addKeyValueRecords();
  }

  public function send_addKeyValueRecords($key, \thrift\data\TObject $value, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_addKeyValueRecords_args();
    $args->key = $key;
    $args->value = $value;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addKeyValueRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addKeyValueRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addKeyValueRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_addKeyValueRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_addKeyValueRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("addKeyValueRecords failed: unknown result");
  }

  public function clearRecord($record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_clearRecord($record, $creds, $transaction, $environment);
    $this->recv_clearRecord();
  }

  public function send_clearRecord($record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_clearRecord_args();
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clearRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clearRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clearRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_clearRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_clearRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function clearRecords(array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_clearRecords($records, $creds, $transaction, $environment);
    $this->recv_clearRecords();
  }

  public function send_clearRecords(array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_clearRecords_args();
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clearRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clearRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clearRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_clearRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_clearRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function clearKeyRecord($key, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_clearKeyRecord($key, $record, $creds, $transaction, $environment);
    $this->recv_clearKeyRecord();
  }

  public function send_clearKeyRecord($key, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_clearKeyRecord_args();
    $args->key = $key;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clearKeyRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clearKeyRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clearKeyRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_clearKeyRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_clearKeyRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function clearKeysRecord(array $keys, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_clearKeysRecord($keys, $record, $creds, $transaction, $environment);
    $this->recv_clearKeysRecord();
  }

  public function send_clearKeysRecord(array $keys, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_clearKeysRecord_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clearKeysRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clearKeysRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clearKeysRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_clearKeysRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_clearKeysRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function clearKeyRecords($key, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_clearKeyRecords($key, $records, $creds, $transaction, $environment);
    $this->recv_clearKeyRecords();
  }

  public function send_clearKeyRecords($key, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_clearKeyRecords_args();
    $args->key = $key;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clearKeyRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clearKeyRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clearKeyRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_clearKeyRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_clearKeyRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function clearKeysRecords(array $keys, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_clearKeysRecords($keys, $records, $creds, $transaction, $environment);
    $this->recv_clearKeysRecords();
  }

  public function send_clearKeysRecords(array $keys, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_clearKeysRecords_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clearKeysRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clearKeysRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clearKeysRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_clearKeysRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_clearKeysRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function insertJson($json, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_insertJson($json, $creds, $transaction, $environment);
    return $this->recv_insertJson();
  }

  public function send_insertJson($json, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_insertJson_args();
    $args->json = $json;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertJson()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_insertJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_insertJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("insertJson failed: unknown result");
  }

  public function insertJsonRecord($json, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_insertJsonRecord($json, $record, $creds, $transaction, $environment);
    return $this->recv_insertJsonRecord();
  }

  public function send_insertJsonRecord($json, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_insertJsonRecord_args();
    $args->json = $json;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertJsonRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertJsonRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertJsonRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_insertJsonRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_insertJsonRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("insertJsonRecord failed: unknown result");
  }

  public function insertJsonRecords($json, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_insertJsonRecords($json, $records, $creds, $transaction, $environment);
    return $this->recv_insertJsonRecords();
  }

  public function send_insertJsonRecords($json, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_insertJsonRecords_args();
    $args->json = $json;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insertJsonRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insertJsonRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insertJsonRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_insertJsonRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_insertJsonRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("insertJsonRecords failed: unknown result");
  }

  public function removeKeyValueRecord($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_removeKeyValueRecord($key, $value, $record, $creds, $transaction, $environment);
    return $this->recv_removeKeyValueRecord();
  }

  public function send_removeKeyValueRecord($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_removeKeyValueRecord_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'removeKeyValueRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('removeKeyValueRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_removeKeyValueRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_removeKeyValueRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_removeKeyValueRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("removeKeyValueRecord failed: unknown result");
  }

  public function removeKeyValueRecords($key, \thrift\data\TObject $value, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_removeKeyValueRecords($key, $value, $records, $creds, $transaction, $environment);
    return $this->recv_removeKeyValueRecords();
  }

  public function send_removeKeyValueRecords($key, \thrift\data\TObject $value, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_removeKeyValueRecords_args();
    $args->key = $key;
    $args->value = $value;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'removeKeyValueRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('removeKeyValueRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_removeKeyValueRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_removeKeyValueRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_removeKeyValueRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("removeKeyValueRecords failed: unknown result");
  }

  public function setKeyValueRecord($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_setKeyValueRecord($key, $value, $record, $creds, $transaction, $environment);
    $this->recv_setKeyValueRecord();
  }

  public function send_setKeyValueRecord($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_setKeyValueRecord_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setKeyValueRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setKeyValueRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setKeyValueRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_setKeyValueRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_setKeyValueRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    return;
  }

  public function setKeyValue($key, \thrift\data\TObject $value, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_setKeyValue($key, $value, $creds, $transaction, $environment);
    return $this->recv_setKeyValue();
  }

  public function send_setKeyValue($key, \thrift\data\TObject $value, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_setKeyValue_args();
    $args->key = $key;
    $args->value = $value;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setKeyValue', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setKeyValue', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setKeyValue()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_setKeyValue_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_setKeyValue_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("setKeyValue failed: unknown result");
  }

  public function setKeyValueRecords($key, \thrift\data\TObject $value, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_setKeyValueRecords($key, $value, $records, $creds, $transaction, $environment);
    $this->recv_setKeyValueRecords();
  }

  public function send_setKeyValueRecords($key, \thrift\data\TObject $value, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_setKeyValueRecords_args();
    $args->key = $key;
    $args->value = $value;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setKeyValueRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setKeyValueRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setKeyValueRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_setKeyValueRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_setKeyValueRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    return;
  }

  public function inventory(\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_inventory($creds, $transaction, $environment);
    return $this->recv_inventory();
  }

  public function send_inventory(\thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_inventory_args();
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'inventory', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('inventory', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_inventory()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_inventory_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_inventory_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("inventory failed: unknown result");
  }

  public function selectRecord($record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectRecord($record, $creds, $transaction, $environment);
    return $this->recv_selectRecord();
  }

  public function send_selectRecord($record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectRecord_args();
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectRecord failed: unknown result");
  }

  public function selectRecords(array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectRecords($records, $creds, $transaction, $environment);
    return $this->recv_selectRecords();
  }

  public function send_selectRecords(array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectRecords_args();
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectRecords failed: unknown result");
  }

  public function selectRecordTime($record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectRecordTime($record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectRecordTime();
  }

  public function send_selectRecordTime($record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectRecordTime_args();
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectRecordTime failed: unknown result");
  }

  public function selectRecordTimestr($record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectRecordTimestr($record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectRecordTimestr();
  }

  public function send_selectRecordTimestr($record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectRecordTimestr_args();
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectRecordTimestr failed: unknown result");
  }

  public function selectRecordsTime(array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectRecordsTime($records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectRecordsTime();
  }

  public function send_selectRecordsTime(array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectRecordsTime_args();
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectRecordsTime failed: unknown result");
  }

  public function selectRecordsTimestr(array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectRecordsTimestr($records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectRecordsTimestr();
  }

  public function send_selectRecordsTimestr(array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectRecordsTimestr_args();
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectRecordsTimestr failed: unknown result");
  }

  public function browseKey($key, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_browseKey($key, $creds, $transaction, $environment);
    return $this->recv_browseKey();
  }

  public function send_browseKey($key, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_browseKey_args();
    $args->key = $key;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'browseKey', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('browseKey', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_browseKey()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_browseKey_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_browseKey_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("browseKey failed: unknown result");
  }

  public function browseKeys(array $keys, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_browseKeys($keys, $creds, $transaction, $environment);
    return $this->recv_browseKeys();
  }

  public function send_browseKeys(array $keys, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_browseKeys_args();
    $args->keys = $keys;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'browseKeys', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('browseKeys', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_browseKeys()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_browseKeys_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_browseKeys_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("browseKeys failed: unknown result");
  }

  public function browseKeyTime($key, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_browseKeyTime($key, $timestamp, $creds, $transaction, $environment);
    return $this->recv_browseKeyTime();
  }

  public function send_browseKeyTime($key, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_browseKeyTime_args();
    $args->key = $key;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'browseKeyTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('browseKeyTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_browseKeyTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_browseKeyTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_browseKeyTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("browseKeyTime failed: unknown result");
  }

  public function browseKeyTimestr($key, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_browseKeyTimestr($key, $timestamp, $creds, $transaction, $environment);
    return $this->recv_browseKeyTimestr();
  }

  public function send_browseKeyTimestr($key, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_browseKeyTimestr_args();
    $args->key = $key;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'browseKeyTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('browseKeyTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_browseKeyTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_browseKeyTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_browseKeyTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("browseKeyTimestr failed: unknown result");
  }

  public function browseKeysTime(array $keys, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_browseKeysTime($keys, $timestamp, $creds, $transaction, $environment);
    return $this->recv_browseKeysTime();
  }

  public function send_browseKeysTime(array $keys, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_browseKeysTime_args();
    $args->keys = $keys;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'browseKeysTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('browseKeysTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_browseKeysTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_browseKeysTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_browseKeysTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("browseKeysTime failed: unknown result");
  }

  public function browseKeysTimestr(array $keys, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_browseKeysTimestr($keys, $timestamp, $creds, $transaction, $environment);
    return $this->recv_browseKeysTimestr();
  }

  public function send_browseKeysTimestr(array $keys, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_browseKeysTimestr_args();
    $args->keys = $keys;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'browseKeysTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('browseKeysTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_browseKeysTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_browseKeysTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_browseKeysTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("browseKeysTimestr failed: unknown result");
  }

  public function describeRecord($record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_describeRecord($record, $creds, $transaction, $environment);
    return $this->recv_describeRecord();
  }

  public function send_describeRecord($record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_describeRecord_args();
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'describeRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('describeRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_describeRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_describeRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_describeRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("describeRecord failed: unknown result");
  }

  public function describeRecordTime($record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_describeRecordTime($record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_describeRecordTime();
  }

  public function send_describeRecordTime($record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_describeRecordTime_args();
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'describeRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('describeRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_describeRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_describeRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_describeRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("describeRecordTime failed: unknown result");
  }

  public function describeRecordTimestr($record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_describeRecordTimestr($record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_describeRecordTimestr();
  }

  public function send_describeRecordTimestr($record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_describeRecordTimestr_args();
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'describeRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('describeRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_describeRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_describeRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_describeRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("describeRecordTimestr failed: unknown result");
  }

  public function describeRecords(array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_describeRecords($records, $creds, $transaction, $environment);
    return $this->recv_describeRecords();
  }

  public function send_describeRecords(array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_describeRecords_args();
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'describeRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('describeRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_describeRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_describeRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_describeRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("describeRecords failed: unknown result");
  }

  public function describeRecordsTime(array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_describeRecordsTime($records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_describeRecordsTime();
  }

  public function send_describeRecordsTime(array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_describeRecordsTime_args();
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'describeRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('describeRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_describeRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_describeRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_describeRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("describeRecordsTime failed: unknown result");
  }

  public function describeRecordsTimestr(array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_describeRecordsTimestr($records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_describeRecordsTimestr();
  }

  public function send_describeRecordsTimestr(array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_describeRecordsTimestr_args();
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'describeRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('describeRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_describeRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_describeRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_describeRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("describeRecordsTimestr failed: unknown result");
  }

  public function selectKeyRecord($key, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyRecord($key, $record, $creds, $transaction, $environment);
    return $this->recv_selectKeyRecord();
  }

  public function send_selectKeyRecord($key, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeyRecord_args();
    $args->key = $key;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeyRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeyRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeyRecord failed: unknown result");
  }

  public function selectKeyRecordTime($key, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyRecordTime($key, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyRecordTime();
  }

  public function send_selectKeyRecordTime($key, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeyRecordTime_args();
    $args->key = $key;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeyRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeyRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeyRecordTime failed: unknown result");
  }

  public function selectKeyRecordTimestr($key, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyRecordTimestr($key, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyRecordTimestr();
  }

  public function send_selectKeyRecordTimestr($key, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeyRecordTimestr_args();
    $args->key = $key;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeyRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeyRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeyRecordTimestr failed: unknown result");
  }

  public function selectKeysRecord(array $keys, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysRecord($keys, $record, $creds, $transaction, $environment);
    return $this->recv_selectKeysRecord();
  }

  public function send_selectKeysRecord(array $keys, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeysRecord_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeysRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeysRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeysRecord failed: unknown result");
  }

  public function selectKeysRecordTime(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysRecordTime($keys, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysRecordTime();
  }

  public function send_selectKeysRecordTime(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeysRecordTime_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeysRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeysRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeysRecordTime failed: unknown result");
  }

  public function selectKeysRecordTimestr(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysRecordTimestr($keys, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysRecordTimestr();
  }

  public function send_selectKeysRecordTimestr(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeysRecordTimestr_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeysRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeysRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeysRecordTimestr failed: unknown result");
  }

  public function selectKeysRecords(array $keys, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysRecords($keys, $records, $creds, $transaction, $environment);
    return $this->recv_selectKeysRecords();
  }

  public function send_selectKeysRecords(array $keys, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeysRecords_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeysRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeysRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeysRecords failed: unknown result");
  }

  public function selectKeyRecords($key, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyRecords($key, $records, $creds, $transaction, $environment);
    return $this->recv_selectKeyRecords();
  }

  public function send_selectKeyRecords($key, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeyRecords_args();
    $args->key = $key;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeyRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeyRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeyRecords failed: unknown result");
  }

  public function selectKeyRecordsTime($key, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyRecordsTime($key, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyRecordsTime();
  }

  public function send_selectKeyRecordsTime($key, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeyRecordsTime_args();
    $args->key = $key;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeyRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeyRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeyRecordsTime failed: unknown result");
  }

  public function selectKeyRecordsTimestr($key, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyRecordsTimestr($key, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyRecordsTimestr();
  }

  public function send_selectKeyRecordsTimestr($key, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeyRecordsTimestr_args();
    $args->key = $key;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeyRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeyRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeyRecordsTimestr failed: unknown result");
  }

  public function selectKeysRecordsTime(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysRecordsTime($keys, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysRecordsTime();
  }

  public function send_selectKeysRecordsTime(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeysRecordsTime_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeysRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeysRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeysRecordsTime failed: unknown result");
  }

  public function selectKeysRecordsTimestr(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysRecordsTimestr($keys, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysRecordsTimestr();
  }

  public function send_selectKeysRecordsTimestr(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeysRecordsTimestr_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeysRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeysRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeysRecordsTimestr failed: unknown result");
  }

  public function selectCriteria(\thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectCriteria($criteria, $creds, $transaction, $environment);
    return $this->recv_selectCriteria();
  }

  public function send_selectCriteria(\thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectCriteria_args();
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectCriteria failed: unknown result");
  }

  public function selectCcl($ccl, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectCcl($ccl, $creds, $transaction, $environment);
    return $this->recv_selectCcl();
  }

  public function send_selectCcl($ccl, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectCcl_args();
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectCcl failed: unknown result");
  }

  public function selectCriteriaTime(\thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectCriteriaTime($criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectCriteriaTime();
  }

  public function send_selectCriteriaTime(\thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectCriteriaTime_args();
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectCriteriaTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectCriteriaTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectCriteriaTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectCriteriaTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectCriteriaTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectCriteriaTime failed: unknown result");
  }

  public function selectCriteriaTimestr(\thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectCriteriaTimestr($criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectCriteriaTimestr();
  }

  public function send_selectCriteriaTimestr(\thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectCriteriaTimestr_args();
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectCriteriaTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectCriteriaTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectCriteriaTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectCriteriaTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectCriteriaTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectCriteriaTimestr failed: unknown result");
  }

  public function selectCclTime($ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectCclTime($ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectCclTime();
  }

  public function send_selectCclTime($ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectCclTime_args();
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectCclTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectCclTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectCclTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectCclTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectCclTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectCclTime failed: unknown result");
  }

  public function selectCclTimestr($ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectCclTimestr($ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectCclTimestr();
  }

  public function send_selectCclTimestr($ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectCclTimestr_args();
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectCclTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectCclTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectCclTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectCclTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectCclTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectCclTimestr failed: unknown result");
  }

  public function selectKeyCriteria($key, \thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyCriteria($key, $criteria, $creds, $transaction, $environment);
    return $this->recv_selectKeyCriteria();
  }

  public function send_selectKeyCriteria($key, \thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeyCriteria_args();
    $args->key = $key;
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeyCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeyCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeyCriteria failed: unknown result");
  }

  public function selectKeyCcl($key, $ccl, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyCcl($key, $ccl, $creds, $transaction, $environment);
    return $this->recv_selectKeyCcl();
  }

  public function send_selectKeyCcl($key, $ccl, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeyCcl_args();
    $args->key = $key;
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeyCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeyCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeyCcl failed: unknown result");
  }

  public function selectKeyCriteriaTime($key, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyCriteriaTime($key, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyCriteriaTime();
  }

  public function send_selectKeyCriteriaTime($key, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeyCriteriaTime_args();
    $args->key = $key;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyCriteriaTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyCriteriaTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyCriteriaTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeyCriteriaTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeyCriteriaTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeyCriteriaTime failed: unknown result");
  }

  public function selectKeyCriteriaTimestr($key, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyCriteriaTimestr($key, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyCriteriaTimestr();
  }

  public function send_selectKeyCriteriaTimestr($key, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeyCriteriaTimestr_args();
    $args->key = $key;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyCriteriaTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyCriteriaTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyCriteriaTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeyCriteriaTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeyCriteriaTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeyCriteriaTimestr failed: unknown result");
  }

  public function selectKeyCclTime($key, $ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyCclTime($key, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyCclTime();
  }

  public function send_selectKeyCclTime($key, $ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeyCclTime_args();
    $args->key = $key;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyCclTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyCclTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyCclTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeyCclTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeyCclTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeyCclTime failed: unknown result");
  }

  public function selectKeyCclTimestr($key, $ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeyCclTimestr($key, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeyCclTimestr();
  }

  public function send_selectKeyCclTimestr($key, $ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeyCclTimestr_args();
    $args->key = $key;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeyCclTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeyCclTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeyCclTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeyCclTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeyCclTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeyCclTimestr failed: unknown result");
  }

  public function selectKeysCriteria(array $keys, \thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysCriteria($keys, $criteria, $creds, $transaction, $environment);
    return $this->recv_selectKeysCriteria();
  }

  public function send_selectKeysCriteria(array $keys, \thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeysCriteria_args();
    $args->keys = $keys;
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeysCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeysCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeysCriteria failed: unknown result");
  }

  public function selectKeysCcl(array $keys, $ccl, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysCcl($keys, $ccl, $creds, $transaction, $environment);
    return $this->recv_selectKeysCcl();
  }

  public function send_selectKeysCcl(array $keys, $ccl, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeysCcl_args();
    $args->keys = $keys;
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeysCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeysCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeysCcl failed: unknown result");
  }

  public function selectKeysCriteriaTime(array $keys, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysCriteriaTime($keys, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysCriteriaTime();
  }

  public function send_selectKeysCriteriaTime(array $keys, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeysCriteriaTime_args();
    $args->keys = $keys;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysCriteriaTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysCriteriaTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysCriteriaTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeysCriteriaTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeysCriteriaTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("selectKeysCriteriaTime failed: unknown result");
  }

  public function selectKeysCriteriaTimestr(array $keys, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysCriteriaTimestr($keys, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysCriteriaTimestr();
  }

  public function send_selectKeysCriteriaTimestr(array $keys, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeysCriteriaTimestr_args();
    $args->keys = $keys;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysCriteriaTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysCriteriaTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysCriteriaTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeysCriteriaTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeysCriteriaTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeysCriteriaTimestr failed: unknown result");
  }

  public function selectKeysCclTime(array $keys, $ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysCclTime($keys, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysCclTime();
  }

  public function send_selectKeysCclTime(array $keys, $ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeysCclTime_args();
    $args->keys = $keys;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysCclTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysCclTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysCclTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeysCclTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeysCclTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeysCclTime failed: unknown result");
  }

  public function selectKeysCclTimestr(array $keys, $ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_selectKeysCclTimestr($keys, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_selectKeysCclTimestr();
  }

  public function send_selectKeysCclTimestr(array $keys, $ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_selectKeysCclTimestr_args();
    $args->keys = $keys;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'selectKeysCclTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('selectKeysCclTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_selectKeysCclTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_selectKeysCclTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_selectKeysCclTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("selectKeysCclTimestr failed: unknown result");
  }

  public function getKeyRecord($key, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyRecord($key, $record, $creds, $transaction, $environment);
    return $this->recv_getKeyRecord();
  }

  public function send_getKeyRecord($key, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeyRecord_args();
    $args->key = $key;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeyRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeyRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeyRecord failed: unknown result");
  }

  public function getKeyRecordTime($key, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyRecordTime($key, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyRecordTime();
  }

  public function send_getKeyRecordTime($key, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeyRecordTime_args();
    $args->key = $key;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeyRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeyRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeyRecordTime failed: unknown result");
  }

  public function getKeyRecordTimestr($key, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyRecordTimestr($key, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyRecordTimestr();
  }

  public function send_getKeyRecordTimestr($key, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeyRecordTimestr_args();
    $args->key = $key;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeyRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeyRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeyRecordTimestr failed: unknown result");
  }

  public function getKeysRecord(array $keys, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysRecord($keys, $record, $creds, $transaction, $environment);
    return $this->recv_getKeysRecord();
  }

  public function send_getKeysRecord(array $keys, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeysRecord_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeysRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeysRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeysRecord failed: unknown result");
  }

  public function getKeysRecordTime(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysRecordTime($keys, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysRecordTime();
  }

  public function send_getKeysRecordTime(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeysRecordTime_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeysRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeysRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeysRecordTime failed: unknown result");
  }

  public function getKeysRecordTimestr(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysRecordTimestr($keys, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysRecordTimestr();
  }

  public function send_getKeysRecordTimestr(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeysRecordTimestr_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeysRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeysRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeysRecordTimestr failed: unknown result");
  }

  public function getKeysRecords(array $keys, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysRecords($keys, $records, $creds, $transaction, $environment);
    return $this->recv_getKeysRecords();
  }

  public function send_getKeysRecords(array $keys, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeysRecords_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeysRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeysRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeysRecords failed: unknown result");
  }

  public function getKeyRecords($key, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyRecords($key, $records, $creds, $transaction, $environment);
    return $this->recv_getKeyRecords();
  }

  public function send_getKeyRecords($key, array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeyRecords_args();
    $args->key = $key;
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeyRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeyRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeyRecords failed: unknown result");
  }

  public function getKeyRecordsTime($key, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyRecordsTime($key, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyRecordsTime();
  }

  public function send_getKeyRecordsTime($key, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeyRecordsTime_args();
    $args->key = $key;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeyRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeyRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeyRecordsTime failed: unknown result");
  }

  public function getKeyRecordsTimestr($key, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyRecordsTimestr($key, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyRecordsTimestr();
  }

  public function send_getKeyRecordsTimestr($key, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeyRecordsTimestr_args();
    $args->key = $key;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeyRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeyRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeyRecordsTimestr failed: unknown result");
  }

  public function getKeysRecordsTime(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysRecordsTime($keys, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysRecordsTime();
  }

  public function send_getKeysRecordsTime(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeysRecordsTime_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeysRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeysRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeysRecordsTime failed: unknown result");
  }

  public function getKeysRecordsTimestr(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysRecordsTimestr($keys, $records, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysRecordsTimestr();
  }

  public function send_getKeysRecordsTimestr(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeysRecordsTimestr_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeysRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeysRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeysRecordsTimestr failed: unknown result");
  }

  public function getKeyCriteria($key, \thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyCriteria($key, $criteria, $creds, $transaction, $environment);
    return $this->recv_getKeyCriteria();
  }

  public function send_getKeyCriteria($key, \thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeyCriteria_args();
    $args->key = $key;
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeyCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeyCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeyCriteria failed: unknown result");
  }

  public function getCriteria(\thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getCriteria($criteria, $creds, $transaction, $environment);
    return $this->recv_getCriteria();
  }

  public function send_getCriteria(\thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getCriteria_args();
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getCriteria failed: unknown result");
  }

  public function getCcl($ccl, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getCcl($ccl, $creds, $transaction, $environment);
    return $this->recv_getCcl();
  }

  public function send_getCcl($ccl, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getCcl_args();
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getCcl failed: unknown result");
  }

  public function getCriteriaTime(\thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getCriteriaTime($criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getCriteriaTime();
  }

  public function send_getCriteriaTime(\thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getCriteriaTime_args();
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCriteriaTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCriteriaTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCriteriaTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getCriteriaTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getCriteriaTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getCriteriaTime failed: unknown result");
  }

  public function getCriteriaTimestr(\thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getCriteriaTimestr($criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getCriteriaTimestr();
  }

  public function send_getCriteriaTimestr(\thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getCriteriaTimestr_args();
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCriteriaTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCriteriaTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCriteriaTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getCriteriaTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getCriteriaTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getCriteriaTimestr failed: unknown result");
  }

  public function getCclTime($ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getCclTime($ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getCclTime();
  }

  public function send_getCclTime($ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getCclTime_args();
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCclTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCclTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCclTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getCclTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getCclTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getCclTime failed: unknown result");
  }

  public function getCclTimestr($ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getCclTimestr($ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getCclTimestr();
  }

  public function send_getCclTimestr($ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getCclTimestr_args();
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCclTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCclTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCclTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getCclTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getCclTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getCclTimestr failed: unknown result");
  }

  public function getKeyCcl($key, $ccl, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyCcl($key, $ccl, $creds, $transaction, $environment);
    return $this->recv_getKeyCcl();
  }

  public function send_getKeyCcl($key, $ccl, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeyCcl_args();
    $args->key = $key;
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeyCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeyCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeyCcl failed: unknown result");
  }

  public function getKeyCriteriaTime($key, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyCriteriaTime($key, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyCriteriaTime();
  }

  public function send_getKeyCriteriaTime($key, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeyCriteriaTime_args();
    $args->key = $key;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyCriteriaTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyCriteriaTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyCriteriaTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeyCriteriaTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeyCriteriaTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeyCriteriaTime failed: unknown result");
  }

  public function getKeyCriteriaTimestr($key, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyCriteriaTimestr($key, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyCriteriaTimestr();
  }

  public function send_getKeyCriteriaTimestr($key, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeyCriteriaTimestr_args();
    $args->key = $key;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyCriteriaTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyCriteriaTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyCriteriaTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeyCriteriaTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeyCriteriaTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeyCriteriaTimestr failed: unknown result");
  }

  public function getKeyCclTime($key, $ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyCclTime($key, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyCclTime();
  }

  public function send_getKeyCclTime($key, $ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeyCclTime_args();
    $args->key = $key;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyCclTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyCclTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyCclTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeyCclTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeyCclTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeyCclTime failed: unknown result");
  }

  public function getKeyCclTimestr($key, $ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeyCclTimestr($key, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeyCclTimestr();
  }

  public function send_getKeyCclTimestr($key, $ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeyCclTimestr_args();
    $args->key = $key;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeyCclTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeyCclTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeyCclTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeyCclTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeyCclTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeyCclTimestr failed: unknown result");
  }

  public function getKeysCriteria(array $keys, \thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysCriteria($keys, $criteria, $creds, $transaction, $environment);
    return $this->recv_getKeysCriteria();
  }

  public function send_getKeysCriteria(array $keys, \thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeysCriteria_args();
    $args->keys = $keys;
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeysCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeysCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeysCriteria failed: unknown result");
  }

  public function getKeysCcl(array $keys, $ccl, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysCcl($keys, $ccl, $creds, $transaction, $environment);
    return $this->recv_getKeysCcl();
  }

  public function send_getKeysCcl(array $keys, $ccl, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeysCcl_args();
    $args->keys = $keys;
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeysCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeysCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeysCcl failed: unknown result");
  }

  public function getKeysCriteriaTime(array $keys, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysCriteriaTime($keys, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysCriteriaTime();
  }

  public function send_getKeysCriteriaTime(array $keys, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeysCriteriaTime_args();
    $args->keys = $keys;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysCriteriaTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysCriteriaTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysCriteriaTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeysCriteriaTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeysCriteriaTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getKeysCriteriaTime failed: unknown result");
  }

  public function getKeysCriteriaTimestr(array $keys, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysCriteriaTimestr($keys, $criteria, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysCriteriaTimestr();
  }

  public function send_getKeysCriteriaTimestr(array $keys, \thrift\data\TCriteria $criteria, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeysCriteriaTimestr_args();
    $args->keys = $keys;
    $args->criteria = $criteria;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysCriteriaTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysCriteriaTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysCriteriaTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeysCriteriaTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeysCriteriaTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeysCriteriaTimestr failed: unknown result");
  }

  public function getKeysCclTime(array $keys, $ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysCclTime($keys, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysCclTime();
  }

  public function send_getKeysCclTime(array $keys, $ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeysCclTime_args();
    $args->keys = $keys;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysCclTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysCclTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysCclTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeysCclTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeysCclTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeysCclTime failed: unknown result");
  }

  public function getKeysCclTimestr(array $keys, $ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_getKeysCclTimestr($keys, $ccl, $timestamp, $creds, $transaction, $environment);
    return $this->recv_getKeysCclTimestr();
  }

  public function send_getKeysCclTimestr(array $keys, $ccl, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_getKeysCclTimestr_args();
    $args->keys = $keys;
    $args->ccl = $ccl;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getKeysCclTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getKeysCclTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getKeysCclTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getKeysCclTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getKeysCclTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("getKeysCclTimestr failed: unknown result");
  }

  public function verifyKeyValueRecord($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_verifyKeyValueRecord($key, $value, $record, $creds, $transaction, $environment);
    return $this->recv_verifyKeyValueRecord();
  }

  public function send_verifyKeyValueRecord($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_verifyKeyValueRecord_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'verifyKeyValueRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('verifyKeyValueRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_verifyKeyValueRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_verifyKeyValueRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_verifyKeyValueRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("verifyKeyValueRecord failed: unknown result");
  }

  public function verifyKeyValueRecordTime($key, \thrift\data\TObject $value, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_verifyKeyValueRecordTime($key, $value, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_verifyKeyValueRecordTime();
  }

  public function send_verifyKeyValueRecordTime($key, \thrift\data\TObject $value, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_verifyKeyValueRecordTime_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'verifyKeyValueRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('verifyKeyValueRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_verifyKeyValueRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_verifyKeyValueRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_verifyKeyValueRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("verifyKeyValueRecordTime failed: unknown result");
  }

  public function verifyKeyValueRecordTimestr($key, \thrift\data\TObject $value, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_verifyKeyValueRecordTimestr($key, $value, $record, $timestamp, $creds, $transaction, $environment);
    return $this->recv_verifyKeyValueRecordTimestr();
  }

  public function send_verifyKeyValueRecordTimestr($key, \thrift\data\TObject $value, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_verifyKeyValueRecordTimestr_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'verifyKeyValueRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('verifyKeyValueRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_verifyKeyValueRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_verifyKeyValueRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_verifyKeyValueRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("verifyKeyValueRecordTimestr failed: unknown result");
  }

  public function jsonifyRecords(array $records, $identifier, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_jsonifyRecords($records, $identifier, $creds, $transaction, $environment);
    return $this->recv_jsonifyRecords();
  }

  public function send_jsonifyRecords(array $records, $identifier, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_jsonifyRecords_args();
    $args->records = $records;
    $args->identifier = $identifier;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'jsonifyRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('jsonifyRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_jsonifyRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_jsonifyRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_jsonifyRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("jsonifyRecords failed: unknown result");
  }

  public function jsonifyRecordsTime(array $records, $timestamp, $identifier, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_jsonifyRecordsTime($records, $timestamp, $identifier, $creds, $transaction, $environment);
    return $this->recv_jsonifyRecordsTime();
  }

  public function send_jsonifyRecordsTime(array $records, $timestamp, $identifier, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_jsonifyRecordsTime_args();
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->identifier = $identifier;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'jsonifyRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('jsonifyRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_jsonifyRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_jsonifyRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_jsonifyRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("jsonifyRecordsTime failed: unknown result");
  }

  public function jsonifyRecordsTimestr(array $records, $timestamp, $identifier, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_jsonifyRecordsTimestr($records, $timestamp, $identifier, $creds, $transaction, $environment);
    return $this->recv_jsonifyRecordsTimestr();
  }

  public function send_jsonifyRecordsTimestr(array $records, $timestamp, $identifier, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_jsonifyRecordsTimestr_args();
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->identifier = $identifier;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'jsonifyRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('jsonifyRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_jsonifyRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_jsonifyRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_jsonifyRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("jsonifyRecordsTimestr failed: unknown result");
  }

  public function findCriteria(\thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findCriteria($criteria, $creds, $transaction, $environment);
    return $this->recv_findCriteria();
  }

  public function send_findCriteria(\thrift\data\TCriteria $criteria, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_findCriteria_args();
    $args->criteria = $criteria;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findCriteria', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findCriteria', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findCriteria()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_findCriteria_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_findCriteria_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("findCriteria failed: unknown result");
  }

  public function findCcl($ccl, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findCcl($ccl, $creds, $transaction, $environment);
    return $this->recv_findCcl();
  }

  public function send_findCcl($ccl, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_findCcl_args();
    $args->ccl = $ccl;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findCcl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findCcl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findCcl()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_findCcl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_findCcl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("findCcl failed: unknown result");
  }

  public function findKeyOperatorValues($key, $operator, array $values, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findKeyOperatorValues($key, $operator, $values, $creds, $transaction, $environment);
    return $this->recv_findKeyOperatorValues();
  }

  public function send_findKeyOperatorValues($key, $operator, array $values, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_findKeyOperatorValues_args();
    $args->key = $key;
    $args->operator = $operator;
    $args->values = $values;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findKeyOperatorValues', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findKeyOperatorValues', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findKeyOperatorValues()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_findKeyOperatorValues_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_findKeyOperatorValues_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("findKeyOperatorValues failed: unknown result");
  }

  public function findKeyOperatorValuesTime($key, $operator, array $values, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findKeyOperatorValuesTime($key, $operator, $values, $timestamp, $creds, $transaction, $environment);
    return $this->recv_findKeyOperatorValuesTime();
  }

  public function send_findKeyOperatorValuesTime($key, $operator, array $values, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_findKeyOperatorValuesTime_args();
    $args->key = $key;
    $args->operator = $operator;
    $args->values = $values;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findKeyOperatorValuesTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findKeyOperatorValuesTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findKeyOperatorValuesTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_findKeyOperatorValuesTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_findKeyOperatorValuesTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("findKeyOperatorValuesTime failed: unknown result");
  }

  public function findKeyOperatorValuesTimestr($key, $operator, array $values, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findKeyOperatorValuesTimestr($key, $operator, $values, $timestamp, $creds, $transaction, $environment);
    return $this->recv_findKeyOperatorValuesTimestr();
  }

  public function send_findKeyOperatorValuesTimestr($key, $operator, array $values, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_findKeyOperatorValuesTimestr_args();
    $args->key = $key;
    $args->operator = $operator;
    $args->values = $values;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findKeyOperatorValuesTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findKeyOperatorValuesTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findKeyOperatorValuesTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_findKeyOperatorValuesTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_findKeyOperatorValuesTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("findKeyOperatorValuesTimestr failed: unknown result");
  }

  public function findKeyOperatorstrValues($key, $operator, array $values, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findKeyOperatorstrValues($key, $operator, $values, $creds, $transaction, $environment);
    return $this->recv_findKeyOperatorstrValues();
  }

  public function send_findKeyOperatorstrValues($key, $operator, array $values, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_findKeyOperatorstrValues_args();
    $args->key = $key;
    $args->operator = $operator;
    $args->values = $values;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findKeyOperatorstrValues', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findKeyOperatorstrValues', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findKeyOperatorstrValues()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_findKeyOperatorstrValues_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_findKeyOperatorstrValues_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("findKeyOperatorstrValues failed: unknown result");
  }

  public function findKeyOperatorstrValuesTime($key, $operator, array $values, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findKeyOperatorstrValuesTime($key, $operator, $values, $timestamp, $creds, $transaction, $environment);
    return $this->recv_findKeyOperatorstrValuesTime();
  }

  public function send_findKeyOperatorstrValuesTime($key, $operator, array $values, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_findKeyOperatorstrValuesTime_args();
    $args->key = $key;
    $args->operator = $operator;
    $args->values = $values;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findKeyOperatorstrValuesTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findKeyOperatorstrValuesTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findKeyOperatorstrValuesTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_findKeyOperatorstrValuesTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_findKeyOperatorstrValuesTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("findKeyOperatorstrValuesTime failed: unknown result");
  }

  public function findKeyOperatorstrValuesTimestr($key, $operator, array $values, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findKeyOperatorstrValuesTimestr($key, $operator, $values, $timestamp, $creds, $transaction, $environment);
    return $this->recv_findKeyOperatorstrValuesTimestr();
  }

  public function send_findKeyOperatorstrValuesTimestr($key, $operator, array $values, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_findKeyOperatorstrValuesTimestr_args();
    $args->key = $key;
    $args->operator = $operator;
    $args->values = $values;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findKeyOperatorstrValuesTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findKeyOperatorstrValuesTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findKeyOperatorstrValuesTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_findKeyOperatorstrValuesTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_findKeyOperatorstrValuesTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("findKeyOperatorstrValuesTimestr failed: unknown result");
  }

  public function search($key, $query, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_search($key, $query, $creds, $transaction, $environment);
    return $this->recv_search();
  }

  public function send_search($key, $query, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_search_args();
    $args->key = $key;
    $args->query = $query;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'search', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('search', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_search()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_search_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_search_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("search failed: unknown result");
  }

  public function auditRecord($record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditRecord($record, $creds, $transaction, $environment);
    return $this->recv_auditRecord();
  }

  public function send_auditRecord($record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_auditRecord_args();
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_auditRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_auditRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("auditRecord failed: unknown result");
  }

  public function auditRecordStart($record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditRecordStart($record, $start, $creds, $transaction, $environment);
    return $this->recv_auditRecordStart();
  }

  public function send_auditRecordStart($record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_auditRecordStart_args();
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditRecordStart', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditRecordStart', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditRecordStart()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_auditRecordStart_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_auditRecordStart_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("auditRecordStart failed: unknown result");
  }

  public function auditRecordStartstr($record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditRecordStartstr($record, $start, $creds, $transaction, $environment);
    return $this->recv_auditRecordStartstr();
  }

  public function send_auditRecordStartstr($record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_auditRecordStartstr_args();
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditRecordStartstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditRecordStartstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditRecordStartstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_auditRecordStartstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_auditRecordStartstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("auditRecordStartstr failed: unknown result");
  }

  public function auditRecordStartEnd($record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditRecordStartEnd($record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_auditRecordStartEnd();
  }

  public function send_auditRecordStartEnd($record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_auditRecordStartEnd_args();
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditRecordStartEnd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditRecordStartEnd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditRecordStartEnd()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_auditRecordStartEnd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_auditRecordStartEnd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("auditRecordStartEnd failed: unknown result");
  }

  public function auditRecordStartstrEndstr($record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditRecordStartstrEndstr($record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_auditRecordStartstrEndstr();
  }

  public function send_auditRecordStartstrEndstr($record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_auditRecordStartstrEndstr_args();
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditRecordStartstrEndstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditRecordStartstrEndstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditRecordStartstrEndstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_auditRecordStartstrEndstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_auditRecordStartstrEndstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("auditRecordStartstrEndstr failed: unknown result");
  }

  public function auditKeyRecord($key, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditKeyRecord($key, $record, $creds, $transaction, $environment);
    return $this->recv_auditKeyRecord();
  }

  public function send_auditKeyRecord($key, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_auditKeyRecord_args();
    $args->key = $key;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditKeyRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditKeyRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditKeyRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_auditKeyRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_auditKeyRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("auditKeyRecord failed: unknown result");
  }

  public function auditKeyRecordStart($key, $record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditKeyRecordStart($key, $record, $start, $creds, $transaction, $environment);
    return $this->recv_auditKeyRecordStart();
  }

  public function send_auditKeyRecordStart($key, $record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_auditKeyRecordStart_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditKeyRecordStart', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditKeyRecordStart', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditKeyRecordStart()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_auditKeyRecordStart_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_auditKeyRecordStart_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("auditKeyRecordStart failed: unknown result");
  }

  public function auditKeyRecordStartstr($key, $record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditKeyRecordStartstr($key, $record, $start, $creds, $transaction, $environment);
    return $this->recv_auditKeyRecordStartstr();
  }

  public function send_auditKeyRecordStartstr($key, $record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_auditKeyRecordStartstr_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditKeyRecordStartstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditKeyRecordStartstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditKeyRecordStartstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_auditKeyRecordStartstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_auditKeyRecordStartstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("auditKeyRecordStartstr failed: unknown result");
  }

  public function auditKeyRecordStartEnd($key, $record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditKeyRecordStartEnd($key, $record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_auditKeyRecordStartEnd();
  }

  public function send_auditKeyRecordStartEnd($key, $record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_auditKeyRecordStartEnd_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditKeyRecordStartEnd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditKeyRecordStartEnd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditKeyRecordStartEnd()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_auditKeyRecordStartEnd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_auditKeyRecordStartEnd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("auditKeyRecordStartEnd failed: unknown result");
  }

  public function auditKeyRecordStartstrEndstr($key, $record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_auditKeyRecordStartstrEndstr($key, $record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_auditKeyRecordStartstrEndstr();
  }

  public function send_auditKeyRecordStartstrEndstr($key, $record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_auditKeyRecordStartstrEndstr_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auditKeyRecordStartstrEndstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auditKeyRecordStartstrEndstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auditKeyRecordStartstrEndstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_auditKeyRecordStartstrEndstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_auditKeyRecordStartstrEndstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("auditKeyRecordStartstrEndstr failed: unknown result");
  }

  public function chronologizeKeyRecord($key, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_chronologizeKeyRecord($key, $record, $creds, $transaction, $environment);
    return $this->recv_chronologizeKeyRecord();
  }

  public function send_chronologizeKeyRecord($key, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_chronologizeKeyRecord_args();
    $args->key = $key;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'chronologizeKeyRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('chronologizeKeyRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_chronologizeKeyRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_chronologizeKeyRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_chronologizeKeyRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("chronologizeKeyRecord failed: unknown result");
  }

  public function chronologizeKeyRecordStart($key, $record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_chronologizeKeyRecordStart($key, $record, $start, $creds, $transaction, $environment);
    return $this->recv_chronologizeKeyRecordStart();
  }

  public function send_chronologizeKeyRecordStart($key, $record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_chronologizeKeyRecordStart_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'chronologizeKeyRecordStart', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('chronologizeKeyRecordStart', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_chronologizeKeyRecordStart()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_chronologizeKeyRecordStart_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_chronologizeKeyRecordStart_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("chronologizeKeyRecordStart failed: unknown result");
  }

  public function chronologizeKeyRecordStartstr($key, $record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_chronologizeKeyRecordStartstr($key, $record, $start, $creds, $transaction, $environment);
    return $this->recv_chronologizeKeyRecordStartstr();
  }

  public function send_chronologizeKeyRecordStartstr($key, $record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_chronologizeKeyRecordStartstr_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'chronologizeKeyRecordStartstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('chronologizeKeyRecordStartstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_chronologizeKeyRecordStartstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_chronologizeKeyRecordStartstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_chronologizeKeyRecordStartstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("chronologizeKeyRecordStartstr failed: unknown result");
  }

  public function chronologizeKeyRecordStartEnd($key, $record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_chronologizeKeyRecordStartEnd($key, $record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_chronologizeKeyRecordStartEnd();
  }

  public function send_chronologizeKeyRecordStartEnd($key, $record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_chronologizeKeyRecordStartEnd_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'chronologizeKeyRecordStartEnd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('chronologizeKeyRecordStartEnd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_chronologizeKeyRecordStartEnd()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_chronologizeKeyRecordStartEnd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_chronologizeKeyRecordStartEnd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("chronologizeKeyRecordStartEnd failed: unknown result");
  }

  public function chronologizeKeyRecordStartstrEndstr($key, $record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_chronologizeKeyRecordStartstrEndstr($key, $record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_chronologizeKeyRecordStartstrEndstr();
  }

  public function send_chronologizeKeyRecordStartstrEndstr($key, $record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_chronologizeKeyRecordStartstrEndstr_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'chronologizeKeyRecordStartstrEndstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('chronologizeKeyRecordStartstrEndstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_chronologizeKeyRecordStartstrEndstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_chronologizeKeyRecordStartstrEndstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_chronologizeKeyRecordStartstrEndstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("chronologizeKeyRecordStartstrEndstr failed: unknown result");
  }

  public function diffRecordStart($record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffRecordStart($record, $start, $creds, $transaction, $environment);
    return $this->recv_diffRecordStart();
  }

  public function send_diffRecordStart($record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_diffRecordStart_args();
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffRecordStart', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffRecordStart', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffRecordStart()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_diffRecordStart_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_diffRecordStart_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("diffRecordStart failed: unknown result");
  }

  public function diffRecordStartstr($record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffRecordStartstr($record, $start, $creds, $transaction, $environment);
    return $this->recv_diffRecordStartstr();
  }

  public function send_diffRecordStartstr($record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_diffRecordStartstr_args();
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffRecordStartstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffRecordStartstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffRecordStartstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_diffRecordStartstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_diffRecordStartstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("diffRecordStartstr failed: unknown result");
  }

  public function diffRecordStartEnd($record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffRecordStartEnd($record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_diffRecordStartEnd();
  }

  public function send_diffRecordStartEnd($record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_diffRecordStartEnd_args();
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffRecordStartEnd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffRecordStartEnd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffRecordStartEnd()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_diffRecordStartEnd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_diffRecordStartEnd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("diffRecordStartEnd failed: unknown result");
  }

  public function diffRecordStartstrEndstr($record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffRecordStartstrEndstr($record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_diffRecordStartstrEndstr();
  }

  public function send_diffRecordStartstrEndstr($record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_diffRecordStartstrEndstr_args();
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffRecordStartstrEndstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffRecordStartstrEndstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffRecordStartstrEndstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_diffRecordStartstrEndstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_diffRecordStartstrEndstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("diffRecordStartstrEndstr failed: unknown result");
  }

  public function diffKeyRecordStart($key, $record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffKeyRecordStart($key, $record, $start, $creds, $transaction, $environment);
    return $this->recv_diffKeyRecordStart();
  }

  public function send_diffKeyRecordStart($key, $record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_diffKeyRecordStart_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffKeyRecordStart', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffKeyRecordStart', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffKeyRecordStart()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_diffKeyRecordStart_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_diffKeyRecordStart_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("diffKeyRecordStart failed: unknown result");
  }

  public function diffKeyRecordStartstr($key, $record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffKeyRecordStartstr($key, $record, $start, $creds, $transaction, $environment);
    return $this->recv_diffKeyRecordStartstr();
  }

  public function send_diffKeyRecordStartstr($key, $record, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_diffKeyRecordStartstr_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffKeyRecordStartstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffKeyRecordStartstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffKeyRecordStartstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_diffKeyRecordStartstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_diffKeyRecordStartstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("diffKeyRecordStartstr failed: unknown result");
  }

  public function diffKeyRecordStartEnd($key, $record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffKeyRecordStartEnd($key, $record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_diffKeyRecordStartEnd();
  }

  public function send_diffKeyRecordStartEnd($key, $record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_diffKeyRecordStartEnd_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffKeyRecordStartEnd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffKeyRecordStartEnd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffKeyRecordStartEnd()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_diffKeyRecordStartEnd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_diffKeyRecordStartEnd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("diffKeyRecordStartEnd failed: unknown result");
  }

  public function diffKeyRecordStartstrEndstr($key, $record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffKeyRecordStartstrEndstr($key, $record, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_diffKeyRecordStartstrEndstr();
  }

  public function send_diffKeyRecordStartstrEndstr($key, $record, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_diffKeyRecordStartstrEndstr_args();
    $args->key = $key;
    $args->record = $record;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffKeyRecordStartstrEndstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffKeyRecordStartstrEndstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffKeyRecordStartstrEndstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_diffKeyRecordStartstrEndstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_diffKeyRecordStartstrEndstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("diffKeyRecordStartstrEndstr failed: unknown result");
  }

  public function diffKeyStart($key, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffKeyStart($key, $start, $creds, $transaction, $environment);
    return $this->recv_diffKeyStart();
  }

  public function send_diffKeyStart($key, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_diffKeyStart_args();
    $args->key = $key;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffKeyStart', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffKeyStart', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffKeyStart()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_diffKeyStart_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_diffKeyStart_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("diffKeyStart failed: unknown result");
  }

  public function diffKeyStartstr($key, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffKeyStartstr($key, $start, $creds, $transaction, $environment);
    return $this->recv_diffKeyStartstr();
  }

  public function send_diffKeyStartstr($key, $start, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_diffKeyStartstr_args();
    $args->key = $key;
    $args->start = $start;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffKeyStartstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffKeyStartstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffKeyStartstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_diffKeyStartstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_diffKeyStartstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("diffKeyStartstr failed: unknown result");
  }

  public function diffKeyStartEnd($key, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffKeyStartEnd($key, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_diffKeyStartEnd();
  }

  public function send_diffKeyStartEnd($key, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_diffKeyStartEnd_args();
    $args->key = $key;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffKeyStartEnd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffKeyStartEnd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffKeyStartEnd()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_diffKeyStartEnd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_diffKeyStartEnd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("diffKeyStartEnd failed: unknown result");
  }

  public function diffKeyStartstrEndstr($key, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_diffKeyStartstrEndstr($key, $start, $tend, $creds, $transaction, $environment);
    return $this->recv_diffKeyStartstrEndstr();
  }

  public function send_diffKeyStartstrEndstr($key, $start, $tend, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_diffKeyStartstrEndstr_args();
    $args->key = $key;
    $args->start = $start;
    $args->tend = $tend;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'diffKeyStartstrEndstr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('diffKeyStartstrEndstr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_diffKeyStartstrEndstr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_diffKeyStartstrEndstr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_diffKeyStartstrEndstr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("diffKeyStartstrEndstr failed: unknown result");
  }

  public function revertKeysRecordsTime(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_revertKeysRecordsTime($keys, $records, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeysRecordsTime();
  }

  public function send_revertKeysRecordsTime(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_revertKeysRecordsTime_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeysRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeysRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeysRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_revertKeysRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_revertKeysRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function revertKeysRecordsTimestr(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_revertKeysRecordsTimestr($keys, $records, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeysRecordsTimestr();
  }

  public function send_revertKeysRecordsTimestr(array $keys, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_revertKeysRecordsTimestr_args();
    $args->keys = $keys;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeysRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeysRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeysRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_revertKeysRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_revertKeysRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    return;
  }

  public function revertKeysRecordTime(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_revertKeysRecordTime($keys, $record, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeysRecordTime();
  }

  public function send_revertKeysRecordTime(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_revertKeysRecordTime_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeysRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeysRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeysRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_revertKeysRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_revertKeysRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function revertKeysRecordTimestr(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_revertKeysRecordTimestr($keys, $record, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeysRecordTimestr();
  }

  public function send_revertKeysRecordTimestr(array $keys, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_revertKeysRecordTimestr_args();
    $args->keys = $keys;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeysRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeysRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeysRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_revertKeysRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_revertKeysRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    return;
  }

  public function revertKeyRecordsTime($key, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_revertKeyRecordsTime($key, $records, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeyRecordsTime();
  }

  public function send_revertKeyRecordsTime($key, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_revertKeyRecordsTime_args();
    $args->key = $key;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeyRecordsTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeyRecordsTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeyRecordsTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_revertKeyRecordsTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_revertKeyRecordsTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function revertKeyRecordsTimestr($key, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_revertKeyRecordsTimestr($key, $records, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeyRecordsTimestr();
  }

  public function send_revertKeyRecordsTimestr($key, array $records, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_revertKeyRecordsTimestr_args();
    $args->key = $key;
    $args->records = $records;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeyRecordsTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeyRecordsTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeyRecordsTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_revertKeyRecordsTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_revertKeyRecordsTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    return;
  }

  public function revertKeyRecordTime($key, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_revertKeyRecordTime($key, $record, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeyRecordTime();
  }

  public function send_revertKeyRecordTime($key, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_revertKeyRecordTime_args();
    $args->key = $key;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeyRecordTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeyRecordTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeyRecordTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_revertKeyRecordTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_revertKeyRecordTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    return;
  }

  public function revertKeyRecordTimestr($key, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_revertKeyRecordTimestr($key, $record, $timestamp, $creds, $transaction, $environment);
    $this->recv_revertKeyRecordTimestr();
  }

  public function send_revertKeyRecordTimestr($key, $record, $timestamp, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_revertKeyRecordTimestr_args();
    $args->key = $key;
    $args->record = $record;
    $args->timestamp = $timestamp;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'revertKeyRecordTimestr', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('revertKeyRecordTimestr', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_revertKeyRecordTimestr()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_revertKeyRecordTimestr_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_revertKeyRecordTimestr_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    return;
  }

  public function pingRecords(array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_pingRecords($records, $creds, $transaction, $environment);
    return $this->recv_pingRecords();
  }

  public function send_pingRecords(array $records, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_pingRecords_args();
    $args->records = $records;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'pingRecords', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('pingRecords', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_pingRecords()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_pingRecords_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_pingRecords_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("pingRecords failed: unknown result");
  }

  public function pingRecord($record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_pingRecord($record, $creds, $transaction, $environment);
    return $this->recv_pingRecord();
  }

  public function send_pingRecord($record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_pingRecord_args();
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'pingRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('pingRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_pingRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_pingRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_pingRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("pingRecord failed: unknown result");
  }

  public function verifyAndSwap($key, \thrift\data\TObject $expected, $record, \thrift\data\TObject $replacement, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_verifyAndSwap($key, $expected, $record, $replacement, $creds, $transaction, $environment);
    return $this->recv_verifyAndSwap();
  }

  public function send_verifyAndSwap($key, \thrift\data\TObject $expected, $record, \thrift\data\TObject $replacement, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_verifyAndSwap_args();
    $args->key = $key;
    $args->expected = $expected;
    $args->record = $record;
    $args->replacement = $replacement;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'verifyAndSwap', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('verifyAndSwap', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_verifyAndSwap()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_verifyAndSwap_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_verifyAndSwap_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("verifyAndSwap failed: unknown result");
  }

  public function verifyOrSet($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_verifyOrSet($key, $value, $record, $creds, $transaction, $environment);
    $this->recv_verifyOrSet();
  }

  public function send_verifyOrSet($key, \thrift\data\TObject $value, $record, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_verifyOrSet_args();
    $args->key = $key;
    $args->value = $value;
    $args->record = $record;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'verifyOrSet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('verifyOrSet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_verifyOrSet()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_verifyOrSet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_verifyOrSet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    return;
  }

  public function findOrAddKeyValue($key, \thrift\data\TObject $value, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findOrAddKeyValue($key, $value, $creds, $transaction, $environment);
    return $this->recv_findOrAddKeyValue();
  }

  public function send_findOrAddKeyValue($key, \thrift\data\TObject $value, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_findOrAddKeyValue_args();
    $args->key = $key;
    $args->value = $value;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findOrAddKeyValue', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findOrAddKeyValue', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findOrAddKeyValue()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_findOrAddKeyValue_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_findOrAddKeyValue_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    throw new \Exception("findOrAddKeyValue failed: unknown result");
  }

  public function findOrInsertCriteriaJson(\thrift\data\TCriteria $criteria, $json, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findOrInsertCriteriaJson($criteria, $json, $creds, $transaction, $environment);
    return $this->recv_findOrInsertCriteriaJson();
  }

  public function send_findOrInsertCriteriaJson(\thrift\data\TCriteria $criteria, $json, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_findOrInsertCriteriaJson_args();
    $args->criteria = $criteria;
    $args->json = $json;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findOrInsertCriteriaJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findOrInsertCriteriaJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findOrInsertCriteriaJson()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_findOrInsertCriteriaJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_findOrInsertCriteriaJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("findOrInsertCriteriaJson failed: unknown result");
  }

  public function findOrInsertCclJson($ccl, $json, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $this->send_findOrInsertCclJson($ccl, $json, $creds, $transaction, $environment);
    return $this->recv_findOrInsertCclJson();
  }

  public function send_findOrInsertCclJson($ccl, $json, \thrift\shared\AccessToken $creds,  $transaction, $environment)
  {
    $args = new \thrift\ConcourseService_findOrInsertCclJson_args();
    $args->ccl = $ccl;
    $args->json = $json;
    $args->creds = $creds;
    $args->transaction = $transaction;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'findOrInsertCclJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('findOrInsertCclJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_findOrInsertCclJson()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_findOrInsertCclJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_findOrInsertCclJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    if ($result->ex4 !== null) {
      throw $result->ex4;
    }
    throw new \Exception("findOrInsertCclJson failed: unknown result");
  }

  public function getServerEnvironment(\thrift\shared\AccessToken $creds,  $token, $environment)
  {
    $this->send_getServerEnvironment($creds, $token, $environment);
    return $this->recv_getServerEnvironment();
  }

  public function send_getServerEnvironment(\thrift\shared\AccessToken $creds,  $token, $environment)
  {
    $args = new \thrift\ConcourseService_getServerEnvironment_args();
    $args->creds = $creds;
    $args->token = $token;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getServerEnvironment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getServerEnvironment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getServerEnvironment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getServerEnvironment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getServerEnvironment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getServerEnvironment failed: unknown result");
  }

  public function getServerVersion()
  {
    $this->send_getServerVersion();
    return $this->recv_getServerVersion();
  }

  public function send_getServerVersion()
  {
    $args = new \thrift\ConcourseService_getServerVersion_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getServerVersion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getServerVersion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getServerVersion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_getServerVersion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_getServerVersion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("getServerVersion failed: unknown result");
  }

  public function time(\thrift\shared\AccessToken $creds,  $token, $environment)
  {
    $this->send_time($creds, $token, $environment);
    return $this->recv_time();
  }

  public function send_time(\thrift\shared\AccessToken $creds,  $token, $environment)
  {
    $args = new \thrift\ConcourseService_time_args();
    $args->creds = $creds;
    $args->token = $token;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'time', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('time', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_time()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_time_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_time_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    throw new \Exception("time failed: unknown result");
  }

  public function timePhrase($phrase, \thrift\shared\AccessToken $creds,  $token, $environment)
  {
    $this->send_timePhrase($phrase, $creds, $token, $environment);
    return $this->recv_timePhrase();
  }

  public function send_timePhrase($phrase, \thrift\shared\AccessToken $creds,  $token, $environment)
  {
    $args = new \thrift\ConcourseService_timePhrase_args();
    $args->phrase = $phrase;
    $args->creds = $creds;
    $args->token = $token;
    $args->environment = $environment;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'timePhrase', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('timePhrase', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_timePhrase()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\thrift\ConcourseService_timePhrase_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \thrift\ConcourseService_timePhrase_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    if ($result->ex2 !== null) {
      throw $result->ex2;
    }
    if ($result->ex3 !== null) {
      throw $result->ex3;
    }
    throw new \Exception("timePhrase failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class ConcourseService_abort_args {
  static $_TSPEC;

  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        3 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_abort_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_abort_args');
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 1);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 2);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 3);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_abort_result {
  static $_TSPEC;

  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_abort_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_abort_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_commit_args {
  static $_TSPEC;

  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        3 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_commit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_commit_args');
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 1);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 2);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 3);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_commit_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_commit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_commit_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_login_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $username = null;
  /**
   * @var string
   */
  public $password = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_login_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_login_args');
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 1);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 2);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 3);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_login_result {
  static $_TSPEC;

  /**
   * @var \thrift\shared\AccessToken
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_login_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \thrift\shared\AccessToken();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_login_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_logout_args {
  static $_TSPEC;

  /**
   * @var \thrift\shared\AccessToken
   */
  public $token = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_logout_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->token = new \thrift\shared\AccessToken();
            $xfer += $this->token->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_logout_args');
    if ($this->token !== null) {
      if (!is_object($this->token)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('token', TType::STRUCT, 1);
      $xfer += $this->token->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 2);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_logout_result {
  static $_TSPEC;

  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_logout_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_logout_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_stage_args {
  static $_TSPEC;

  /**
   * @var \thrift\shared\AccessToken
   */
  public $token = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_stage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->token = new \thrift\shared\AccessToken();
            $xfer += $this->token->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_stage_args');
    if ($this->token !== null) {
      if (!is_object($this->token)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('token', TType::STRUCT, 1);
      $xfer += $this->token->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 2);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_stage_result {
  static $_TSPEC;

  /**
   * @var \thrift\shared\TransactionToken
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_stage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \thrift\shared\TransactionToken();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_stage_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_addKeyValueRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_addKeyValueRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_addKeyValueRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_addKeyValueRecord_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_addKeyValueRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_addKeyValueRecord_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_addKeyValue_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $value = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_addKeyValue_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_addKeyValue_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_addKeyValue_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_addKeyValue_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_addKeyValue_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_addKeyValueRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_addKeyValueRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI64($elem5);
              $this->records []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_addKeyValueRecords_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 3);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter6)
          {
            $xfer += $output->writeI64($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_addKeyValueRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::BOOL,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::BOOL,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_addKeyValueRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size7 = 0;
            $_ktype8 = 0;
            $_vtype9 = 0;
            $xfer += $input->readMapBegin($_ktype8, $_vtype9, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $key12 = 0;
              $val13 = false;
              $xfer += $input->readI64($key12);
              $xfer += $input->readBool($val13);
              $this->success[$key12] = $val13;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_addKeyValueRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::BOOL, count($this->success));
        {
          foreach ($this->success as $kiter14 => $viter15)
          {
            $xfer += $output->writeI64($kiter14);
            $xfer += $output->writeBool($viter15);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearRecord_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearRecord_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearRecord_result {
  static $_TSPEC;

  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearRecord_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearRecords_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size16 = 0;
            $_etype19 = 0;
            $xfer += $input->readListBegin($_etype19, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $elem21 = null;
              $xfer += $input->readI64($elem21);
              $this->records []= $elem21;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearRecords_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter22)
          {
            $xfer += $output->writeI64($iter22);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearRecords_result {
  static $_TSPEC;

  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearRecords_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeyRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeyRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeyRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeyRecord_result {
  static $_TSPEC;

  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeyRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeyRecord_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeysRecord_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeysRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size23 = 0;
            $_etype26 = 0;
            $xfer += $input->readListBegin($_etype26, $_size23);
            for ($_i27 = 0; $_i27 < $_size23; ++$_i27)
            {
              $elem28 = null;
              $xfer += $input->readString($elem28);
              $this->keys []= $elem28;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeysRecord_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter29)
          {
            $xfer += $output->writeString($iter29);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeysRecord_result {
  static $_TSPEC;

  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeysRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeysRecord_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeyRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeyRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size30 = 0;
            $_etype33 = 0;
            $xfer += $input->readListBegin($_etype33, $_size30);
            for ($_i34 = 0; $_i34 < $_size30; ++$_i34)
            {
              $elem35 = null;
              $xfer += $input->readI64($elem35);
              $this->records []= $elem35;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeyRecords_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter36)
          {
            $xfer += $output->writeI64($iter36);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeyRecords_result {
  static $_TSPEC;

  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeyRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeyRecords_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeysRecords_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeysRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size37 = 0;
            $_etype40 = 0;
            $xfer += $input->readListBegin($_etype40, $_size37);
            for ($_i41 = 0; $_i41 < $_size37; ++$_i41)
            {
              $elem42 = null;
              $xfer += $input->readString($elem42);
              $this->keys []= $elem42;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size43 = 0;
            $_etype46 = 0;
            $xfer += $input->readListBegin($_etype46, $_size43);
            for ($_i47 = 0; $_i47 < $_size43; ++$_i47)
            {
              $elem48 = null;
              $xfer += $input->readI64($elem48);
              $this->records []= $elem48;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeysRecords_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter49)
          {
            $xfer += $output->writeString($iter49);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter50)
          {
            $xfer += $output->writeI64($iter50);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_clearKeysRecords_result {
  static $_TSPEC;

  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_clearKeysRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_clearKeysRecords_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_insertJson_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $json = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'json',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['json'])) {
        $this->json = $vals['json'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_insertJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->json);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_insertJson_args');
    if ($this->json !== null) {
      $xfer += $output->writeFieldBegin('json', TType::STRING, 1);
      $xfer += $output->writeString($this->json);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_insertJson_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_insertJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size51 = 0;
            $_etype54 = 0;
            $xfer += $input->readSetBegin($_etype54, $_size51);
            for ($_i55 = 0; $_i55 < $_size51; ++$_i55)
            {
              $elem56 = null;
              $xfer += $input->readI64($elem56);
              if (is_scalar($elem56)) {
                $this->success[$elem56] = true;
              } else {
                $this->success []= $elem56;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_insertJson_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter57 => $iter58)
          {
            if (is_scalar($iter58)) {
            $xfer += $output->writeI64($iter57);
            } else {
            $xfer += $output->writeI64($iter58);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_insertJsonRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $json = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'json',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['json'])) {
        $this->json = $vals['json'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_insertJsonRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->json);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_insertJsonRecord_args');
    if ($this->json !== null) {
      $xfer += $output->writeFieldBegin('json', TType::STRING, 1);
      $xfer += $output->writeString($this->json);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_insertJsonRecord_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_insertJsonRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_insertJsonRecord_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_insertJsonRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $json = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'json',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['json'])) {
        $this->json = $vals['json'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_insertJsonRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->json);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size59 = 0;
            $_etype62 = 0;
            $xfer += $input->readListBegin($_etype62, $_size59);
            for ($_i63 = 0; $_i63 < $_size59; ++$_i63)
            {
              $elem64 = null;
              $xfer += $input->readI64($elem64);
              $this->records []= $elem64;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_insertJsonRecords_args');
    if ($this->json !== null) {
      $xfer += $output->writeFieldBegin('json', TType::STRING, 1);
      $xfer += $output->writeString($this->json);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter65)
          {
            $xfer += $output->writeI64($iter65);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_insertJsonRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::BOOL,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::BOOL,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_insertJsonRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size66 = 0;
            $_ktype67 = 0;
            $_vtype68 = 0;
            $xfer += $input->readMapBegin($_ktype67, $_vtype68, $_size66);
            for ($_i70 = 0; $_i70 < $_size66; ++$_i70)
            {
              $key71 = 0;
              $val72 = false;
              $xfer += $input->readI64($key71);
              $xfer += $input->readBool($val72);
              $this->success[$key71] = $val72;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_insertJsonRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::BOOL, count($this->success));
        {
          foreach ($this->success as $kiter73 => $viter74)
          {
            $xfer += $output->writeI64($kiter73);
            $xfer += $output->writeBool($viter74);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_removeKeyValueRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_removeKeyValueRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_removeKeyValueRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_removeKeyValueRecord_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_removeKeyValueRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_removeKeyValueRecord_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_removeKeyValueRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_removeKeyValueRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size75 = 0;
            $_etype78 = 0;
            $xfer += $input->readListBegin($_etype78, $_size75);
            for ($_i79 = 0; $_i79 < $_size75; ++$_i79)
            {
              $elem80 = null;
              $xfer += $input->readI64($elem80);
              $this->records []= $elem80;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_removeKeyValueRecords_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 3);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter81)
          {
            $xfer += $output->writeI64($iter81);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_removeKeyValueRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::BOOL,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::BOOL,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_removeKeyValueRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size82 = 0;
            $_ktype83 = 0;
            $_vtype84 = 0;
            $xfer += $input->readMapBegin($_ktype83, $_vtype84, $_size82);
            for ($_i86 = 0; $_i86 < $_size82; ++$_i86)
            {
              $key87 = 0;
              $val88 = false;
              $xfer += $input->readI64($key87);
              $xfer += $input->readBool($val88);
              $this->success[$key87] = $val88;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_removeKeyValueRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::BOOL, count($this->success));
        {
          foreach ($this->success as $kiter89 => $viter90)
          {
            $xfer += $output->writeI64($kiter89);
            $xfer += $output->writeBool($viter90);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_setKeyValueRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_setKeyValueRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_setKeyValueRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_setKeyValueRecord_result {
  static $_TSPEC;

  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_setKeyValueRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_setKeyValueRecord_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_setKeyValue_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $value = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_setKeyValue_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_setKeyValue_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_setKeyValue_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_setKeyValue_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_setKeyValue_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_setKeyValueRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_setKeyValueRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size91 = 0;
            $_etype94 = 0;
            $xfer += $input->readListBegin($_etype94, $_size91);
            for ($_i95 = 0; $_i95 < $_size91; ++$_i95)
            {
              $elem96 = null;
              $xfer += $input->readI64($elem96);
              $this->records []= $elem96;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_setKeyValueRecords_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 3);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter97)
          {
            $xfer += $output->writeI64($iter97);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_setKeyValueRecords_result {
  static $_TSPEC;

  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_setKeyValueRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_setKeyValueRecords_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_inventory_args {
  static $_TSPEC;

  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        3 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_inventory_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_inventory_args');
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 1);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 2);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 3);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_inventory_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_inventory_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size98 = 0;
            $_etype101 = 0;
            $xfer += $input->readSetBegin($_etype101, $_size98);
            for ($_i102 = 0; $_i102 < $_size98; ++$_i102)
            {
              $elem103 = null;
              $xfer += $input->readI64($elem103);
              if (is_scalar($elem103)) {
                $this->success[$elem103] = true;
              } else {
                $this->success []= $elem103;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_inventory_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter104 => $iter105)
          {
            if (is_scalar($iter105)) {
            $xfer += $output->writeI64($iter104);
            } else {
            $xfer += $output->writeI64($iter105);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecord_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecord_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecord_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size106 = 0;
            $_ktype107 = 0;
            $_vtype108 = 0;
            $xfer += $input->readMapBegin($_ktype107, $_vtype108, $_size106);
            for ($_i110 = 0; $_i110 < $_size106; ++$_i110)
            {
              $key111 = '';
              $val112 = array();
              $xfer += $input->readString($key111);
              $val112 = array();
              $_size113 = 0;
              $_etype116 = 0;
              $xfer += $input->readSetBegin($_etype116, $_size113);
              for ($_i117 = 0; $_i117 < $_size113; ++$_i117)
              {
                $elem118 = null;
                $elem118 = new \thrift\data\TObject();
                $xfer += $elem118->read($input);
                $val112[$elem118] = $elem118;
			  }
			  $key111 = (!is_integer($key111) && !is_string($key111)) ? serialize($key111) : $key111;
			  $this->success[$key111] = $val112;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter119 => $viter120)
          {
            $xfer += $output->writeString($kiter119);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter120));
              {
                foreach ($viter120 as $iter121 => $iter122)
                {
                  if (is_scalar($iter122)) {
                  $xfer += $iter121->write($output);
                  } else {
                  $xfer += $iter122->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecords_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size123 = 0;
            $_etype126 = 0;
            $xfer += $input->readListBegin($_etype126, $_size123);
            for ($_i127 = 0; $_i127 < $_size123; ++$_i127)
            {
              $elem128 = null;
              $xfer += $input->readI64($elem128);
              $this->records []= $elem128;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecords_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter129)
          {
            $xfer += $output->writeI64($iter129);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size130 = 0;
            $_ktype131 = 0;
            $_vtype132 = 0;
            $xfer += $input->readMapBegin($_ktype131, $_vtype132, $_size130);
            for ($_i134 = 0; $_i134 < $_size130; ++$_i134)
            {
              $key135 = 0;
              $val136 = array();
              $xfer += $input->readI64($key135);
              $val136 = array();
              $_size137 = 0;
              $_ktype138 = 0;
              $_vtype139 = 0;
              $xfer += $input->readMapBegin($_ktype138, $_vtype139, $_size137);
              for ($_i141 = 0; $_i141 < $_size137; ++$_i141)
              {
                $key142 = '';
                $val143 = array();
                $xfer += $input->readString($key142);
                $val143 = array();
                $_size144 = 0;
                $_etype147 = 0;
                $xfer += $input->readSetBegin($_etype147, $_size144);
                for ($_i148 = 0; $_i148 < $_size144; ++$_i148)
                {
                  $elem149 = null;
                  $elem149 = new \thrift\data\TObject();
                  $xfer += $elem149->read($input);
                  if (is_scalar($elem149)) {
                    $val143[$elem149] = true;
                  } else {
                    $val143 []= $elem149;
                  }
                }
                $xfer += $input->readSetEnd();
                $val136[$key142] = $val143;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key135] = $val136;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter150 => $viter151)
          {
            $xfer += $output->writeI64($kiter150);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter151));
              {
                foreach ($viter151 as $kiter152 => $viter153)
                {
                  $xfer += $output->writeString($kiter152);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter153));
                    {
                      foreach ($viter153 as $iter154 => $iter155)
                      {
                        if (is_scalar($iter155)) {
                        $xfer += $iter154->write($output);
                        } else {
                        $xfer += $iter155->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordTime_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordTime_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size156 = 0;
            $_ktype157 = 0;
            $_vtype158 = 0;
            $xfer += $input->readMapBegin($_ktype157, $_vtype158, $_size156);
            for ($_i160 = 0; $_i160 < $_size156; ++$_i160)
            {
              $key161 = '';
              $val162 = array();
              $xfer += $input->readString($key161);
              $val162 = array();
              $_size163 = 0;
              $_etype166 = 0;
              $xfer += $input->readSetBegin($_etype166, $_size163);
              for ($_i167 = 0; $_i167 < $_size163; ++$_i167)
              {
                $elem168 = null;
                $elem168 = new \thrift\data\TObject();
                $xfer += $elem168->read($input);
                $val162[$elem168] = $elem168;
			  }
			  $key161 = (!is_integer($key161) && !is_string($key161)) ? serialize($key161) : $key161;
			  $this->success[$key161] = $val162;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter169 => $viter170)
          {
            $xfer += $output->writeString($kiter169);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter170));
              {
                foreach ($viter170 as $iter171 => $iter172)
                {
                  if (is_scalar($iter172)) {
                  $xfer += $iter171->write($output);
                  } else {
                  $xfer += $iter172->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordTimestr_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size173 = 0;
            $_ktype174 = 0;
            $_vtype175 = 0;
            $xfer += $input->readMapBegin($_ktype174, $_vtype175, $_size173);
            for ($_i177 = 0; $_i177 < $_size173; ++$_i177)
            {
              $key178 = '';
              $val179 = array();
              $xfer += $input->readString($key178);
              $val179 = array();
              $_size180 = 0;
              $_etype183 = 0;
              $xfer += $input->readSetBegin($_etype183, $_size180);
              for ($_i184 = 0; $_i184 < $_size180; ++$_i184)
              {
                $elem185 = null;
                $elem185 = new \thrift\data\TObject();
                $xfer += $elem185->read($input);
                $val179[$elem185] = $elem185;
			  }
			  $key178 = (!is_integer($key178) && !is_string($key178)) ? serialize($key178) : $key178;
			  $this->success[$key178] = $val179;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter186 => $viter187)
          {
            $xfer += $output->writeString($kiter186);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter187));
              {
                foreach ($viter187 as $iter188 => $iter189)
                {
                  if (is_scalar($iter189)) {
                  $xfer += $iter188->write($output);
                  } else {
                  $xfer += $iter189->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordsTime_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size190 = 0;
            $_etype193 = 0;
            $xfer += $input->readListBegin($_etype193, $_size190);
            for ($_i194 = 0; $_i194 < $_size190; ++$_i194)
            {
              $elem195 = null;
              $xfer += $input->readI64($elem195);
              $this->records []= $elem195;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordsTime_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter196)
          {
            $xfer += $output->writeI64($iter196);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordsTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size197 = 0;
            $_ktype198 = 0;
            $_vtype199 = 0;
            $xfer += $input->readMapBegin($_ktype198, $_vtype199, $_size197);
            for ($_i201 = 0; $_i201 < $_size197; ++$_i201)
            {
              $key202 = 0;
              $val203 = array();
              $xfer += $input->readI64($key202);
              $val203 = array();
              $_size204 = 0;
              $_ktype205 = 0;
              $_vtype206 = 0;
              $xfer += $input->readMapBegin($_ktype205, $_vtype206, $_size204);
              for ($_i208 = 0; $_i208 < $_size204; ++$_i208)
              {
                $key209 = '';
                $val210 = array();
                $xfer += $input->readString($key209);
                $val210 = array();
                $_size211 = 0;
                $_etype214 = 0;
                $xfer += $input->readSetBegin($_etype214, $_size211);
                for ($_i215 = 0; $_i215 < $_size211; ++$_i215)
                {
                  $elem216 = null;
                  $elem216 = new \thrift\data\TObject();
                  $xfer += $elem216->read($input);
                  if (is_scalar($elem216)) {
                    $val210[$elem216] = true;
                  } else {
                    $val210 []= $elem216;
                  }
                }
                $xfer += $input->readSetEnd();
                $val203[$key209] = $val210;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key202] = $val203;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordsTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter217 => $viter218)
          {
            $xfer += $output->writeI64($kiter217);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter218));
              {
                foreach ($viter218 as $kiter219 => $viter220)
                {
                  $xfer += $output->writeString($kiter219);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter220));
                    {
                      foreach ($viter220 as $iter221 => $iter222)
                      {
                        if (is_scalar($iter222)) {
                        $xfer += $iter221->write($output);
                        } else {
                        $xfer += $iter222->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size223 = 0;
            $_etype226 = 0;
            $xfer += $input->readListBegin($_etype226, $_size223);
            for ($_i227 = 0; $_i227 < $_size223; ++$_i227)
            {
              $elem228 = null;
              $xfer += $input->readI64($elem228);
              $this->records []= $elem228;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordsTimestr_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter229)
          {
            $xfer += $output->writeI64($iter229);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size230 = 0;
            $_ktype231 = 0;
            $_vtype232 = 0;
            $xfer += $input->readMapBegin($_ktype231, $_vtype232, $_size230);
            for ($_i234 = 0; $_i234 < $_size230; ++$_i234)
            {
              $key235 = 0;
              $val236 = array();
              $xfer += $input->readI64($key235);
              $val236 = array();
              $_size237 = 0;
              $_ktype238 = 0;
              $_vtype239 = 0;
              $xfer += $input->readMapBegin($_ktype238, $_vtype239, $_size237);
              for ($_i241 = 0; $_i241 < $_size237; ++$_i241)
              {
                $key242 = '';
                $val243 = array();
                $xfer += $input->readString($key242);
                $val243 = array();
                $_size244 = 0;
                $_etype247 = 0;
                $xfer += $input->readSetBegin($_etype247, $_size244);
                for ($_i248 = 0; $_i248 < $_size244; ++$_i248)
                {
                  $elem249 = null;
                  $elem249 = new \thrift\data\TObject();
                  $xfer += $elem249->read($input);
                  if (is_scalar($elem249)) {
                    $val243[$elem249] = true;
                  } else {
                    $val243 []= $elem249;
                  }
                }
                $xfer += $input->readSetEnd();
                $val236[$key242] = $val243;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key235] = $val236;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectRecordsTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter250 => $viter251)
          {
            $xfer += $output->writeI64($kiter250);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter251));
              {
                foreach ($viter251 as $kiter252 => $viter253)
                {
                  $xfer += $output->writeString($kiter252);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter253));
                    {
                      foreach ($viter253 as $iter254 => $iter255)
                      {
                        if (is_scalar($iter255)) {
                        $xfer += $iter254->write($output);
                        } else {
                        $xfer += $iter255->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKey_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKey_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKey_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKey_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRUCT,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::I64,
            'elem' => array(
              'type' => TType::I64,
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKey_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size256 = 0;
            $_ktype257 = 0;
            $_vtype258 = 0;
            $xfer += $input->readMapBegin($_ktype257, $_vtype258, $_size256);
            for ($_i260 = 0; $_i260 < $_size256; ++$_i260)
            {
              $key261 = new \thrift\data\TObject();
              $val262 = array();
              $key261 = new \thrift\data\TObject();
              $xfer += $key261->read($input);
              $val262 = array();
              $_size263 = 0;
              $_etype266 = 0;
              $xfer += $input->readSetBegin($_etype266, $_size263);
              for ($_i267 = 0; $_i267 < $_size263; ++$_i267)
              {
                $elem268 = null;
                $xfer += $input->readI64($elem268);
                $val262[$elem268] = $elem268;
			  }
			  $key261 = (!is_integer($key261) && !is_string($key261)) ? serialize($key261) : $key261;
			  $this->success[$key261] = $val262;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKey_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRUCT, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter269 => $viter270)
          {
            $xfer += $kiter269->write($output);
            {
              $output->writeSetBegin(TType::I64, count($viter270));
              {
                foreach ($viter270 as $iter271 => $iter272)
                {
                  if (is_scalar($iter272)) {
                  $xfer += $output->writeI64($iter271);
                  } else {
                  $xfer += $output->writeI64($iter272);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeys_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeys_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size273 = 0;
            $_etype276 = 0;
            $xfer += $input->readListBegin($_etype276, $_size273);
            for ($_i277 = 0; $_i277 < $_size273; ++$_i277)
            {
              $elem278 = null;
              $xfer += $input->readString($elem278);
              $this->keys []= $elem278;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeys_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter279)
          {
            $xfer += $output->writeString($iter279);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeys_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRUCT,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::I64,
              'elem' => array(
                'type' => TType::I64,
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeys_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size280 = 0;
            $_ktype281 = 0;
            $_vtype282 = 0;
            $xfer += $input->readMapBegin($_ktype281, $_vtype282, $_size280);
            for ($_i284 = 0; $_i284 < $_size280; ++$_i284)
            {
              $key285 = '';
              $val286 = array();
              $xfer += $input->readString($key285);
              $val286 = array();
              $_size287 = 0;
              $_ktype288 = 0;
              $_vtype289 = 0;
              $xfer += $input->readMapBegin($_ktype288, $_vtype289, $_size287);
              for ($_i291 = 0; $_i291 < $_size287; ++$_i291)
              {
                $key292 = new \thrift\data\TObject();
                $val293 = array();
                $key292 = new \thrift\data\TObject();
                $xfer += $key292->read($input);
                $val293 = array();
                $_size294 = 0;
                $_etype297 = 0;
                $xfer += $input->readSetBegin($_etype297, $_size294);
                for ($_i298 = 0; $_i298 < $_size294; ++$_i298)
                {
                  $elem299 = null;
                  $xfer += $input->readI64($elem299);
                  if (is_scalar($elem299)) {
                    $val293[$elem299] = true;
                  } else {
                    $val293 []= $elem299;
                  }
                }
                $xfer += $input->readSetEnd();
                $val286[$key292] = $val293;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key285] = $val286;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeys_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter300 => $viter301)
          {
            $xfer += $output->writeString($kiter300);
            {
              $output->writeMapBegin(TType::STRUCT, TType::SET, count($viter301));
              {
                foreach ($viter301 as $kiter302 => $viter303)
                {
                  $xfer += $kiter302->write($output);
                  {
                    $output->writeSetBegin(TType::I64, count($viter303));
                    {
                      foreach ($viter303 as $iter304 => $iter305)
                      {
                        if (is_scalar($iter305)) {
                        $xfer += $output->writeI64($iter304);
                        } else {
                        $xfer += $output->writeI64($iter305);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeyTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeyTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeyTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeyTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRUCT,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::I64,
            'elem' => array(
              'type' => TType::I64,
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeyTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size306 = 0;
            $_ktype307 = 0;
            $_vtype308 = 0;
            $xfer += $input->readMapBegin($_ktype307, $_vtype308, $_size306);
            for ($_i310 = 0; $_i310 < $_size306; ++$_i310)
            {
              $key311 = new \thrift\data\TObject();
              $val312 = array();
              $key311 = new \thrift\data\TObject();
              $xfer += $key311->read($input);
              $val312 = array();
              $_size313 = 0;
              $_etype316 = 0;
              $xfer += $input->readSetBegin($_etype316, $_size313);
              for ($_i317 = 0; $_i317 < $_size313; ++$_i317)
              {
                $elem318 = null;
                $xfer += $input->readI64($elem318);
                $val312[$elem318] = $elem318;
			  }
			  $key311 = (!is_integer($key311) && !is_string($key311)) ? serialize($key311) : $key311;
			  $this->success[$key311] = $val312;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeyTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRUCT, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter319 => $viter320)
          {
            $xfer += $kiter319->write($output);
            {
              $output->writeSetBegin(TType::I64, count($viter320));
              {
                foreach ($viter320 as $iter321 => $iter322)
                {
                  if (is_scalar($iter322)) {
                  $xfer += $output->writeI64($iter321);
                  } else {
                  $xfer += $output->writeI64($iter322);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeyTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeyTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeyTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeyTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRUCT,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::I64,
            'elem' => array(
              'type' => TType::I64,
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeyTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size323 = 0;
            $_ktype324 = 0;
            $_vtype325 = 0;
            $xfer += $input->readMapBegin($_ktype324, $_vtype325, $_size323);
            for ($_i327 = 0; $_i327 < $_size323; ++$_i327)
            {
              $key328 = new \thrift\data\TObject();
              $val329 = array();
              $key328 = new \thrift\data\TObject();
              $xfer += $key328->read($input);
              $val329 = array();
              $_size330 = 0;
              $_etype333 = 0;
              $xfer += $input->readSetBegin($_etype333, $_size330);
              for ($_i334 = 0; $_i334 < $_size330; ++$_i334)
              {
                $elem335 = null;
                $xfer += $input->readI64($elem335);
                $val329[$elem335] = $elem335;
			  }
			  $key328 = (!is_integer($key328) && !is_string($key328)) ? serialize($key328) : $key328;
			  $this->success[$key328] = $val329;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeyTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRUCT, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter336 => $viter337)
          {
            $xfer += $kiter336->write($output);
            {
              $output->writeSetBegin(TType::I64, count($viter337));
              {
                foreach ($viter337 as $iter338 => $iter339)
                {
                  if (is_scalar($iter339)) {
                  $xfer += $output->writeI64($iter338);
                  } else {
                  $xfer += $output->writeI64($iter339);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeysTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeysTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size340 = 0;
            $_etype343 = 0;
            $xfer += $input->readListBegin($_etype343, $_size340);
            for ($_i344 = 0; $_i344 < $_size340; ++$_i344)
            {
              $elem345 = null;
              $xfer += $input->readString($elem345);
              $this->keys []= $elem345;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeysTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter346)
          {
            $xfer += $output->writeString($iter346);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeysTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRUCT,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::I64,
              'elem' => array(
                'type' => TType::I64,
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeysTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size347 = 0;
            $_ktype348 = 0;
            $_vtype349 = 0;
            $xfer += $input->readMapBegin($_ktype348, $_vtype349, $_size347);
            for ($_i351 = 0; $_i351 < $_size347; ++$_i351)
            {
              $key352 = '';
              $val353 = array();
              $xfer += $input->readString($key352);
              $val353 = array();
              $_size354 = 0;
              $_ktype355 = 0;
              $_vtype356 = 0;
              $xfer += $input->readMapBegin($_ktype355, $_vtype356, $_size354);
              for ($_i358 = 0; $_i358 < $_size354; ++$_i358)
              {
                $key359 = new \thrift\data\TObject();
                $val360 = array();
                $key359 = new \thrift\data\TObject();
                $xfer += $key359->read($input);
                $val360 = array();
                $_size361 = 0;
                $_etype364 = 0;
                $xfer += $input->readSetBegin($_etype364, $_size361);
                for ($_i365 = 0; $_i365 < $_size361; ++$_i365)
                {
                  $elem366 = null;
                  $xfer += $input->readI64($elem366);
                  if (is_scalar($elem366)) {
                    $val360[$elem366] = true;
                  } else {
                    $val360 []= $elem366;
                  }
                }
                $xfer += $input->readSetEnd();
                $val353[$key359] = $val360;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key352] = $val353;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeysTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter367 => $viter368)
          {
            $xfer += $output->writeString($kiter367);
            {
              $output->writeMapBegin(TType::STRUCT, TType::SET, count($viter368));
              {
                foreach ($viter368 as $kiter369 => $viter370)
                {
                  $xfer += $kiter369->write($output);
                  {
                    $output->writeSetBegin(TType::I64, count($viter370));
                    {
                      foreach ($viter370 as $iter371 => $iter372)
                      {
                        if (is_scalar($iter372)) {
                        $xfer += $output->writeI64($iter371);
                        } else {
                        $xfer += $output->writeI64($iter372);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeysTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeysTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size373 = 0;
            $_etype376 = 0;
            $xfer += $input->readListBegin($_etype376, $_size373);
            for ($_i377 = 0; $_i377 < $_size373; ++$_i377)
            {
              $elem378 = null;
              $xfer += $input->readString($elem378);
              $this->keys []= $elem378;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeysTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter379)
          {
            $xfer += $output->writeString($iter379);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_browseKeysTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRUCT,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::I64,
              'elem' => array(
                'type' => TType::I64,
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_browseKeysTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size380 = 0;
            $_ktype381 = 0;
            $_vtype382 = 0;
            $xfer += $input->readMapBegin($_ktype381, $_vtype382, $_size380);
            for ($_i384 = 0; $_i384 < $_size380; ++$_i384)
            {
              $key385 = '';
              $val386 = array();
              $xfer += $input->readString($key385);
              $val386 = array();
              $_size387 = 0;
              $_ktype388 = 0;
              $_vtype389 = 0;
              $xfer += $input->readMapBegin($_ktype388, $_vtype389, $_size387);
              for ($_i391 = 0; $_i391 < $_size387; ++$_i391)
              {
                $key392 = new \thrift\data\TObject();
                $val393 = array();
                $key392 = new \thrift\data\TObject();
                $xfer += $key392->read($input);
                $val393 = array();
                $_size394 = 0;
                $_etype397 = 0;
                $xfer += $input->readSetBegin($_etype397, $_size394);
                for ($_i398 = 0; $_i398 < $_size394; ++$_i398)
                {
                  $elem399 = null;
                  $xfer += $input->readI64($elem399);
                  if (is_scalar($elem399)) {
                    $val393[$elem399] = true;
                  } else {
                    $val393 []= $elem399;
                  }
                }
                $xfer += $input->readSetEnd();
                $val386[$key392] = $val393;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key385] = $val386;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_browseKeysTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter400 => $viter401)
          {
            $xfer += $output->writeString($kiter400);
            {
              $output->writeMapBegin(TType::STRUCT, TType::SET, count($viter401));
              {
                foreach ($viter401 as $kiter402 => $viter403)
                {
                  $xfer += $kiter402->write($output);
                  {
                    $output->writeSetBegin(TType::I64, count($viter403));
                    {
                      foreach ($viter403 as $iter404 => $iter405)
                      {
                        if (is_scalar($iter405)) {
                        $xfer += $output->writeI64($iter404);
                        } else {
                        $xfer += $output->writeI64($iter405);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecord_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecord_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecord_result {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size406 = 0;
            $_etype409 = 0;
            $xfer += $input->readSetBegin($_etype409, $_size406);
            for ($_i410 = 0; $_i410 < $_size406; ++$_i410)
            {
              $elem411 = null;
              $xfer += $input->readString($elem411);
              if (is_scalar($elem411)) {
                $this->success[$elem411] = true;
              } else {
                $this->success []= $elem411;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter412 => $iter413)
          {
            if (is_scalar($iter413)) {
            $xfer += $output->writeString($iter412);
            } else {
            $xfer += $output->writeString($iter413);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordTime_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordTime_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordTime_result {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size414 = 0;
            $_etype417 = 0;
            $xfer += $input->readSetBegin($_etype417, $_size414);
            for ($_i418 = 0; $_i418 < $_size414; ++$_i418)
            {
              $elem419 = null;
              $xfer += $input->readString($elem419);
              if (is_scalar($elem419)) {
                $this->success[$elem419] = true;
              } else {
                $this->success []= $elem419;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter420 => $iter421)
          {
            if (is_scalar($iter421)) {
            $xfer += $output->writeString($iter420);
            } else {
            $xfer += $output->writeString($iter421);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordTimestr_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size422 = 0;
            $_etype425 = 0;
            $xfer += $input->readSetBegin($_etype425, $_size422);
            for ($_i426 = 0; $_i426 < $_size422; ++$_i426)
            {
              $elem427 = null;
              $xfer += $input->readString($elem427);
              if (is_scalar($elem427)) {
                $this->success[$elem427] = true;
              } else {
                $this->success []= $elem427;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter428 => $iter429)
          {
            if (is_scalar($iter429)) {
            $xfer += $output->writeString($iter428);
            } else {
            $xfer += $output->writeString($iter429);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecords_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size430 = 0;
            $_etype433 = 0;
            $xfer += $input->readListBegin($_etype433, $_size430);
            for ($_i434 = 0; $_i434 < $_size430; ++$_i434)
            {
              $elem435 = null;
              $xfer += $input->readI64($elem435);
              $this->records []= $elem435;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecords_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter436)
          {
            $xfer += $output->writeI64($iter436);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size437 = 0;
            $_ktype438 = 0;
            $_vtype439 = 0;
            $xfer += $input->readMapBegin($_ktype438, $_vtype439, $_size437);
            for ($_i441 = 0; $_i441 < $_size437; ++$_i441)
            {
              $key442 = 0;
              $val443 = array();
              $xfer += $input->readI64($key442);
              $val443 = array();
              $_size444 = 0;
              $_etype447 = 0;
              $xfer += $input->readSetBegin($_etype447, $_size444);
              for ($_i448 = 0; $_i448 < $_size444; ++$_i448)
              {
                $elem449 = null;
                $xfer += $input->readString($elem449);
                $val443[$elem449] = $elem449;
			  }
			  $key442 = (!is_integer($key442) && !is_string($key442)) ? serialize($key442) : $key442;
			  $this->success[$key442] = $val443;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter450 => $viter451)
          {
            $xfer += $output->writeI64($kiter450);
            {
              $output->writeSetBegin(TType::STRING, count($viter451));
              {
                foreach ($viter451 as $iter452 => $iter453)
                {
                  if (is_scalar($iter453)) {
                  $xfer += $output->writeString($iter452);
                  } else {
                  $xfer += $output->writeString($iter453);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordsTime_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size454 = 0;
            $_etype457 = 0;
            $xfer += $input->readListBegin($_etype457, $_size454);
            for ($_i458 = 0; $_i458 < $_size454; ++$_i458)
            {
              $elem459 = null;
              $xfer += $input->readI64($elem459);
              $this->records []= $elem459;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordsTime_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter460)
          {
            $xfer += $output->writeI64($iter460);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordsTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size461 = 0;
            $_ktype462 = 0;
            $_vtype463 = 0;
            $xfer += $input->readMapBegin($_ktype462, $_vtype463, $_size461);
            for ($_i465 = 0; $_i465 < $_size461; ++$_i465)
            {
              $key466 = 0;
              $val467 = array();
              $xfer += $input->readI64($key466);
              $val467 = array();
              $_size468 = 0;
              $_etype471 = 0;
              $xfer += $input->readSetBegin($_etype471, $_size468);
              for ($_i472 = 0; $_i472 < $_size468; ++$_i472)
              {
                $elem473 = null;
                $xfer += $input->readString($elem473);
                $val467[$elem473] = $elem473;
			  }
			  $key466 = (!is_integer($key466) && !is_string($key466)) ? serialize($key466) : $key466;
			  $this->success[$key466] = $val467;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordsTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter474 => $viter475)
          {
            $xfer += $output->writeI64($kiter474);
            {
              $output->writeSetBegin(TType::STRING, count($viter475));
              {
                foreach ($viter475 as $iter476 => $iter477)
                {
                  if (is_scalar($iter477)) {
                  $xfer += $output->writeString($iter476);
                  } else {
                  $xfer += $output->writeString($iter477);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size478 = 0;
            $_etype481 = 0;
            $xfer += $input->readListBegin($_etype481, $_size478);
            for ($_i482 = 0; $_i482 < $_size478; ++$_i482)
            {
              $elem483 = null;
              $xfer += $input->readI64($elem483);
              $this->records []= $elem483;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordsTimestr_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter484)
          {
            $xfer += $output->writeI64($iter484);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_describeRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRING,
            'elem' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_describeRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size485 = 0;
            $_ktype486 = 0;
            $_vtype487 = 0;
            $xfer += $input->readMapBegin($_ktype486, $_vtype487, $_size485);
            for ($_i489 = 0; $_i489 < $_size485; ++$_i489)
            {
              $key490 = 0;
              $val491 = array();
              $xfer += $input->readI64($key490);
              $val491 = array();
              $_size492 = 0;
              $_etype495 = 0;
              $xfer += $input->readSetBegin($_etype495, $_size492);
              for ($_i496 = 0; $_i496 < $_size492; ++$_i496)
              {
                $elem497 = null;
                $xfer += $input->readString($elem497);
                $val491[$elem497] = $elem497;
			  }
			  $key490 = (!is_integer($key490) && !is_string($key490)) ? serialize($key490) : $key490;
			  $this->success[$key490] = $val491;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_describeRecordsTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter498 => $viter499)
          {
            $xfer += $output->writeI64($kiter498);
            {
              $output->writeSetBegin(TType::STRING, count($viter499));
              {
                foreach ($viter499 as $iter500 => $iter501)
                {
                  if (is_scalar($iter501)) {
                  $xfer += $output->writeString($iter500);
                  } else {
                  $xfer += $output->writeString($iter501);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecord_result {
  static $_TSPEC;

  /**
   * @var \thrift\data\TObject[]
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size502 = 0;
            $_etype505 = 0;
            $xfer += $input->readSetBegin($_etype505, $_size502);
            for ($_i506 = 0; $_i506 < $_size502; ++$_i506)
            {
              $elem507 = null;
              $elem507 = new \thrift\data\TObject();
              $xfer += $elem507->read($input);
              if (is_scalar($elem507)) {
                $this->success[$elem507] = true;
              } else {
                $this->success []= $elem507;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter508 => $iter509)
          {
            if (is_scalar($iter509)) {
            $xfer += $iter508->write($output);
            } else {
            $xfer += $iter509->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordTime_result {
  static $_TSPEC;

  /**
   * @var \thrift\data\TObject[]
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size510 = 0;
            $_etype513 = 0;
            $xfer += $input->readSetBegin($_etype513, $_size510);
            for ($_i514 = 0; $_i514 < $_size510; ++$_i514)
            {
              $elem515 = null;
              $elem515 = new \thrift\data\TObject();
              $xfer += $elem515->read($input);
              if (is_scalar($elem515)) {
                $this->success[$elem515] = true;
              } else {
                $this->success []= $elem515;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter516 => $iter517)
          {
            if (is_scalar($iter517)) {
            $xfer += $iter516->write($output);
            } else {
            $xfer += $iter517->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var \thrift\data\TObject[]
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size518 = 0;
            $_etype521 = 0;
            $xfer += $input->readSetBegin($_etype521, $_size518);
            for ($_i522 = 0; $_i522 < $_size518; ++$_i522)
            {
              $elem523 = null;
              $elem523 = new \thrift\data\TObject();
              $xfer += $elem523->read($input);
              if (is_scalar($elem523)) {
                $this->success[$elem523] = true;
              } else {
                $this->success []= $elem523;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter524 => $iter525)
          {
            if (is_scalar($iter525)) {
            $xfer += $iter524->write($output);
            } else {
            $xfer += $iter525->write($output);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecord_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size526 = 0;
            $_etype529 = 0;
            $xfer += $input->readListBegin($_etype529, $_size526);
            for ($_i530 = 0; $_i530 < $_size526; ++$_i530)
            {
              $elem531 = null;
              $xfer += $input->readString($elem531);
              $this->keys []= $elem531;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecord_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter532)
          {
            $xfer += $output->writeString($iter532);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecord_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size533 = 0;
            $_ktype534 = 0;
            $_vtype535 = 0;
            $xfer += $input->readMapBegin($_ktype534, $_vtype535, $_size533);
            for ($_i537 = 0; $_i537 < $_size533; ++$_i537)
            {
              $key538 = '';
              $val539 = array();
              $xfer += $input->readString($key538);
              $val539 = array();
              $_size540 = 0;
              $_etype543 = 0;
              $xfer += $input->readSetBegin($_etype543, $_size540);
              for ($_i544 = 0; $_i544 < $_size540; ++$_i544)
              {
                $elem545 = null;
                $elem545 = new \thrift\data\TObject();
                $xfer += $elem545->read($input);
                $val539[$elem545] = $elem545;
			  }
			  $key538 = (!is_integer($key538) && !is_string($key538)) ? serialize($key538) : $key538;
			  $this->success[$key538] = $val539;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter546 => $viter547)
          {
            $xfer += $output->writeString($kiter546);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter547));
              {
                foreach ($viter547 as $iter548 => $iter549)
                {
                  if (is_scalar($iter549)) {
                  $xfer += $iter548->write($output);
                  } else {
                  $xfer += $iter549->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size550 = 0;
            $_etype553 = 0;
            $xfer += $input->readListBegin($_etype553, $_size550);
            for ($_i554 = 0; $_i554 < $_size550; ++$_i554)
            {
              $elem555 = null;
              $xfer += $input->readString($elem555);
              $this->keys []= $elem555;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter556)
          {
            $xfer += $output->writeString($iter556);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size557 = 0;
            $_ktype558 = 0;
            $_vtype559 = 0;
            $xfer += $input->readMapBegin($_ktype558, $_vtype559, $_size557);
            for ($_i561 = 0; $_i561 < $_size557; ++$_i561)
            {
              $key562 = '';
              $val563 = array();
              $xfer += $input->readString($key562);
              $val563 = array();
              $_size564 = 0;
              $_etype567 = 0;
              $xfer += $input->readSetBegin($_etype567, $_size564);
              for ($_i568 = 0; $_i568 < $_size564; ++$_i568)
              {
                $elem569 = null;
                $elem569 = new \thrift\data\TObject();
                $xfer += $elem569->read($input);
                $val563[$elem569] = $elem569;
			  }
			  $key562 = (!is_integer($key562) && !is_string($key562)) ? serialize($key562) : $key562;
			  $this->success[$key562] = $val563;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter570 => $viter571)
          {
            $xfer += $output->writeString($kiter570);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter571));
              {
                foreach ($viter571 as $iter572 => $iter573)
                {
                  if (is_scalar($iter573)) {
                  $xfer += $iter572->write($output);
                  } else {
                  $xfer += $iter573->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size574 = 0;
            $_etype577 = 0;
            $xfer += $input->readListBegin($_etype577, $_size574);
            for ($_i578 = 0; $_i578 < $_size574; ++$_i578)
            {
              $elem579 = null;
              $xfer += $input->readString($elem579);
              $this->keys []= $elem579;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter580)
          {
            $xfer += $output->writeString($iter580);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size581 = 0;
            $_ktype582 = 0;
            $_vtype583 = 0;
            $xfer += $input->readMapBegin($_ktype582, $_vtype583, $_size581);
            for ($_i585 = 0; $_i585 < $_size581; ++$_i585)
            {
              $key586 = '';
              $val587 = array();
              $xfer += $input->readString($key586);
              $val587 = array();
              $_size588 = 0;
              $_etype591 = 0;
              $xfer += $input->readSetBegin($_etype591, $_size588);
              for ($_i592 = 0; $_i592 < $_size588; ++$_i592)
              {
                $elem593 = null;
                $elem593 = new \thrift\data\TObject();
                $xfer += $elem593->read($input);
                $val587[$elem593] = $elem593;
			  }
			  $key586 = (!is_integer($key586) && !is_string($key586)) ? serialize($key586) : $key586;
			  $this->success[$key586] = $val587;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter594 => $viter595)
          {
            $xfer += $output->writeString($kiter594);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter595));
              {
                foreach ($viter595 as $iter596 => $iter597)
                {
                  if (is_scalar($iter597)) {
                  $xfer += $iter596->write($output);
                  } else {
                  $xfer += $iter597->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecords_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size598 = 0;
            $_etype601 = 0;
            $xfer += $input->readListBegin($_etype601, $_size598);
            for ($_i602 = 0; $_i602 < $_size598; ++$_i602)
            {
              $elem603 = null;
              $xfer += $input->readString($elem603);
              $this->keys []= $elem603;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size604 = 0;
            $_etype607 = 0;
            $xfer += $input->readListBegin($_etype607, $_size604);
            for ($_i608 = 0; $_i608 < $_size604; ++$_i608)
            {
              $elem609 = null;
              $xfer += $input->readI64($elem609);
              $this->records []= $elem609;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecords_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter610)
          {
            $xfer += $output->writeString($iter610);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter611)
          {
            $xfer += $output->writeI64($iter611);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size612 = 0;
            $_ktype613 = 0;
            $_vtype614 = 0;
            $xfer += $input->readMapBegin($_ktype613, $_vtype614, $_size612);
            for ($_i616 = 0; $_i616 < $_size612; ++$_i616)
            {
              $key617 = 0;
              $val618 = array();
              $xfer += $input->readI64($key617);
              $val618 = array();
              $_size619 = 0;
              $_ktype620 = 0;
              $_vtype621 = 0;
              $xfer += $input->readMapBegin($_ktype620, $_vtype621, $_size619);
              for ($_i623 = 0; $_i623 < $_size619; ++$_i623)
              {
                $key624 = '';
                $val625 = array();
                $xfer += $input->readString($key624);
                $val625 = array();
                $_size626 = 0;
                $_etype629 = 0;
                $xfer += $input->readSetBegin($_etype629, $_size626);
                for ($_i630 = 0; $_i630 < $_size626; ++$_i630)
                {
                  $elem631 = null;
                  $elem631 = new \thrift\data\TObject();
                  $xfer += $elem631->read($input);
                  if (is_scalar($elem631)) {
                    $val625[$elem631] = true;
                  } else {
                    $val625 []= $elem631;
                  }
                }
                $xfer += $input->readSetEnd();
                $val618[$key624] = $val625;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key617] = $val618;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter632 => $viter633)
          {
            $xfer += $output->writeI64($kiter632);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter633));
              {
                foreach ($viter633 as $kiter634 => $viter635)
                {
                  $xfer += $output->writeString($kiter634);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter635));
                    {
                      foreach ($viter635 as $iter636 => $iter637)
                      {
                        if (is_scalar($iter637)) {
                        $xfer += $iter636->write($output);
                        } else {
                        $xfer += $iter637->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size638 = 0;
            $_etype641 = 0;
            $xfer += $input->readListBegin($_etype641, $_size638);
            for ($_i642 = 0; $_i642 < $_size638; ++$_i642)
            {
              $elem643 = null;
              $xfer += $input->readI64($elem643);
              $this->records []= $elem643;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecords_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter644)
          {
            $xfer += $output->writeI64($iter644);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size645 = 0;
            $_ktype646 = 0;
            $_vtype647 = 0;
            $xfer += $input->readMapBegin($_ktype646, $_vtype647, $_size645);
            for ($_i649 = 0; $_i649 < $_size645; ++$_i649)
            {
              $key650 = 0;
              $val651 = array();
              $xfer += $input->readI64($key650);
              $val651 = array();
              $_size652 = 0;
              $_etype655 = 0;
              $xfer += $input->readSetBegin($_etype655, $_size652);
              for ($_i656 = 0; $_i656 < $_size652; ++$_i656)
              {
                $elem657 = null;
                $elem657 = new \thrift\data\TObject();
                $xfer += $elem657->read($input);
                $val651[$elem657] = $elem657;
			  }
			  $key650 = (!is_integer($key650) && !is_string($key650)) ? serialize($key650) : $key650;
			  $this->success[$key650] = $val651;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter658 => $viter659)
          {
            $xfer += $output->writeI64($kiter658);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter659));
              {
                foreach ($viter659 as $iter660 => $iter661)
                {
                  if (is_scalar($iter661)) {
                  $xfer += $iter660->write($output);
                  } else {
                  $xfer += $iter661->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordsTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size662 = 0;
            $_etype665 = 0;
            $xfer += $input->readListBegin($_etype665, $_size662);
            for ($_i666 = 0; $_i666 < $_size662; ++$_i666)
            {
              $elem667 = null;
              $xfer += $input->readI64($elem667);
              $this->records []= $elem667;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordsTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter668)
          {
            $xfer += $output->writeI64($iter668);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordsTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size669 = 0;
            $_ktype670 = 0;
            $_vtype671 = 0;
            $xfer += $input->readMapBegin($_ktype670, $_vtype671, $_size669);
            for ($_i673 = 0; $_i673 < $_size669; ++$_i673)
            {
              $key674 = 0;
              $val675 = array();
              $xfer += $input->readI64($key674);
              $val675 = array();
              $_size676 = 0;
              $_etype679 = 0;
              $xfer += $input->readSetBegin($_etype679, $_size676);
              for ($_i680 = 0; $_i680 < $_size676; ++$_i680)
              {
                $elem681 = null;
                $elem681 = new \thrift\data\TObject();
                $xfer += $elem681->read($input);
                $val675[$elem681] = $elem681;
			  }
			  $key674 = (!is_integer($key674) && !is_string($key674)) ? serialize($key674) : $key674;
			  $this->success[$key674] = $val675;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordsTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter682 => $viter683)
          {
            $xfer += $output->writeI64($kiter682);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter683));
              {
                foreach ($viter683 as $iter684 => $iter685)
                {
                  if (is_scalar($iter685)) {
                  $xfer += $iter684->write($output);
                  } else {
                  $xfer += $iter685->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size686 = 0;
            $_etype689 = 0;
            $xfer += $input->readListBegin($_etype689, $_size686);
            for ($_i690 = 0; $_i690 < $_size686; ++$_i690)
            {
              $elem691 = null;
              $xfer += $input->readI64($elem691);
              $this->records []= $elem691;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordsTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter692)
          {
            $xfer += $output->writeI64($iter692);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size693 = 0;
            $_ktype694 = 0;
            $_vtype695 = 0;
            $xfer += $input->readMapBegin($_ktype694, $_vtype695, $_size693);
            for ($_i697 = 0; $_i697 < $_size693; ++$_i697)
            {
              $key698 = 0;
              $val699 = array();
              $xfer += $input->readI64($key698);
              $val699 = array();
              $_size700 = 0;
              $_etype703 = 0;
              $xfer += $input->readSetBegin($_etype703, $_size700);
              for ($_i704 = 0; $_i704 < $_size700; ++$_i704)
              {
                $elem705 = null;
                $elem705 = new \thrift\data\TObject();
                $xfer += $elem705->read($input);
                $val699[$elem705] = $elem705;
			  }
			  $key698 = (!is_integer($key698) && !is_string($key698)) ? serialize($key698) : $key698;
			  $this->success[$key698] = $val699;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyRecordsTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter706 => $viter707)
          {
            $xfer += $output->writeI64($kiter706);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter707));
              {
                foreach ($viter707 as $iter708 => $iter709)
                {
                  if (is_scalar($iter709)) {
                  $xfer += $iter708->write($output);
                  } else {
                  $xfer += $iter709->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordsTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size710 = 0;
            $_etype713 = 0;
            $xfer += $input->readListBegin($_etype713, $_size710);
            for ($_i714 = 0; $_i714 < $_size710; ++$_i714)
            {
              $elem715 = null;
              $xfer += $input->readString($elem715);
              $this->keys []= $elem715;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size716 = 0;
            $_etype719 = 0;
            $xfer += $input->readListBegin($_etype719, $_size716);
            for ($_i720 = 0; $_i720 < $_size716; ++$_i720)
            {
              $elem721 = null;
              $xfer += $input->readI64($elem721);
              $this->records []= $elem721;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordsTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter722)
          {
            $xfer += $output->writeString($iter722);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter723)
          {
            $xfer += $output->writeI64($iter723);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordsTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size724 = 0;
            $_ktype725 = 0;
            $_vtype726 = 0;
            $xfer += $input->readMapBegin($_ktype725, $_vtype726, $_size724);
            for ($_i728 = 0; $_i728 < $_size724; ++$_i728)
            {
              $key729 = 0;
              $val730 = array();
              $xfer += $input->readI64($key729);
              $val730 = array();
              $_size731 = 0;
              $_ktype732 = 0;
              $_vtype733 = 0;
              $xfer += $input->readMapBegin($_ktype732, $_vtype733, $_size731);
              for ($_i735 = 0; $_i735 < $_size731; ++$_i735)
              {
                $key736 = '';
                $val737 = array();
                $xfer += $input->readString($key736);
                $val737 = array();
                $_size738 = 0;
                $_etype741 = 0;
                $xfer += $input->readSetBegin($_etype741, $_size738);
                for ($_i742 = 0; $_i742 < $_size738; ++$_i742)
                {
                  $elem743 = null;
                  $elem743 = new \thrift\data\TObject();
                  $xfer += $elem743->read($input);
                  if (is_scalar($elem743)) {
                    $val737[$elem743] = true;
                  } else {
                    $val737 []= $elem743;
                  }
                }
                $xfer += $input->readSetEnd();
                $val730[$key736] = $val737;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key729] = $val730;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordsTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter744 => $viter745)
          {
            $xfer += $output->writeI64($kiter744);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter745));
              {
                foreach ($viter745 as $kiter746 => $viter747)
                {
                  $xfer += $output->writeString($kiter746);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter747));
                    {
                      foreach ($viter747 as $iter748 => $iter749)
                      {
                        if (is_scalar($iter749)) {
                        $xfer += $iter748->write($output);
                        } else {
                        $xfer += $iter749->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size750 = 0;
            $_etype753 = 0;
            $xfer += $input->readListBegin($_etype753, $_size750);
            for ($_i754 = 0; $_i754 < $_size750; ++$_i754)
            {
              $elem755 = null;
              $xfer += $input->readString($elem755);
              $this->keys []= $elem755;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size756 = 0;
            $_etype759 = 0;
            $xfer += $input->readListBegin($_etype759, $_size756);
            for ($_i760 = 0; $_i760 < $_size756; ++$_i760)
            {
              $elem761 = null;
              $xfer += $input->readI64($elem761);
              $this->records []= $elem761;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordsTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter762)
          {
            $xfer += $output->writeString($iter762);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter763)
          {
            $xfer += $output->writeI64($iter763);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size764 = 0;
            $_ktype765 = 0;
            $_vtype766 = 0;
            $xfer += $input->readMapBegin($_ktype765, $_vtype766, $_size764);
            for ($_i768 = 0; $_i768 < $_size764; ++$_i768)
            {
              $key769 = 0;
              $val770 = array();
              $xfer += $input->readI64($key769);
              $val770 = array();
              $_size771 = 0;
              $_ktype772 = 0;
              $_vtype773 = 0;
              $xfer += $input->readMapBegin($_ktype772, $_vtype773, $_size771);
              for ($_i775 = 0; $_i775 < $_size771; ++$_i775)
              {
                $key776 = '';
                $val777 = array();
                $xfer += $input->readString($key776);
                $val777 = array();
                $_size778 = 0;
                $_etype781 = 0;
                $xfer += $input->readSetBegin($_etype781, $_size778);
                for ($_i782 = 0; $_i782 < $_size778; ++$_i782)
                {
                  $elem783 = null;
                  $elem783 = new \thrift\data\TObject();
                  $xfer += $elem783->read($input);
                  if (is_scalar($elem783)) {
                    $val777[$elem783] = true;
                  } else {
                    $val777 []= $elem783;
                  }
                }
                $xfer += $input->readSetEnd();
                $val770[$key776] = $val777;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key769] = $val770;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysRecordsTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter784 => $viter785)
          {
            $xfer += $output->writeI64($kiter784);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter785));
              {
                foreach ($viter785 as $kiter786 => $viter787)
                {
                  $xfer += $output->writeString($kiter786);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter787));
                    {
                      foreach ($viter787 as $iter788 => $iter789)
                      {
                        if (is_scalar($iter789)) {
                        $xfer += $iter788->write($output);
                        } else {
                        $xfer += $iter789->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCriteria_args {
  static $_TSPEC;

  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCriteria_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCriteria_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size790 = 0;
            $_ktype791 = 0;
            $_vtype792 = 0;
            $xfer += $input->readMapBegin($_ktype791, $_vtype792, $_size790);
            for ($_i794 = 0; $_i794 < $_size790; ++$_i794)
            {
              $key795 = 0;
              $val796 = array();
              $xfer += $input->readI64($key795);
              $val796 = array();
              $_size797 = 0;
              $_ktype798 = 0;
              $_vtype799 = 0;
              $xfer += $input->readMapBegin($_ktype798, $_vtype799, $_size797);
              for ($_i801 = 0; $_i801 < $_size797; ++$_i801)
              {
                $key802 = '';
                $val803 = array();
                $xfer += $input->readString($key802);
                $val803 = array();
                $_size804 = 0;
                $_etype807 = 0;
                $xfer += $input->readSetBegin($_etype807, $_size804);
                for ($_i808 = 0; $_i808 < $_size804; ++$_i808)
                {
                  $elem809 = null;
                  $elem809 = new \thrift\data\TObject();
                  $xfer += $elem809->read($input);
                  if (is_scalar($elem809)) {
                    $val803[$elem809] = true;
                  } else {
                    $val803 []= $elem809;
                  }
                }
                $xfer += $input->readSetEnd();
                $val796[$key802] = $val803;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key795] = $val796;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter810 => $viter811)
          {
            $xfer += $output->writeI64($kiter810);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter811));
              {
                foreach ($viter811 as $kiter812 => $viter813)
                {
                  $xfer += $output->writeString($kiter812);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter813));
                    {
                      foreach ($viter813 as $iter814 => $iter815)
                      {
                        if (is_scalar($iter815)) {
                        $xfer += $iter814->write($output);
                        } else {
                        $xfer += $iter815->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCcl_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCcl_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCcl_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size816 = 0;
            $_ktype817 = 0;
            $_vtype818 = 0;
            $xfer += $input->readMapBegin($_ktype817, $_vtype818, $_size816);
            for ($_i820 = 0; $_i820 < $_size816; ++$_i820)
            {
              $key821 = 0;
              $val822 = array();
              $xfer += $input->readI64($key821);
              $val822 = array();
              $_size823 = 0;
              $_ktype824 = 0;
              $_vtype825 = 0;
              $xfer += $input->readMapBegin($_ktype824, $_vtype825, $_size823);
              for ($_i827 = 0; $_i827 < $_size823; ++$_i827)
              {
                $key828 = '';
                $val829 = array();
                $xfer += $input->readString($key828);
                $val829 = array();
                $_size830 = 0;
                $_etype833 = 0;
                $xfer += $input->readSetBegin($_etype833, $_size830);
                for ($_i834 = 0; $_i834 < $_size830; ++$_i834)
                {
                  $elem835 = null;
                  $elem835 = new \thrift\data\TObject();
                  $xfer += $elem835->read($input);
                  if (is_scalar($elem835)) {
                    $val829[$elem835] = true;
                  } else {
                    $val829 []= $elem835;
                  }
                }
                $xfer += $input->readSetEnd();
                $val822[$key828] = $val829;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key821] = $val822;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter836 => $viter837)
          {
            $xfer += $output->writeI64($kiter836);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter837));
              {
                foreach ($viter837 as $kiter838 => $viter839)
                {
                  $xfer += $output->writeString($kiter838);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter839));
                    {
                      foreach ($viter839 as $iter840 => $iter841)
                      {
                        if (is_scalar($iter841)) {
                        $xfer += $iter840->write($output);
                        } else {
                        $xfer += $iter841->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCriteriaTime_args {
  static $_TSPEC;

  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCriteriaTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCriteriaTime_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCriteriaTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCriteriaTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size842 = 0;
            $_ktype843 = 0;
            $_vtype844 = 0;
            $xfer += $input->readMapBegin($_ktype843, $_vtype844, $_size842);
            for ($_i846 = 0; $_i846 < $_size842; ++$_i846)
            {
              $key847 = 0;
              $val848 = array();
              $xfer += $input->readI64($key847);
              $val848 = array();
              $_size849 = 0;
              $_ktype850 = 0;
              $_vtype851 = 0;
              $xfer += $input->readMapBegin($_ktype850, $_vtype851, $_size849);
              for ($_i853 = 0; $_i853 < $_size849; ++$_i853)
              {
                $key854 = '';
                $val855 = array();
                $xfer += $input->readString($key854);
                $val855 = array();
                $_size856 = 0;
                $_etype859 = 0;
                $xfer += $input->readSetBegin($_etype859, $_size856);
                for ($_i860 = 0; $_i860 < $_size856; ++$_i860)
                {
                  $elem861 = null;
                  $elem861 = new \thrift\data\TObject();
                  $xfer += $elem861->read($input);
                  if (is_scalar($elem861)) {
                    $val855[$elem861] = true;
                  } else {
                    $val855 []= $elem861;
                  }
                }
                $xfer += $input->readSetEnd();
                $val848[$key854] = $val855;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key847] = $val848;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCriteriaTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter862 => $viter863)
          {
            $xfer += $output->writeI64($kiter862);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter863));
              {
                foreach ($viter863 as $kiter864 => $viter865)
                {
                  $xfer += $output->writeString($kiter864);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter865));
                    {
                      foreach ($viter865 as $iter866 => $iter867)
                      {
                        if (is_scalar($iter867)) {
                        $xfer += $iter866->write($output);
                        } else {
                        $xfer += $iter867->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCriteriaTimestr_args {
  static $_TSPEC;

  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCriteriaTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCriteriaTimestr_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCriteriaTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCriteriaTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size868 = 0;
            $_ktype869 = 0;
            $_vtype870 = 0;
            $xfer += $input->readMapBegin($_ktype869, $_vtype870, $_size868);
            for ($_i872 = 0; $_i872 < $_size868; ++$_i872)
            {
              $key873 = 0;
              $val874 = array();
              $xfer += $input->readI64($key873);
              $val874 = array();
              $_size875 = 0;
              $_ktype876 = 0;
              $_vtype877 = 0;
              $xfer += $input->readMapBegin($_ktype876, $_vtype877, $_size875);
              for ($_i879 = 0; $_i879 < $_size875; ++$_i879)
              {
                $key880 = '';
                $val881 = array();
                $xfer += $input->readString($key880);
                $val881 = array();
                $_size882 = 0;
                $_etype885 = 0;
                $xfer += $input->readSetBegin($_etype885, $_size882);
                for ($_i886 = 0; $_i886 < $_size882; ++$_i886)
                {
                  $elem887 = null;
                  $elem887 = new \thrift\data\TObject();
                  $xfer += $elem887->read($input);
                  if (is_scalar($elem887)) {
                    $val881[$elem887] = true;
                  } else {
                    $val881 []= $elem887;
                  }
                }
                $xfer += $input->readSetEnd();
                $val874[$key880] = $val881;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key873] = $val874;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCriteriaTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter888 => $viter889)
          {
            $xfer += $output->writeI64($kiter888);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter889));
              {
                foreach ($viter889 as $kiter890 => $viter891)
                {
                  $xfer += $output->writeString($kiter890);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter891));
                    {
                      foreach ($viter891 as $iter892 => $iter893)
                      {
                        if (is_scalar($iter893)) {
                        $xfer += $iter892->write($output);
                        } else {
                        $xfer += $iter893->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCclTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCclTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCclTime_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCclTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCclTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size894 = 0;
            $_ktype895 = 0;
            $_vtype896 = 0;
            $xfer += $input->readMapBegin($_ktype895, $_vtype896, $_size894);
            for ($_i898 = 0; $_i898 < $_size894; ++$_i898)
            {
              $key899 = 0;
              $val900 = array();
              $xfer += $input->readI64($key899);
              $val900 = array();
              $_size901 = 0;
              $_ktype902 = 0;
              $_vtype903 = 0;
              $xfer += $input->readMapBegin($_ktype902, $_vtype903, $_size901);
              for ($_i905 = 0; $_i905 < $_size901; ++$_i905)
              {
                $key906 = '';
                $val907 = array();
                $xfer += $input->readString($key906);
                $val907 = array();
                $_size908 = 0;
                $_etype911 = 0;
                $xfer += $input->readSetBegin($_etype911, $_size908);
                for ($_i912 = 0; $_i912 < $_size908; ++$_i912)
                {
                  $elem913 = null;
                  $elem913 = new \thrift\data\TObject();
                  $xfer += $elem913->read($input);
                  if (is_scalar($elem913)) {
                    $val907[$elem913] = true;
                  } else {
                    $val907 []= $elem913;
                  }
                }
                $xfer += $input->readSetEnd();
                $val900[$key906] = $val907;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key899] = $val900;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCclTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter914 => $viter915)
          {
            $xfer += $output->writeI64($kiter914);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter915));
              {
                foreach ($viter915 as $kiter916 => $viter917)
                {
                  $xfer += $output->writeString($kiter916);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter917));
                    {
                      foreach ($viter917 as $iter918 => $iter919)
                      {
                        if (is_scalar($iter919)) {
                        $xfer += $iter918->write($output);
                        } else {
                        $xfer += $iter919->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCclTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCclTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCclTimestr_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectCclTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectCclTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size920 = 0;
            $_ktype921 = 0;
            $_vtype922 = 0;
            $xfer += $input->readMapBegin($_ktype921, $_vtype922, $_size920);
            for ($_i924 = 0; $_i924 < $_size920; ++$_i924)
            {
              $key925 = 0;
              $val926 = array();
              $xfer += $input->readI64($key925);
              $val926 = array();
              $_size927 = 0;
              $_ktype928 = 0;
              $_vtype929 = 0;
              $xfer += $input->readMapBegin($_ktype928, $_vtype929, $_size927);
              for ($_i931 = 0; $_i931 < $_size927; ++$_i931)
              {
                $key932 = '';
                $val933 = array();
                $xfer += $input->readString($key932);
                $val933 = array();
                $_size934 = 0;
                $_etype937 = 0;
                $xfer += $input->readSetBegin($_etype937, $_size934);
                for ($_i938 = 0; $_i938 < $_size934; ++$_i938)
                {
                  $elem939 = null;
                  $elem939 = new \thrift\data\TObject();
                  $xfer += $elem939->read($input);
                  if (is_scalar($elem939)) {
                    $val933[$elem939] = true;
                  } else {
                    $val933 []= $elem939;
                  }
                }
                $xfer += $input->readSetEnd();
                $val926[$key932] = $val933;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key925] = $val926;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectCclTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter940 => $viter941)
          {
            $xfer += $output->writeI64($kiter940);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter941));
              {
                foreach ($viter941 as $kiter942 => $viter943)
                {
                  $xfer += $output->writeString($kiter942);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter943));
                    {
                      foreach ($viter943 as $iter944 => $iter945)
                      {
                        if (is_scalar($iter945)) {
                        $xfer += $iter944->write($output);
                        } else {
                        $xfer += $iter945->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCriteria_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCriteria_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCriteria_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size946 = 0;
            $_ktype947 = 0;
            $_vtype948 = 0;
            $xfer += $input->readMapBegin($_ktype947, $_vtype948, $_size946);
            for ($_i950 = 0; $_i950 < $_size946; ++$_i950)
            {
              $key951 = 0;
              $val952 = array();
              $xfer += $input->readI64($key951);
              $val952 = array();
              $_size953 = 0;
              $_etype956 = 0;
              $xfer += $input->readSetBegin($_etype956, $_size953);
              for ($_i957 = 0; $_i957 < $_size953; ++$_i957)
              {
                $elem958 = null;
                $elem958 = new \thrift\data\TObject();
                $xfer += $elem958->read($input);
                $val952[$elem958] = $elem958;
			  }
			  $key951 = (!is_integer($key951) && !is_string($key951)) ? serialize($key951) : $key951;
			  $this->success[$key951] = $val952;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter959 => $viter960)
          {
            $xfer += $output->writeI64($kiter959);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter960));
              {
                foreach ($viter960 as $iter961 => $iter962)
                {
                  if (is_scalar($iter962)) {
                  $xfer += $iter961->write($output);
                  } else {
                  $xfer += $iter962->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCcl_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCcl_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCcl_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size963 = 0;
            $_ktype964 = 0;
            $_vtype965 = 0;
            $xfer += $input->readMapBegin($_ktype964, $_vtype965, $_size963);
            for ($_i967 = 0; $_i967 < $_size963; ++$_i967)
            {
              $key968 = 0;
              $val969 = array();
              $xfer += $input->readI64($key968);
              $val969 = array();
              $_size970 = 0;
              $_etype973 = 0;
              $xfer += $input->readSetBegin($_etype973, $_size970);
              for ($_i974 = 0; $_i974 < $_size970; ++$_i974)
              {
                $elem975 = null;
                $elem975 = new \thrift\data\TObject();
                $xfer += $elem975->read($input);
                $val969[$elem975] = $elem975;
			  }
			  $key968 = (!is_integer($key968) && !is_string($key968)) ? serialize($key968) : $key968;
			  $this->success[$key968] = $val969;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter976 => $viter977)
          {
            $xfer += $output->writeI64($kiter976);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter977));
              {
                foreach ($viter977 as $iter978 => $iter979)
                {
                  if (is_scalar($iter979)) {
                  $xfer += $iter978->write($output);
                  } else {
                  $xfer += $iter979->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCriteriaTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCriteriaTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCriteriaTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCriteriaTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCriteriaTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size980 = 0;
            $_ktype981 = 0;
            $_vtype982 = 0;
            $xfer += $input->readMapBegin($_ktype981, $_vtype982, $_size980);
            for ($_i984 = 0; $_i984 < $_size980; ++$_i984)
            {
              $key985 = 0;
              $val986 = array();
              $xfer += $input->readI64($key985);
              $val986 = array();
              $_size987 = 0;
              $_etype990 = 0;
              $xfer += $input->readSetBegin($_etype990, $_size987);
              for ($_i991 = 0; $_i991 < $_size987; ++$_i991)
              {
                $elem992 = null;
                $elem992 = new \thrift\data\TObject();
                $xfer += $elem992->read($input);
                $val986[$elem992] = $elem992;
			  }
			  $key985 = (!is_integer($key985) && !is_string($key985)) ? serialize($key985) : $key985;
			  $this->success[$key985] = $val986;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCriteriaTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter993 => $viter994)
          {
            $xfer += $output->writeI64($kiter993);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter994));
              {
                foreach ($viter994 as $iter995 => $iter996)
                {
                  if (is_scalar($iter996)) {
                  $xfer += $iter995->write($output);
                  } else {
                  $xfer += $iter996->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCriteriaTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCriteriaTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCriteriaTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCriteriaTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCriteriaTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size997 = 0;
            $_ktype998 = 0;
            $_vtype999 = 0;
            $xfer += $input->readMapBegin($_ktype998, $_vtype999, $_size997);
            for ($_i1001 = 0; $_i1001 < $_size997; ++$_i1001)
            {
              $key1002 = 0;
              $val1003 = array();
              $xfer += $input->readI64($key1002);
              $val1003 = array();
              $_size1004 = 0;
              $_etype1007 = 0;
              $xfer += $input->readSetBegin($_etype1007, $_size1004);
              for ($_i1008 = 0; $_i1008 < $_size1004; ++$_i1008)
              {
                $elem1009 = null;
                $elem1009 = new \thrift\data\TObject();
                $xfer += $elem1009->read($input);
                $val1003[$elem1009] = $elem1009;
			  }
			  $key1002 = (!is_integer($key1002) && !is_string($key1002)) ? serialize($key1002) : $key1002;
			  $this->success[$key1002] = $val1003;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCriteriaTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1010 => $viter1011)
          {
            $xfer += $output->writeI64($kiter1010);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1011));
              {
                foreach ($viter1011 as $iter1012 => $iter1013)
                {
                  if (is_scalar($iter1013)) {
                  $xfer += $iter1012->write($output);
                  } else {
                  $xfer += $iter1013->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCclTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCclTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCclTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCclTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCclTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1014 = 0;
            $_ktype1015 = 0;
            $_vtype1016 = 0;
            $xfer += $input->readMapBegin($_ktype1015, $_vtype1016, $_size1014);
            for ($_i1018 = 0; $_i1018 < $_size1014; ++$_i1018)
            {
              $key1019 = 0;
              $val1020 = array();
              $xfer += $input->readI64($key1019);
              $val1020 = array();
              $_size1021 = 0;
              $_etype1024 = 0;
              $xfer += $input->readSetBegin($_etype1024, $_size1021);
              for ($_i1025 = 0; $_i1025 < $_size1021; ++$_i1025)
              {
                $elem1026 = null;
                $elem1026 = new \thrift\data\TObject();
                $xfer += $elem1026->read($input);
                $val1020[$elem1026] = $elem1026;
			  }
			  $key1019 = (!is_integer($key1019) && !is_string($key1019)) ? serialize($key1019) : $key1019;
			  $this->success[$key1019] = $val1020;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCclTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1027 => $viter1028)
          {
            $xfer += $output->writeI64($kiter1027);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1028));
              {
                foreach ($viter1028 as $iter1029 => $iter1030)
                {
                  if (is_scalar($iter1030)) {
                  $xfer += $iter1029->write($output);
                  } else {
                  $xfer += $iter1030->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCclTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCclTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCclTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeyCclTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeyCclTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1031 = 0;
            $_ktype1032 = 0;
            $_vtype1033 = 0;
            $xfer += $input->readMapBegin($_ktype1032, $_vtype1033, $_size1031);
            for ($_i1035 = 0; $_i1035 < $_size1031; ++$_i1035)
            {
              $key1036 = 0;
              $val1037 = array();
              $xfer += $input->readI64($key1036);
              $val1037 = array();
              $_size1038 = 0;
              $_etype1041 = 0;
              $xfer += $input->readSetBegin($_etype1041, $_size1038);
              for ($_i1042 = 0; $_i1042 < $_size1038; ++$_i1042)
              {
                $elem1043 = null;
                $elem1043 = new \thrift\data\TObject();
                $xfer += $elem1043->read($input);
                $val1037[$elem1043] = $elem1043;
			  }
			  $key1036 = (!is_integer($key1036) && !is_string($key1036)) ? serialize($key1036) : $key1036;
			  $this->success[$key1036] = $val1037;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeyCclTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1044 => $viter1045)
          {
            $xfer += $output->writeI64($kiter1044);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1045));
              {
                foreach ($viter1045 as $iter1046 => $iter1047)
                {
                  if (is_scalar($iter1047)) {
                  $xfer += $iter1046->write($output);
                  } else {
                  $xfer += $iter1047->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCriteria_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1048 = 0;
            $_etype1051 = 0;
            $xfer += $input->readListBegin($_etype1051, $_size1048);
            for ($_i1052 = 0; $_i1052 < $_size1048; ++$_i1052)
            {
              $elem1053 = null;
              $xfer += $input->readString($elem1053);
              $this->keys []= $elem1053;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCriteria_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1054)
          {
            $xfer += $output->writeString($iter1054);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCriteria_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1055 = 0;
            $_ktype1056 = 0;
            $_vtype1057 = 0;
            $xfer += $input->readMapBegin($_ktype1056, $_vtype1057, $_size1055);
            for ($_i1059 = 0; $_i1059 < $_size1055; ++$_i1059)
            {
              $key1060 = 0;
              $val1061 = array();
              $xfer += $input->readI64($key1060);
              $val1061 = array();
              $_size1062 = 0;
              $_ktype1063 = 0;
              $_vtype1064 = 0;
              $xfer += $input->readMapBegin($_ktype1063, $_vtype1064, $_size1062);
              for ($_i1066 = 0; $_i1066 < $_size1062; ++$_i1066)
              {
                $key1067 = '';
                $val1068 = array();
                $xfer += $input->readString($key1067);
                $val1068 = array();
                $_size1069 = 0;
                $_etype1072 = 0;
                $xfer += $input->readSetBegin($_etype1072, $_size1069);
                for ($_i1073 = 0; $_i1073 < $_size1069; ++$_i1073)
                {
                  $elem1074 = null;
                  $elem1074 = new \thrift\data\TObject();
                  $xfer += $elem1074->read($input);
                  if (is_scalar($elem1074)) {
                    $val1068[$elem1074] = true;
                  } else {
                    $val1068 []= $elem1074;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1061[$key1067] = $val1068;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1060] = $val1061;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1075 => $viter1076)
          {
            $xfer += $output->writeI64($kiter1075);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1076));
              {
                foreach ($viter1076 as $kiter1077 => $viter1078)
                {
                  $xfer += $output->writeString($kiter1077);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1078));
                    {
                      foreach ($viter1078 as $iter1079 => $iter1080)
                      {
                        if (is_scalar($iter1080)) {
                        $xfer += $iter1079->write($output);
                        } else {
                        $xfer += $iter1080->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCcl_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1081 = 0;
            $_etype1084 = 0;
            $xfer += $input->readListBegin($_etype1084, $_size1081);
            for ($_i1085 = 0; $_i1085 < $_size1081; ++$_i1085)
            {
              $elem1086 = null;
              $xfer += $input->readString($elem1086);
              $this->keys []= $elem1086;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCcl_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1087)
          {
            $xfer += $output->writeString($iter1087);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCcl_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1088 = 0;
            $_ktype1089 = 0;
            $_vtype1090 = 0;
            $xfer += $input->readMapBegin($_ktype1089, $_vtype1090, $_size1088);
            for ($_i1092 = 0; $_i1092 < $_size1088; ++$_i1092)
            {
              $key1093 = 0;
              $val1094 = array();
              $xfer += $input->readI64($key1093);
              $val1094 = array();
              $_size1095 = 0;
              $_ktype1096 = 0;
              $_vtype1097 = 0;
              $xfer += $input->readMapBegin($_ktype1096, $_vtype1097, $_size1095);
              for ($_i1099 = 0; $_i1099 < $_size1095; ++$_i1099)
              {
                $key1100 = '';
                $val1101 = array();
                $xfer += $input->readString($key1100);
                $val1101 = array();
                $_size1102 = 0;
                $_etype1105 = 0;
                $xfer += $input->readSetBegin($_etype1105, $_size1102);
                for ($_i1106 = 0; $_i1106 < $_size1102; ++$_i1106)
                {
                  $elem1107 = null;
                  $elem1107 = new \thrift\data\TObject();
                  $xfer += $elem1107->read($input);
                  if (is_scalar($elem1107)) {
                    $val1101[$elem1107] = true;
                  } else {
                    $val1101 []= $elem1107;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1094[$key1100] = $val1101;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1093] = $val1094;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1108 => $viter1109)
          {
            $xfer += $output->writeI64($kiter1108);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1109));
              {
                foreach ($viter1109 as $kiter1110 => $viter1111)
                {
                  $xfer += $output->writeString($kiter1110);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1111));
                    {
                      foreach ($viter1111 as $iter1112 => $iter1113)
                      {
                        if (is_scalar($iter1113)) {
                        $xfer += $iter1112->write($output);
                        } else {
                        $xfer += $iter1113->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCriteriaTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCriteriaTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1114 = 0;
            $_etype1117 = 0;
            $xfer += $input->readListBegin($_etype1117, $_size1114);
            for ($_i1118 = 0; $_i1118 < $_size1114; ++$_i1118)
            {
              $elem1119 = null;
              $xfer += $input->readString($elem1119);
              $this->keys []= $elem1119;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCriteriaTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1120)
          {
            $xfer += $output->writeString($iter1120);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCriteriaTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCriteriaTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1121 = 0;
            $_ktype1122 = 0;
            $_vtype1123 = 0;
            $xfer += $input->readMapBegin($_ktype1122, $_vtype1123, $_size1121);
            for ($_i1125 = 0; $_i1125 < $_size1121; ++$_i1125)
            {
              $key1126 = 0;
              $val1127 = array();
              $xfer += $input->readI64($key1126);
              $val1127 = array();
              $_size1128 = 0;
              $_ktype1129 = 0;
              $_vtype1130 = 0;
              $xfer += $input->readMapBegin($_ktype1129, $_vtype1130, $_size1128);
              for ($_i1132 = 0; $_i1132 < $_size1128; ++$_i1132)
              {
                $key1133 = '';
                $val1134 = array();
                $xfer += $input->readString($key1133);
                $val1134 = array();
                $_size1135 = 0;
                $_etype1138 = 0;
                $xfer += $input->readSetBegin($_etype1138, $_size1135);
                for ($_i1139 = 0; $_i1139 < $_size1135; ++$_i1139)
                {
                  $elem1140 = null;
                  $elem1140 = new \thrift\data\TObject();
                  $xfer += $elem1140->read($input);
                  if (is_scalar($elem1140)) {
                    $val1134[$elem1140] = true;
                  } else {
                    $val1134 []= $elem1140;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1127[$key1133] = $val1134;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1126] = $val1127;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCriteriaTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1141 => $viter1142)
          {
            $xfer += $output->writeI64($kiter1141);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1142));
              {
                foreach ($viter1142 as $kiter1143 => $viter1144)
                {
                  $xfer += $output->writeString($kiter1143);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1144));
                    {
                      foreach ($viter1144 as $iter1145 => $iter1146)
                      {
                        if (is_scalar($iter1146)) {
                        $xfer += $iter1145->write($output);
                        } else {
                        $xfer += $iter1146->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCriteriaTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCriteriaTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1147 = 0;
            $_etype1150 = 0;
            $xfer += $input->readListBegin($_etype1150, $_size1147);
            for ($_i1151 = 0; $_i1151 < $_size1147; ++$_i1151)
            {
              $elem1152 = null;
              $xfer += $input->readString($elem1152);
              $this->keys []= $elem1152;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCriteriaTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1153)
          {
            $xfer += $output->writeString($iter1153);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCriteriaTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCriteriaTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1154 = 0;
            $_ktype1155 = 0;
            $_vtype1156 = 0;
            $xfer += $input->readMapBegin($_ktype1155, $_vtype1156, $_size1154);
            for ($_i1158 = 0; $_i1158 < $_size1154; ++$_i1158)
            {
              $key1159 = 0;
              $val1160 = array();
              $xfer += $input->readI64($key1159);
              $val1160 = array();
              $_size1161 = 0;
              $_ktype1162 = 0;
              $_vtype1163 = 0;
              $xfer += $input->readMapBegin($_ktype1162, $_vtype1163, $_size1161);
              for ($_i1165 = 0; $_i1165 < $_size1161; ++$_i1165)
              {
                $key1166 = '';
                $val1167 = array();
                $xfer += $input->readString($key1166);
                $val1167 = array();
                $_size1168 = 0;
                $_etype1171 = 0;
                $xfer += $input->readSetBegin($_etype1171, $_size1168);
                for ($_i1172 = 0; $_i1172 < $_size1168; ++$_i1172)
                {
                  $elem1173 = null;
                  $elem1173 = new \thrift\data\TObject();
                  $xfer += $elem1173->read($input);
                  if (is_scalar($elem1173)) {
                    $val1167[$elem1173] = true;
                  } else {
                    $val1167 []= $elem1173;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1160[$key1166] = $val1167;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1159] = $val1160;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCriteriaTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1174 => $viter1175)
          {
            $xfer += $output->writeI64($kiter1174);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1175));
              {
                foreach ($viter1175 as $kiter1176 => $viter1177)
                {
                  $xfer += $output->writeString($kiter1176);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1177));
                    {
                      foreach ($viter1177 as $iter1178 => $iter1179)
                      {
                        if (is_scalar($iter1179)) {
                        $xfer += $iter1178->write($output);
                        } else {
                        $xfer += $iter1179->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCclTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCclTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1180 = 0;
            $_etype1183 = 0;
            $xfer += $input->readListBegin($_etype1183, $_size1180);
            for ($_i1184 = 0; $_i1184 < $_size1180; ++$_i1184)
            {
              $elem1185 = null;
              $xfer += $input->readString($elem1185);
              $this->keys []= $elem1185;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCclTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1186)
          {
            $xfer += $output->writeString($iter1186);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCclTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCclTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1187 = 0;
            $_ktype1188 = 0;
            $_vtype1189 = 0;
            $xfer += $input->readMapBegin($_ktype1188, $_vtype1189, $_size1187);
            for ($_i1191 = 0; $_i1191 < $_size1187; ++$_i1191)
            {
              $key1192 = 0;
              $val1193 = array();
              $xfer += $input->readI64($key1192);
              $val1193 = array();
              $_size1194 = 0;
              $_ktype1195 = 0;
              $_vtype1196 = 0;
              $xfer += $input->readMapBegin($_ktype1195, $_vtype1196, $_size1194);
              for ($_i1198 = 0; $_i1198 < $_size1194; ++$_i1198)
              {
                $key1199 = '';
                $val1200 = array();
                $xfer += $input->readString($key1199);
                $val1200 = array();
                $_size1201 = 0;
                $_etype1204 = 0;
                $xfer += $input->readSetBegin($_etype1204, $_size1201);
                for ($_i1205 = 0; $_i1205 < $_size1201; ++$_i1205)
                {
                  $elem1206 = null;
                  $elem1206 = new \thrift\data\TObject();
                  $xfer += $elem1206->read($input);
                  if (is_scalar($elem1206)) {
                    $val1200[$elem1206] = true;
                  } else {
                    $val1200 []= $elem1206;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1193[$key1199] = $val1200;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1192] = $val1193;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCclTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1207 => $viter1208)
          {
            $xfer += $output->writeI64($kiter1207);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1208));
              {
                foreach ($viter1208 as $kiter1209 => $viter1210)
                {
                  $xfer += $output->writeString($kiter1209);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1210));
                    {
                      foreach ($viter1210 as $iter1211 => $iter1212)
                      {
                        if (is_scalar($iter1212)) {
                        $xfer += $iter1211->write($output);
                        } else {
                        $xfer += $iter1212->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCclTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCclTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1213 = 0;
            $_etype1216 = 0;
            $xfer += $input->readListBegin($_etype1216, $_size1213);
            for ($_i1217 = 0; $_i1217 < $_size1213; ++$_i1217)
            {
              $elem1218 = null;
              $xfer += $input->readString($elem1218);
              $this->keys []= $elem1218;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCclTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1219)
          {
            $xfer += $output->writeString($iter1219);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_selectKeysCclTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_selectKeysCclTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1220 = 0;
            $_ktype1221 = 0;
            $_vtype1222 = 0;
            $xfer += $input->readMapBegin($_ktype1221, $_vtype1222, $_size1220);
            for ($_i1224 = 0; $_i1224 < $_size1220; ++$_i1224)
            {
              $key1225 = 0;
              $val1226 = array();
              $xfer += $input->readI64($key1225);
              $val1226 = array();
              $_size1227 = 0;
              $_ktype1228 = 0;
              $_vtype1229 = 0;
              $xfer += $input->readMapBegin($_ktype1228, $_vtype1229, $_size1227);
              for ($_i1231 = 0; $_i1231 < $_size1227; ++$_i1231)
              {
                $key1232 = '';
                $val1233 = array();
                $xfer += $input->readString($key1232);
                $val1233 = array();
                $_size1234 = 0;
                $_etype1237 = 0;
                $xfer += $input->readSetBegin($_etype1237, $_size1234);
                for ($_i1238 = 0; $_i1238 < $_size1234; ++$_i1238)
                {
                  $elem1239 = null;
                  $elem1239 = new \thrift\data\TObject();
                  $xfer += $elem1239->read($input);
                  if (is_scalar($elem1239)) {
                    $val1233[$elem1239] = true;
                  } else {
                    $val1233 []= $elem1239;
                  }
                }
                $xfer += $input->readSetEnd();
                $val1226[$key1232] = $val1233;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1225] = $val1226;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_selectKeysCclTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1240 => $viter1241)
          {
            $xfer += $output->writeI64($kiter1240);
            {
              $output->writeMapBegin(TType::STRING, TType::SET, count($viter1241));
              {
                foreach ($viter1241 as $kiter1242 => $viter1243)
                {
                  $xfer += $output->writeString($kiter1242);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter1243));
                    {
                      foreach ($viter1243 as $iter1244 => $iter1245)
                      {
                        if (is_scalar($iter1245)) {
                        $xfer += $iter1244->write($output);
                        } else {
                        $xfer += $iter1245->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecord_result {
  static $_TSPEC;

  /**
   * @var \thrift\data\TObject
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \thrift\data\TObject();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecord_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordTime_result {
  static $_TSPEC;

  /**
   * @var \thrift\data\TObject
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \thrift\data\TObject();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordTime_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var \thrift\data\TObject
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \thrift\data\TObject();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordTimestr_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecord_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1246 = 0;
            $_etype1249 = 0;
            $xfer += $input->readListBegin($_etype1249, $_size1246);
            for ($_i1250 = 0; $_i1250 < $_size1246; ++$_i1250)
            {
              $elem1251 = null;
              $xfer += $input->readString($elem1251);
              $this->keys []= $elem1251;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecord_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1252)
          {
            $xfer += $output->writeString($iter1252);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecord_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1253 = 0;
            $_ktype1254 = 0;
            $_vtype1255 = 0;
            $xfer += $input->readMapBegin($_ktype1254, $_vtype1255, $_size1253);
            for ($_i1257 = 0; $_i1257 < $_size1253; ++$_i1257)
            {
              $key1258 = '';
              $val1259 = new \thrift\data\TObject();
              $xfer += $input->readString($key1258);
              $val1259 = new \thrift\data\TObject();
              $xfer += $val1259->read($input);
              $this->success[$key1258] = $val1259;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1260 => $viter1261)
          {
            $xfer += $output->writeString($kiter1260);
            $xfer += $viter1261->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1262 = 0;
            $_etype1265 = 0;
            $xfer += $input->readListBegin($_etype1265, $_size1262);
            for ($_i1266 = 0; $_i1266 < $_size1262; ++$_i1266)
            {
              $elem1267 = null;
              $xfer += $input->readString($elem1267);
              $this->keys []= $elem1267;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1268)
          {
            $xfer += $output->writeString($iter1268);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1269 = 0;
            $_ktype1270 = 0;
            $_vtype1271 = 0;
            $xfer += $input->readMapBegin($_ktype1270, $_vtype1271, $_size1269);
            for ($_i1273 = 0; $_i1273 < $_size1269; ++$_i1273)
            {
              $key1274 = '';
              $val1275 = new \thrift\data\TObject();
              $xfer += $input->readString($key1274);
              $val1275 = new \thrift\data\TObject();
              $xfer += $val1275->read($input);
              $this->success[$key1274] = $val1275;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1276 => $viter1277)
          {
            $xfer += $output->writeString($kiter1276);
            $xfer += $viter1277->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1278 = 0;
            $_etype1281 = 0;
            $xfer += $input->readListBegin($_etype1281, $_size1278);
            for ($_i1282 = 0; $_i1282 < $_size1278; ++$_i1282)
            {
              $elem1283 = null;
              $xfer += $input->readString($elem1283);
              $this->keys []= $elem1283;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1284)
          {
            $xfer += $output->writeString($iter1284);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1285 = 0;
            $_ktype1286 = 0;
            $_vtype1287 = 0;
            $xfer += $input->readMapBegin($_ktype1286, $_vtype1287, $_size1285);
            for ($_i1289 = 0; $_i1289 < $_size1285; ++$_i1289)
            {
              $key1290 = '';
              $val1291 = new \thrift\data\TObject();
              $xfer += $input->readString($key1290);
              $val1291 = new \thrift\data\TObject();
              $xfer += $val1291->read($input);
              $this->success[$key1290] = $val1291;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1292 => $viter1293)
          {
            $xfer += $output->writeString($kiter1292);
            $xfer += $viter1293->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecords_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1294 = 0;
            $_etype1297 = 0;
            $xfer += $input->readListBegin($_etype1297, $_size1294);
            for ($_i1298 = 0; $_i1298 < $_size1294; ++$_i1298)
            {
              $elem1299 = null;
              $xfer += $input->readString($elem1299);
              $this->keys []= $elem1299;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1300 = 0;
            $_etype1303 = 0;
            $xfer += $input->readListBegin($_etype1303, $_size1300);
            for ($_i1304 = 0; $_i1304 < $_size1300; ++$_i1304)
            {
              $elem1305 = null;
              $xfer += $input->readI64($elem1305);
              $this->records []= $elem1305;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecords_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1306)
          {
            $xfer += $output->writeString($iter1306);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1307)
          {
            $xfer += $output->writeI64($iter1307);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1308 = 0;
            $_ktype1309 = 0;
            $_vtype1310 = 0;
            $xfer += $input->readMapBegin($_ktype1309, $_vtype1310, $_size1308);
            for ($_i1312 = 0; $_i1312 < $_size1308; ++$_i1312)
            {
              $key1313 = 0;
              $val1314 = array();
              $xfer += $input->readI64($key1313);
              $val1314 = array();
              $_size1315 = 0;
              $_ktype1316 = 0;
              $_vtype1317 = 0;
              $xfer += $input->readMapBegin($_ktype1316, $_vtype1317, $_size1315);
              for ($_i1319 = 0; $_i1319 < $_size1315; ++$_i1319)
              {
                $key1320 = '';
                $val1321 = new \thrift\data\TObject();
                $xfer += $input->readString($key1320);
                $val1321 = new \thrift\data\TObject();
                $xfer += $val1321->read($input);
                $val1314[$key1320] = $val1321;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1313] = $val1314;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1322 => $viter1323)
          {
            $xfer += $output->writeI64($kiter1322);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1323));
              {
                foreach ($viter1323 as $kiter1324 => $viter1325)
                {
                  $xfer += $output->writeString($kiter1324);
                  $xfer += $viter1325->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecords_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1326 = 0;
            $_etype1329 = 0;
            $xfer += $input->readListBegin($_etype1329, $_size1326);
            for ($_i1330 = 0; $_i1330 < $_size1326; ++$_i1330)
            {
              $elem1331 = null;
              $xfer += $input->readI64($elem1331);
              $this->records []= $elem1331;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecords_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1332)
          {
            $xfer += $output->writeI64($iter1332);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1333 = 0;
            $_ktype1334 = 0;
            $_vtype1335 = 0;
            $xfer += $input->readMapBegin($_ktype1334, $_vtype1335, $_size1333);
            for ($_i1337 = 0; $_i1337 < $_size1333; ++$_i1337)
            {
              $key1338 = 0;
              $val1339 = new \thrift\data\TObject();
              $xfer += $input->readI64($key1338);
              $val1339 = new \thrift\data\TObject();
              $xfer += $val1339->read($input);
              $this->success[$key1338] = $val1339;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1340 => $viter1341)
          {
            $xfer += $output->writeI64($kiter1340);
            $xfer += $viter1341->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordsTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1342 = 0;
            $_etype1345 = 0;
            $xfer += $input->readListBegin($_etype1345, $_size1342);
            for ($_i1346 = 0; $_i1346 < $_size1342; ++$_i1346)
            {
              $elem1347 = null;
              $xfer += $input->readI64($elem1347);
              $this->records []= $elem1347;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordsTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1348)
          {
            $xfer += $output->writeI64($iter1348);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordsTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1349 = 0;
            $_ktype1350 = 0;
            $_vtype1351 = 0;
            $xfer += $input->readMapBegin($_ktype1350, $_vtype1351, $_size1349);
            for ($_i1353 = 0; $_i1353 < $_size1349; ++$_i1353)
            {
              $key1354 = 0;
              $val1355 = new \thrift\data\TObject();
              $xfer += $input->readI64($key1354);
              $val1355 = new \thrift\data\TObject();
              $xfer += $val1355->read($input);
              $this->success[$key1354] = $val1355;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordsTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1356 => $viter1357)
          {
            $xfer += $output->writeI64($kiter1356);
            $xfer += $viter1357->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1358 = 0;
            $_etype1361 = 0;
            $xfer += $input->readListBegin($_etype1361, $_size1358);
            for ($_i1362 = 0; $_i1362 < $_size1358; ++$_i1362)
            {
              $elem1363 = null;
              $xfer += $input->readI64($elem1363);
              $this->records []= $elem1363;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordsTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1364)
          {
            $xfer += $output->writeI64($iter1364);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1365 = 0;
            $_ktype1366 = 0;
            $_vtype1367 = 0;
            $xfer += $input->readMapBegin($_ktype1366, $_vtype1367, $_size1365);
            for ($_i1369 = 0; $_i1369 < $_size1365; ++$_i1369)
            {
              $key1370 = 0;
              $val1371 = new \thrift\data\TObject();
              $xfer += $input->readI64($key1370);
              $val1371 = new \thrift\data\TObject();
              $xfer += $val1371->read($input);
              $this->success[$key1370] = $val1371;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyRecordsTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1372 => $viter1373)
          {
            $xfer += $output->writeI64($kiter1372);
            $xfer += $viter1373->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordsTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1374 = 0;
            $_etype1377 = 0;
            $xfer += $input->readListBegin($_etype1377, $_size1374);
            for ($_i1378 = 0; $_i1378 < $_size1374; ++$_i1378)
            {
              $elem1379 = null;
              $xfer += $input->readString($elem1379);
              $this->keys []= $elem1379;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1380 = 0;
            $_etype1383 = 0;
            $xfer += $input->readListBegin($_etype1383, $_size1380);
            for ($_i1384 = 0; $_i1384 < $_size1380; ++$_i1384)
            {
              $elem1385 = null;
              $xfer += $input->readI64($elem1385);
              $this->records []= $elem1385;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordsTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1386)
          {
            $xfer += $output->writeString($iter1386);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1387)
          {
            $xfer += $output->writeI64($iter1387);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordsTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1388 = 0;
            $_ktype1389 = 0;
            $_vtype1390 = 0;
            $xfer += $input->readMapBegin($_ktype1389, $_vtype1390, $_size1388);
            for ($_i1392 = 0; $_i1392 < $_size1388; ++$_i1392)
            {
              $key1393 = 0;
              $val1394 = array();
              $xfer += $input->readI64($key1393);
              $val1394 = array();
              $_size1395 = 0;
              $_ktype1396 = 0;
              $_vtype1397 = 0;
              $xfer += $input->readMapBegin($_ktype1396, $_vtype1397, $_size1395);
              for ($_i1399 = 0; $_i1399 < $_size1395; ++$_i1399)
              {
                $key1400 = '';
                $val1401 = new \thrift\data\TObject();
                $xfer += $input->readString($key1400);
                $val1401 = new \thrift\data\TObject();
                $xfer += $val1401->read($input);
                $val1394[$key1400] = $val1401;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1393] = $val1394;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordsTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1402 => $viter1403)
          {
            $xfer += $output->writeI64($kiter1402);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1403));
              {
                foreach ($viter1403 as $kiter1404 => $viter1405)
                {
                  $xfer += $output->writeString($kiter1404);
                  $xfer += $viter1405->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1406 = 0;
            $_etype1409 = 0;
            $xfer += $input->readListBegin($_etype1409, $_size1406);
            for ($_i1410 = 0; $_i1410 < $_size1406; ++$_i1410)
            {
              $elem1411 = null;
              $xfer += $input->readString($elem1411);
              $this->keys []= $elem1411;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1412 = 0;
            $_etype1415 = 0;
            $xfer += $input->readListBegin($_etype1415, $_size1412);
            for ($_i1416 = 0; $_i1416 < $_size1412; ++$_i1416)
            {
              $elem1417 = null;
              $xfer += $input->readI64($elem1417);
              $this->records []= $elem1417;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordsTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1418)
          {
            $xfer += $output->writeString($iter1418);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1419)
          {
            $xfer += $output->writeI64($iter1419);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1420 = 0;
            $_ktype1421 = 0;
            $_vtype1422 = 0;
            $xfer += $input->readMapBegin($_ktype1421, $_vtype1422, $_size1420);
            for ($_i1424 = 0; $_i1424 < $_size1420; ++$_i1424)
            {
              $key1425 = 0;
              $val1426 = array();
              $xfer += $input->readI64($key1425);
              $val1426 = array();
              $_size1427 = 0;
              $_ktype1428 = 0;
              $_vtype1429 = 0;
              $xfer += $input->readMapBegin($_ktype1428, $_vtype1429, $_size1427);
              for ($_i1431 = 0; $_i1431 < $_size1427; ++$_i1431)
              {
                $key1432 = '';
                $val1433 = new \thrift\data\TObject();
                $xfer += $input->readString($key1432);
                $val1433 = new \thrift\data\TObject();
                $xfer += $val1433->read($input);
                $val1426[$key1432] = $val1433;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1425] = $val1426;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysRecordsTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1434 => $viter1435)
          {
            $xfer += $output->writeI64($kiter1434);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1435));
              {
                foreach ($viter1435 as $kiter1436 => $viter1437)
                {
                  $xfer += $output->writeString($kiter1436);
                  $xfer += $viter1437->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCriteria_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCriteria_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCriteria_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1438 = 0;
            $_ktype1439 = 0;
            $_vtype1440 = 0;
            $xfer += $input->readMapBegin($_ktype1439, $_vtype1440, $_size1438);
            for ($_i1442 = 0; $_i1442 < $_size1438; ++$_i1442)
            {
              $key1443 = 0;
              $val1444 = new \thrift\data\TObject();
              $xfer += $input->readI64($key1443);
              $val1444 = new \thrift\data\TObject();
              $xfer += $val1444->read($input);
              $this->success[$key1443] = $val1444;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1445 => $viter1446)
          {
            $xfer += $output->writeI64($kiter1445);
            $xfer += $viter1446->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCriteria_args {
  static $_TSPEC;

  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCriteria_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCriteria_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1447 = 0;
            $_ktype1448 = 0;
            $_vtype1449 = 0;
            $xfer += $input->readMapBegin($_ktype1448, $_vtype1449, $_size1447);
            for ($_i1451 = 0; $_i1451 < $_size1447; ++$_i1451)
            {
              $key1452 = 0;
              $val1453 = array();
              $xfer += $input->readI64($key1452);
              $val1453 = array();
              $_size1454 = 0;
              $_ktype1455 = 0;
              $_vtype1456 = 0;
              $xfer += $input->readMapBegin($_ktype1455, $_vtype1456, $_size1454);
              for ($_i1458 = 0; $_i1458 < $_size1454; ++$_i1458)
              {
                $key1459 = '';
                $val1460 = new \thrift\data\TObject();
                $xfer += $input->readString($key1459);
                $val1460 = new \thrift\data\TObject();
                $xfer += $val1460->read($input);
                $val1453[$key1459] = $val1460;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1452] = $val1453;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1461 => $viter1462)
          {
            $xfer += $output->writeI64($kiter1461);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1462));
              {
                foreach ($viter1462 as $kiter1463 => $viter1464)
                {
                  $xfer += $output->writeString($kiter1463);
                  $xfer += $viter1464->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCcl_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCcl_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCcl_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1465 = 0;
            $_ktype1466 = 0;
            $_vtype1467 = 0;
            $xfer += $input->readMapBegin($_ktype1466, $_vtype1467, $_size1465);
            for ($_i1469 = 0; $_i1469 < $_size1465; ++$_i1469)
            {
              $key1470 = 0;
              $val1471 = array();
              $xfer += $input->readI64($key1470);
              $val1471 = array();
              $_size1472 = 0;
              $_ktype1473 = 0;
              $_vtype1474 = 0;
              $xfer += $input->readMapBegin($_ktype1473, $_vtype1474, $_size1472);
              for ($_i1476 = 0; $_i1476 < $_size1472; ++$_i1476)
              {
                $key1477 = '';
                $val1478 = new \thrift\data\TObject();
                $xfer += $input->readString($key1477);
                $val1478 = new \thrift\data\TObject();
                $xfer += $val1478->read($input);
                $val1471[$key1477] = $val1478;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1470] = $val1471;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1479 => $viter1480)
          {
            $xfer += $output->writeI64($kiter1479);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1480));
              {
                foreach ($viter1480 as $kiter1481 => $viter1482)
                {
                  $xfer += $output->writeString($kiter1481);
                  $xfer += $viter1482->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCriteriaTime_args {
  static $_TSPEC;

  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCriteriaTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCriteriaTime_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCriteriaTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCriteriaTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1483 = 0;
            $_ktype1484 = 0;
            $_vtype1485 = 0;
            $xfer += $input->readMapBegin($_ktype1484, $_vtype1485, $_size1483);
            for ($_i1487 = 0; $_i1487 < $_size1483; ++$_i1487)
            {
              $key1488 = 0;
              $val1489 = array();
              $xfer += $input->readI64($key1488);
              $val1489 = array();
              $_size1490 = 0;
              $_ktype1491 = 0;
              $_vtype1492 = 0;
              $xfer += $input->readMapBegin($_ktype1491, $_vtype1492, $_size1490);
              for ($_i1494 = 0; $_i1494 < $_size1490; ++$_i1494)
              {
                $key1495 = '';
                $val1496 = new \thrift\data\TObject();
                $xfer += $input->readString($key1495);
                $val1496 = new \thrift\data\TObject();
                $xfer += $val1496->read($input);
                $val1489[$key1495] = $val1496;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1488] = $val1489;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCriteriaTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1497 => $viter1498)
          {
            $xfer += $output->writeI64($kiter1497);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1498));
              {
                foreach ($viter1498 as $kiter1499 => $viter1500)
                {
                  $xfer += $output->writeString($kiter1499);
                  $xfer += $viter1500->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCriteriaTimestr_args {
  static $_TSPEC;

  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCriteriaTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCriteriaTimestr_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCriteriaTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCriteriaTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1501 = 0;
            $_ktype1502 = 0;
            $_vtype1503 = 0;
            $xfer += $input->readMapBegin($_ktype1502, $_vtype1503, $_size1501);
            for ($_i1505 = 0; $_i1505 < $_size1501; ++$_i1505)
            {
              $key1506 = 0;
              $val1507 = array();
              $xfer += $input->readI64($key1506);
              $val1507 = array();
              $_size1508 = 0;
              $_ktype1509 = 0;
              $_vtype1510 = 0;
              $xfer += $input->readMapBegin($_ktype1509, $_vtype1510, $_size1508);
              for ($_i1512 = 0; $_i1512 < $_size1508; ++$_i1512)
              {
                $key1513 = '';
                $val1514 = new \thrift\data\TObject();
                $xfer += $input->readString($key1513);
                $val1514 = new \thrift\data\TObject();
                $xfer += $val1514->read($input);
                $val1507[$key1513] = $val1514;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1506] = $val1507;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCriteriaTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1515 => $viter1516)
          {
            $xfer += $output->writeI64($kiter1515);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1516));
              {
                foreach ($viter1516 as $kiter1517 => $viter1518)
                {
                  $xfer += $output->writeString($kiter1517);
                  $xfer += $viter1518->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCclTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCclTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCclTime_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCclTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCclTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1519 = 0;
            $_ktype1520 = 0;
            $_vtype1521 = 0;
            $xfer += $input->readMapBegin($_ktype1520, $_vtype1521, $_size1519);
            for ($_i1523 = 0; $_i1523 < $_size1519; ++$_i1523)
            {
              $key1524 = 0;
              $val1525 = array();
              $xfer += $input->readI64($key1524);
              $val1525 = array();
              $_size1526 = 0;
              $_ktype1527 = 0;
              $_vtype1528 = 0;
              $xfer += $input->readMapBegin($_ktype1527, $_vtype1528, $_size1526);
              for ($_i1530 = 0; $_i1530 < $_size1526; ++$_i1530)
              {
                $key1531 = '';
                $val1532 = new \thrift\data\TObject();
                $xfer += $input->readString($key1531);
                $val1532 = new \thrift\data\TObject();
                $xfer += $val1532->read($input);
                $val1525[$key1531] = $val1532;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1524] = $val1525;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCclTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1533 => $viter1534)
          {
            $xfer += $output->writeI64($kiter1533);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1534));
              {
                foreach ($viter1534 as $kiter1535 => $viter1536)
                {
                  $xfer += $output->writeString($kiter1535);
                  $xfer += $viter1536->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCclTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCclTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCclTimestr_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getCclTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getCclTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1537 = 0;
            $_ktype1538 = 0;
            $_vtype1539 = 0;
            $xfer += $input->readMapBegin($_ktype1538, $_vtype1539, $_size1537);
            for ($_i1541 = 0; $_i1541 < $_size1537; ++$_i1541)
            {
              $key1542 = 0;
              $val1543 = array();
              $xfer += $input->readI64($key1542);
              $val1543 = array();
              $_size1544 = 0;
              $_ktype1545 = 0;
              $_vtype1546 = 0;
              $xfer += $input->readMapBegin($_ktype1545, $_vtype1546, $_size1544);
              for ($_i1548 = 0; $_i1548 < $_size1544; ++$_i1548)
              {
                $key1549 = '';
                $val1550 = new \thrift\data\TObject();
                $xfer += $input->readString($key1549);
                $val1550 = new \thrift\data\TObject();
                $xfer += $val1550->read($input);
                $val1543[$key1549] = $val1550;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1542] = $val1543;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getCclTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1551 => $viter1552)
          {
            $xfer += $output->writeI64($kiter1551);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1552));
              {
                foreach ($viter1552 as $kiter1553 => $viter1554)
                {
                  $xfer += $output->writeString($kiter1553);
                  $xfer += $viter1554->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCcl_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCcl_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCcl_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1555 = 0;
            $_ktype1556 = 0;
            $_vtype1557 = 0;
            $xfer += $input->readMapBegin($_ktype1556, $_vtype1557, $_size1555);
            for ($_i1559 = 0; $_i1559 < $_size1555; ++$_i1559)
            {
              $key1560 = 0;
              $val1561 = new \thrift\data\TObject();
              $xfer += $input->readI64($key1560);
              $val1561 = new \thrift\data\TObject();
              $xfer += $val1561->read($input);
              $this->success[$key1560] = $val1561;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1562 => $viter1563)
          {
            $xfer += $output->writeI64($kiter1562);
            $xfer += $viter1563->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCriteriaTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCriteriaTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCriteriaTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCriteriaTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCriteriaTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1564 = 0;
            $_ktype1565 = 0;
            $_vtype1566 = 0;
            $xfer += $input->readMapBegin($_ktype1565, $_vtype1566, $_size1564);
            for ($_i1568 = 0; $_i1568 < $_size1564; ++$_i1568)
            {
              $key1569 = 0;
              $val1570 = new \thrift\data\TObject();
              $xfer += $input->readI64($key1569);
              $val1570 = new \thrift\data\TObject();
              $xfer += $val1570->read($input);
              $this->success[$key1569] = $val1570;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCriteriaTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1571 => $viter1572)
          {
            $xfer += $output->writeI64($kiter1571);
            $xfer += $viter1572->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCriteriaTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCriteriaTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCriteriaTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCriteriaTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCriteriaTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1573 = 0;
            $_ktype1574 = 0;
            $_vtype1575 = 0;
            $xfer += $input->readMapBegin($_ktype1574, $_vtype1575, $_size1573);
            for ($_i1577 = 0; $_i1577 < $_size1573; ++$_i1577)
            {
              $key1578 = 0;
              $val1579 = new \thrift\data\TObject();
              $xfer += $input->readI64($key1578);
              $val1579 = new \thrift\data\TObject();
              $xfer += $val1579->read($input);
              $this->success[$key1578] = $val1579;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCriteriaTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1580 => $viter1581)
          {
            $xfer += $output->writeI64($kiter1580);
            $xfer += $viter1581->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCclTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCclTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCclTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCclTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCclTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1582 = 0;
            $_ktype1583 = 0;
            $_vtype1584 = 0;
            $xfer += $input->readMapBegin($_ktype1583, $_vtype1584, $_size1582);
            for ($_i1586 = 0; $_i1586 < $_size1582; ++$_i1586)
            {
              $key1587 = 0;
              $val1588 = new \thrift\data\TObject();
              $xfer += $input->readI64($key1587);
              $val1588 = new \thrift\data\TObject();
              $xfer += $val1588->read($input);
              $this->success[$key1587] = $val1588;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCclTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1589 => $viter1590)
          {
            $xfer += $output->writeI64($kiter1589);
            $xfer += $viter1590->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCclTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCclTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCclTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeyCclTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeyCclTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1591 = 0;
            $_ktype1592 = 0;
            $_vtype1593 = 0;
            $xfer += $input->readMapBegin($_ktype1592, $_vtype1593, $_size1591);
            for ($_i1595 = 0; $_i1595 < $_size1591; ++$_i1595)
            {
              $key1596 = 0;
              $val1597 = new \thrift\data\TObject();
              $xfer += $input->readI64($key1596);
              $val1597 = new \thrift\data\TObject();
              $xfer += $val1597->read($input);
              $this->success[$key1596] = $val1597;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeyCclTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter1598 => $viter1599)
          {
            $xfer += $output->writeI64($kiter1598);
            $xfer += $viter1599->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCriteria_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1600 = 0;
            $_etype1603 = 0;
            $xfer += $input->readListBegin($_etype1603, $_size1600);
            for ($_i1604 = 0; $_i1604 < $_size1600; ++$_i1604)
            {
              $elem1605 = null;
              $xfer += $input->readString($elem1605);
              $this->keys []= $elem1605;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCriteria_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1606)
          {
            $xfer += $output->writeString($iter1606);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCriteria_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1607 = 0;
            $_ktype1608 = 0;
            $_vtype1609 = 0;
            $xfer += $input->readMapBegin($_ktype1608, $_vtype1609, $_size1607);
            for ($_i1611 = 0; $_i1611 < $_size1607; ++$_i1611)
            {
              $key1612 = 0;
              $val1613 = array();
              $xfer += $input->readI64($key1612);
              $val1613 = array();
              $_size1614 = 0;
              $_ktype1615 = 0;
              $_vtype1616 = 0;
              $xfer += $input->readMapBegin($_ktype1615, $_vtype1616, $_size1614);
              for ($_i1618 = 0; $_i1618 < $_size1614; ++$_i1618)
              {
                $key1619 = '';
                $val1620 = new \thrift\data\TObject();
                $xfer += $input->readString($key1619);
                $val1620 = new \thrift\data\TObject();
                $xfer += $val1620->read($input);
                $val1613[$key1619] = $val1620;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1612] = $val1613;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1621 => $viter1622)
          {
            $xfer += $output->writeI64($kiter1621);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1622));
              {
                foreach ($viter1622 as $kiter1623 => $viter1624)
                {
                  $xfer += $output->writeString($kiter1623);
                  $xfer += $viter1624->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCcl_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1625 = 0;
            $_etype1628 = 0;
            $xfer += $input->readListBegin($_etype1628, $_size1625);
            for ($_i1629 = 0; $_i1629 < $_size1625; ++$_i1629)
            {
              $elem1630 = null;
              $xfer += $input->readString($elem1630);
              $this->keys []= $elem1630;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCcl_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1631)
          {
            $xfer += $output->writeString($iter1631);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCcl_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1632 = 0;
            $_ktype1633 = 0;
            $_vtype1634 = 0;
            $xfer += $input->readMapBegin($_ktype1633, $_vtype1634, $_size1632);
            for ($_i1636 = 0; $_i1636 < $_size1632; ++$_i1636)
            {
              $key1637 = 0;
              $val1638 = array();
              $xfer += $input->readI64($key1637);
              $val1638 = array();
              $_size1639 = 0;
              $_ktype1640 = 0;
              $_vtype1641 = 0;
              $xfer += $input->readMapBegin($_ktype1640, $_vtype1641, $_size1639);
              for ($_i1643 = 0; $_i1643 < $_size1639; ++$_i1643)
              {
                $key1644 = '';
                $val1645 = new \thrift\data\TObject();
                $xfer += $input->readString($key1644);
                $val1645 = new \thrift\data\TObject();
                $xfer += $val1645->read($input);
                $val1638[$key1644] = $val1645;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1637] = $val1638;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1646 => $viter1647)
          {
            $xfer += $output->writeI64($kiter1646);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1647));
              {
                foreach ($viter1647 as $kiter1648 => $viter1649)
                {
                  $xfer += $output->writeString($kiter1648);
                  $xfer += $viter1649->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCriteriaTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCriteriaTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1650 = 0;
            $_etype1653 = 0;
            $xfer += $input->readListBegin($_etype1653, $_size1650);
            for ($_i1654 = 0; $_i1654 < $_size1650; ++$_i1654)
            {
              $elem1655 = null;
              $xfer += $input->readString($elem1655);
              $this->keys []= $elem1655;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCriteriaTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1656)
          {
            $xfer += $output->writeString($iter1656);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCriteriaTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCriteriaTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1657 = 0;
            $_ktype1658 = 0;
            $_vtype1659 = 0;
            $xfer += $input->readMapBegin($_ktype1658, $_vtype1659, $_size1657);
            for ($_i1661 = 0; $_i1661 < $_size1657; ++$_i1661)
            {
              $key1662 = 0;
              $val1663 = array();
              $xfer += $input->readI64($key1662);
              $val1663 = array();
              $_size1664 = 0;
              $_ktype1665 = 0;
              $_vtype1666 = 0;
              $xfer += $input->readMapBegin($_ktype1665, $_vtype1666, $_size1664);
              for ($_i1668 = 0; $_i1668 < $_size1664; ++$_i1668)
              {
                $key1669 = '';
                $val1670 = new \thrift\data\TObject();
                $xfer += $input->readString($key1669);
                $val1670 = new \thrift\data\TObject();
                $xfer += $val1670->read($input);
                $val1663[$key1669] = $val1670;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1662] = $val1663;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCriteriaTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1671 => $viter1672)
          {
            $xfer += $output->writeI64($kiter1671);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1672));
              {
                foreach ($viter1672 as $kiter1673 => $viter1674)
                {
                  $xfer += $output->writeString($kiter1673);
                  $xfer += $viter1674->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCriteriaTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCriteriaTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1675 = 0;
            $_etype1678 = 0;
            $xfer += $input->readListBegin($_etype1678, $_size1675);
            for ($_i1679 = 0; $_i1679 < $_size1675; ++$_i1679)
            {
              $elem1680 = null;
              $xfer += $input->readString($elem1680);
              $this->keys []= $elem1680;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCriteriaTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1681)
          {
            $xfer += $output->writeString($iter1681);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 2);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCriteriaTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCriteriaTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1682 = 0;
            $_ktype1683 = 0;
            $_vtype1684 = 0;
            $xfer += $input->readMapBegin($_ktype1683, $_vtype1684, $_size1682);
            for ($_i1686 = 0; $_i1686 < $_size1682; ++$_i1686)
            {
              $key1687 = 0;
              $val1688 = array();
              $xfer += $input->readI64($key1687);
              $val1688 = array();
              $_size1689 = 0;
              $_ktype1690 = 0;
              $_vtype1691 = 0;
              $xfer += $input->readMapBegin($_ktype1690, $_vtype1691, $_size1689);
              for ($_i1693 = 0; $_i1693 < $_size1689; ++$_i1693)
              {
                $key1694 = '';
                $val1695 = new \thrift\data\TObject();
                $xfer += $input->readString($key1694);
                $val1695 = new \thrift\data\TObject();
                $xfer += $val1695->read($input);
                $val1688[$key1694] = $val1695;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1687] = $val1688;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCriteriaTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1696 => $viter1697)
          {
            $xfer += $output->writeI64($kiter1696);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1697));
              {
                foreach ($viter1697 as $kiter1698 => $viter1699)
                {
                  $xfer += $output->writeString($kiter1698);
                  $xfer += $viter1699->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCclTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCclTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1700 = 0;
            $_etype1703 = 0;
            $xfer += $input->readListBegin($_etype1703, $_size1700);
            for ($_i1704 = 0; $_i1704 < $_size1700; ++$_i1704)
            {
              $elem1705 = null;
              $xfer += $input->readString($elem1705);
              $this->keys []= $elem1705;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCclTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1706)
          {
            $xfer += $output->writeString($iter1706);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCclTime_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCclTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1707 = 0;
            $_ktype1708 = 0;
            $_vtype1709 = 0;
            $xfer += $input->readMapBegin($_ktype1708, $_vtype1709, $_size1707);
            for ($_i1711 = 0; $_i1711 < $_size1707; ++$_i1711)
            {
              $key1712 = 0;
              $val1713 = array();
              $xfer += $input->readI64($key1712);
              $val1713 = array();
              $_size1714 = 0;
              $_ktype1715 = 0;
              $_vtype1716 = 0;
              $xfer += $input->readMapBegin($_ktype1715, $_vtype1716, $_size1714);
              for ($_i1718 = 0; $_i1718 < $_size1714; ++$_i1718)
              {
                $key1719 = '';
                $val1720 = new \thrift\data\TObject();
                $xfer += $input->readString($key1719);
                $val1720 = new \thrift\data\TObject();
                $xfer += $val1720->read($input);
                $val1713[$key1719] = $val1720;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1712] = $val1713;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCclTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1721 => $viter1722)
          {
            $xfer += $output->writeI64($kiter1721);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1722));
              {
                foreach ($viter1722 as $kiter1723 => $viter1724)
                {
                  $xfer += $output->writeString($kiter1723);
                  $xfer += $viter1724->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCclTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCclTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size1725 = 0;
            $_etype1728 = 0;
            $xfer += $input->readListBegin($_etype1728, $_size1725);
            for ($_i1729 = 0; $_i1729 < $_size1725; ++$_i1729)
            {
              $elem1730 = null;
              $xfer += $input->readString($elem1730);
              $this->keys []= $elem1730;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCclTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter1731)
          {
            $xfer += $output->writeString($iter1731);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 2);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getKeysCclTimestr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRUCT,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getKeysCclTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1732 = 0;
            $_ktype1733 = 0;
            $_vtype1734 = 0;
            $xfer += $input->readMapBegin($_ktype1733, $_vtype1734, $_size1732);
            for ($_i1736 = 0; $_i1736 < $_size1732; ++$_i1736)
            {
              $key1737 = 0;
              $val1738 = array();
              $xfer += $input->readI64($key1737);
              $val1738 = array();
              $_size1739 = 0;
              $_ktype1740 = 0;
              $_vtype1741 = 0;
              $xfer += $input->readMapBegin($_ktype1740, $_vtype1741, $_size1739);
              for ($_i1743 = 0; $_i1743 < $_size1739; ++$_i1743)
              {
                $key1744 = '';
                $val1745 = new \thrift\data\TObject();
                $xfer += $input->readString($key1744);
                $val1745 = new \thrift\data\TObject();
                $xfer += $val1745->read($input);
                $val1738[$key1744] = $val1745;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key1737] = $val1738;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getKeysCclTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter1746 => $viter1747)
          {
            $xfer += $output->writeI64($kiter1746);
            {
              $output->writeMapBegin(TType::STRING, TType::STRUCT, count($viter1747));
              {
                foreach ($viter1747 as $kiter1748 => $viter1749)
                {
                  $xfer += $output->writeString($kiter1748);
                  $xfer += $viter1749->write($output);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyKeyValueRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyKeyValueRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyKeyValueRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyKeyValueRecord_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyKeyValueRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyKeyValueRecord_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyKeyValueRecordTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyKeyValueRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyKeyValueRecordTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 4);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyKeyValueRecordTime_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyKeyValueRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyKeyValueRecordTime_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyKeyValueRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyKeyValueRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyKeyValueRecordTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 4);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyKeyValueRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyKeyValueRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyKeyValueRecordTimestr_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_jsonifyRecords_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var bool
   */
  public $identifier = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'identifier',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['identifier'])) {
        $this->identifier = $vals['identifier'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_jsonifyRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1750 = 0;
            $_etype1753 = 0;
            $xfer += $input->readListBegin($_etype1753, $_size1750);
            for ($_i1754 = 0; $_i1754 < $_size1750; ++$_i1754)
            {
              $elem1755 = null;
              $xfer += $input->readI64($elem1755);
              $this->records []= $elem1755;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->identifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_jsonifyRecords_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1756)
          {
            $xfer += $output->writeI64($iter1756);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identifier !== null) {
      $xfer += $output->writeFieldBegin('identifier', TType::BOOL, 2);
      $xfer += $output->writeBool($this->identifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_jsonifyRecords_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_jsonifyRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_jsonifyRecords_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_jsonifyRecordsTime_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var bool
   */
  public $identifier = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'identifier',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['identifier'])) {
        $this->identifier = $vals['identifier'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_jsonifyRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1757 = 0;
            $_etype1760 = 0;
            $xfer += $input->readListBegin($_etype1760, $_size1757);
            for ($_i1761 = 0; $_i1761 < $_size1757; ++$_i1761)
            {
              $elem1762 = null;
              $xfer += $input->readI64($elem1762);
              $this->records []= $elem1762;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->identifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_jsonifyRecordsTime_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1763)
          {
            $xfer += $output->writeI64($iter1763);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identifier !== null) {
      $xfer += $output->writeFieldBegin('identifier', TType::BOOL, 3);
      $xfer += $output->writeBool($this->identifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_jsonifyRecordsTime_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_jsonifyRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_jsonifyRecordsTime_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_jsonifyRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var bool
   */
  public $identifier = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'identifier',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['identifier'])) {
        $this->identifier = $vals['identifier'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_jsonifyRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size1764 = 0;
            $_etype1767 = 0;
            $xfer += $input->readListBegin($_etype1767, $_size1764);
            for ($_i1768 = 0; $_i1768 < $_size1764; ++$_i1768)
            {
              $elem1769 = null;
              $xfer += $input->readI64($elem1769);
              $this->records []= $elem1769;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->identifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_jsonifyRecordsTimestr_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter1770)
          {
            $xfer += $output->writeI64($iter1770);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identifier !== null) {
      $xfer += $output->writeFieldBegin('identifier', TType::BOOL, 3);
      $xfer += $output->writeBool($this->identifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_jsonifyRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_jsonifyRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_jsonifyRecordsTimestr_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findCriteria_args {
  static $_TSPEC;

  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findCriteria_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findCriteria_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findCriteria_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findCriteria_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size1771 = 0;
            $_etype1774 = 0;
            $xfer += $input->readSetBegin($_etype1774, $_size1771);
            for ($_i1775 = 0; $_i1775 < $_size1771; ++$_i1775)
            {
              $elem1776 = null;
              $xfer += $input->readI64($elem1776);
              if (is_scalar($elem1776)) {
                $this->success[$elem1776] = true;
              } else {
                $this->success []= $elem1776;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findCriteria_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter1777 => $iter1778)
          {
            if (is_scalar($iter1778)) {
            $xfer += $output->writeI64($iter1777);
            } else {
            $xfer += $output->writeI64($iter1778);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findCcl_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findCcl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findCcl_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findCcl_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findCcl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size1779 = 0;
            $_etype1782 = 0;
            $xfer += $input->readSetBegin($_etype1782, $_size1779);
            for ($_i1783 = 0; $_i1783 < $_size1779; ++$_i1783)
            {
              $elem1784 = null;
              $xfer += $input->readI64($elem1784);
              if (is_scalar($elem1784)) {
                $this->success[$elem1784] = true;
              } else {
                $this->success []= $elem1784;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findCcl_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter1785 => $iter1786)
          {
            if (is_scalar($iter1786)) {
            $xfer += $output->writeI64($iter1785);
            } else {
            $xfer += $output->writeI64($iter1786);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorValues_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $operator = null;
  /**
   * @var \thrift\data\TObject[]
   */
  public $values = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operator',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'values',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['operator'])) {
        $this->operator = $vals['operator'];
      }
      if (isset($vals['values'])) {
        $this->values = $vals['values'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorValues_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->values = array();
            $_size1787 = 0;
            $_etype1790 = 0;
            $xfer += $input->readListBegin($_etype1790, $_size1787);
            for ($_i1791 = 0; $_i1791 < $_size1787; ++$_i1791)
            {
              $elem1792 = null;
              $elem1792 = new \thrift\data\TObject();
              $xfer += $elem1792->read($input);
              $this->values []= $elem1792;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorValues_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operator !== null) {
      $xfer += $output->writeFieldBegin('operator', TType::I32, 2);
      $xfer += $output->writeI32($this->operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values !== null) {
      if (!is_array($this->values)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('values', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->values));
        {
          foreach ($this->values as $iter1793)
          {
            $xfer += $iter1793->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorValues_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorValues_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size1794 = 0;
            $_etype1797 = 0;
            $xfer += $input->readSetBegin($_etype1797, $_size1794);
            for ($_i1798 = 0; $_i1798 < $_size1794; ++$_i1798)
            {
              $elem1799 = null;
              $xfer += $input->readI64($elem1799);
              if (is_scalar($elem1799)) {
                $this->success[$elem1799] = true;
              } else {
                $this->success []= $elem1799;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorValues_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter1800 => $iter1801)
          {
            if (is_scalar($iter1801)) {
            $xfer += $output->writeI64($iter1800);
            } else {
            $xfer += $output->writeI64($iter1801);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorValuesTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $operator = null;
  /**
   * @var \thrift\data\TObject[]
   */
  public $values = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operator',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'values',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['operator'])) {
        $this->operator = $vals['operator'];
      }
      if (isset($vals['values'])) {
        $this->values = $vals['values'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorValuesTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->values = array();
            $_size1802 = 0;
            $_etype1805 = 0;
            $xfer += $input->readListBegin($_etype1805, $_size1802);
            for ($_i1806 = 0; $_i1806 < $_size1802; ++$_i1806)
            {
              $elem1807 = null;
              $elem1807 = new \thrift\data\TObject();
              $xfer += $elem1807->read($input);
              $this->values []= $elem1807;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorValuesTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operator !== null) {
      $xfer += $output->writeFieldBegin('operator', TType::I32, 2);
      $xfer += $output->writeI32($this->operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values !== null) {
      if (!is_array($this->values)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('values', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->values));
        {
          foreach ($this->values as $iter1808)
          {
            $xfer += $iter1808->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 4);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorValuesTime_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorValuesTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size1809 = 0;
            $_etype1812 = 0;
            $xfer += $input->readSetBegin($_etype1812, $_size1809);
            for ($_i1813 = 0; $_i1813 < $_size1809; ++$_i1813)
            {
              $elem1814 = null;
              $xfer += $input->readI64($elem1814);
              if (is_scalar($elem1814)) {
                $this->success[$elem1814] = true;
              } else {
                $this->success []= $elem1814;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorValuesTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter1815 => $iter1816)
          {
            if (is_scalar($iter1816)) {
            $xfer += $output->writeI64($iter1815);
            } else {
            $xfer += $output->writeI64($iter1816);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorValuesTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $operator = null;
  /**
   * @var \thrift\data\TObject[]
   */
  public $values = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operator',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'values',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['operator'])) {
        $this->operator = $vals['operator'];
      }
      if (isset($vals['values'])) {
        $this->values = $vals['values'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorValuesTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->values = array();
            $_size1817 = 0;
            $_etype1820 = 0;
            $xfer += $input->readListBegin($_etype1820, $_size1817);
            for ($_i1821 = 0; $_i1821 < $_size1817; ++$_i1821)
            {
              $elem1822 = null;
              $elem1822 = new \thrift\data\TObject();
              $xfer += $elem1822->read($input);
              $this->values []= $elem1822;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorValuesTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operator !== null) {
      $xfer += $output->writeFieldBegin('operator', TType::I32, 2);
      $xfer += $output->writeI32($this->operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values !== null) {
      if (!is_array($this->values)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('values', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->values));
        {
          foreach ($this->values as $iter1823)
          {
            $xfer += $iter1823->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 4);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorValuesTimestr_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorValuesTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size1824 = 0;
            $_etype1827 = 0;
            $xfer += $input->readSetBegin($_etype1827, $_size1824);
            for ($_i1828 = 0; $_i1828 < $_size1824; ++$_i1828)
            {
              $elem1829 = null;
              $xfer += $input->readI64($elem1829);
              if (is_scalar($elem1829)) {
                $this->success[$elem1829] = true;
              } else {
                $this->success []= $elem1829;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorValuesTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter1830 => $iter1831)
          {
            if (is_scalar($iter1831)) {
            $xfer += $output->writeI64($iter1830);
            } else {
            $xfer += $output->writeI64($iter1831);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorstrValues_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $operator = null;
  /**
   * @var \thrift\data\TObject[]
   */
  public $values = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operator',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'values',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['operator'])) {
        $this->operator = $vals['operator'];
      }
      if (isset($vals['values'])) {
        $this->values = $vals['values'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorstrValues_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->values = array();
            $_size1832 = 0;
            $_etype1835 = 0;
            $xfer += $input->readListBegin($_etype1835, $_size1832);
            for ($_i1836 = 0; $_i1836 < $_size1832; ++$_i1836)
            {
              $elem1837 = null;
              $elem1837 = new \thrift\data\TObject();
              $xfer += $elem1837->read($input);
              $this->values []= $elem1837;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorstrValues_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operator !== null) {
      $xfer += $output->writeFieldBegin('operator', TType::STRING, 2);
      $xfer += $output->writeString($this->operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values !== null) {
      if (!is_array($this->values)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('values', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->values));
        {
          foreach ($this->values as $iter1838)
          {
            $xfer += $iter1838->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorstrValues_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorstrValues_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size1839 = 0;
            $_etype1842 = 0;
            $xfer += $input->readSetBegin($_etype1842, $_size1839);
            for ($_i1843 = 0; $_i1843 < $_size1839; ++$_i1843)
            {
              $elem1844 = null;
              $xfer += $input->readI64($elem1844);
              if (is_scalar($elem1844)) {
                $this->success[$elem1844] = true;
              } else {
                $this->success []= $elem1844;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorstrValues_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter1845 => $iter1846)
          {
            if (is_scalar($iter1846)) {
            $xfer += $output->writeI64($iter1845);
            } else {
            $xfer += $output->writeI64($iter1846);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorstrValuesTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $operator = null;
  /**
   * @var \thrift\data\TObject[]
   */
  public $values = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operator',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'values',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['operator'])) {
        $this->operator = $vals['operator'];
      }
      if (isset($vals['values'])) {
        $this->values = $vals['values'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorstrValuesTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->values = array();
            $_size1847 = 0;
            $_etype1850 = 0;
            $xfer += $input->readListBegin($_etype1850, $_size1847);
            for ($_i1851 = 0; $_i1851 < $_size1847; ++$_i1851)
            {
              $elem1852 = null;
              $elem1852 = new \thrift\data\TObject();
              $xfer += $elem1852->read($input);
              $this->values []= $elem1852;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorstrValuesTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operator !== null) {
      $xfer += $output->writeFieldBegin('operator', TType::STRING, 2);
      $xfer += $output->writeString($this->operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values !== null) {
      if (!is_array($this->values)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('values', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->values));
        {
          foreach ($this->values as $iter1853)
          {
            $xfer += $iter1853->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 4);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorstrValuesTime_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorstrValuesTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size1854 = 0;
            $_etype1857 = 0;
            $xfer += $input->readSetBegin($_etype1857, $_size1854);
            for ($_i1858 = 0; $_i1858 < $_size1854; ++$_i1858)
            {
              $elem1859 = null;
              $xfer += $input->readI64($elem1859);
              if (is_scalar($elem1859)) {
                $this->success[$elem1859] = true;
              } else {
                $this->success []= $elem1859;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorstrValuesTime_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter1860 => $iter1861)
          {
            if (is_scalar($iter1861)) {
            $xfer += $output->writeI64($iter1860);
            } else {
            $xfer += $output->writeI64($iter1861);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorstrValuesTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $operator = null;
  /**
   * @var \thrift\data\TObject[]
   */
  public $values = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operator',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'values',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
            ),
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['operator'])) {
        $this->operator = $vals['operator'];
      }
      if (isset($vals['values'])) {
        $this->values = $vals['values'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorstrValuesTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->operator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->values = array();
            $_size1862 = 0;
            $_etype1865 = 0;
            $xfer += $input->readListBegin($_etype1865, $_size1862);
            for ($_i1866 = 0; $_i1866 < $_size1862; ++$_i1866)
            {
              $elem1867 = null;
              $elem1867 = new \thrift\data\TObject();
              $xfer += $elem1867->read($input);
              $this->values []= $elem1867;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorstrValuesTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operator !== null) {
      $xfer += $output->writeFieldBegin('operator', TType::STRING, 2);
      $xfer += $output->writeString($this->operator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->values !== null) {
      if (!is_array($this->values)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('values', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->values));
        {
          foreach ($this->values as $iter1868)
          {
            $xfer += $iter1868->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 4);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findKeyOperatorstrValuesTimestr_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findKeyOperatorstrValuesTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size1869 = 0;
            $_etype1872 = 0;
            $xfer += $input->readSetBegin($_etype1872, $_size1869);
            for ($_i1873 = 0; $_i1873 < $_size1869; ++$_i1873)
            {
              $elem1874 = null;
              $xfer += $input->readI64($elem1874);
              if (is_scalar($elem1874)) {
                $this->success[$elem1874] = true;
              } else {
                $this->success []= $elem1874;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findKeyOperatorstrValuesTimestr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter1875 => $iter1876)
          {
            if (is_scalar($iter1876)) {
            $xfer += $output->writeI64($iter1875);
            } else {
            $xfer += $output->writeI64($iter1876);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_search_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $query = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'query',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['query'])) {
        $this->query = $vals['query'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_search_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->query);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_search_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->query !== null) {
      $xfer += $output->writeFieldBegin('query', TType::STRING, 2);
      $xfer += $output->writeString($this->query);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_search_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_search_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::SET) {
            $this->success = array();
            $_size1877 = 0;
            $_etype1880 = 0;
            $xfer += $input->readSetBegin($_etype1880, $_size1877);
            for ($_i1881 = 0; $_i1881 < $_size1877; ++$_i1881)
            {
              $elem1882 = null;
              $xfer += $input->readI64($elem1882);
              if (is_scalar($elem1882)) {
                $this->success[$elem1882] = true;
              } else {
                $this->success []= $elem1882;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_search_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::SET, 0);
      {
        $output->writeSetBegin(TType::I64, count($this->success));
        {
          foreach ($this->success as $iter1883 => $iter1884)
          {
            if (is_scalar($iter1884)) {
            $xfer += $output->writeI64($iter1883);
            } else {
            $xfer += $output->writeI64($iter1884);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecord_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecord_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecord_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1885 = 0;
            $_ktype1886 = 0;
            $_vtype1887 = 0;
            $xfer += $input->readMapBegin($_ktype1886, $_vtype1887, $_size1885);
            for ($_i1889 = 0; $_i1889 < $_size1885; ++$_i1889)
            {
              $key1890 = 0;
              $val1891 = '';
              $xfer += $input->readI64($key1890);
              $xfer += $input->readString($val1891);
              $this->success[$key1890] = $val1891;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter1892 => $viter1893)
          {
            $xfer += $output->writeI64($kiter1892);
            $xfer += $output->writeString($viter1893);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStart_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStart_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStart_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 2);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStart_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStart_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1894 = 0;
            $_ktype1895 = 0;
            $_vtype1896 = 0;
            $xfer += $input->readMapBegin($_ktype1895, $_vtype1896, $_size1894);
            for ($_i1898 = 0; $_i1898 < $_size1894; ++$_i1898)
            {
              $key1899 = 0;
              $val1900 = '';
              $xfer += $input->readI64($key1899);
              $xfer += $input->readString($val1900);
              $this->success[$key1899] = $val1900;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStart_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter1901 => $viter1902)
          {
            $xfer += $output->writeI64($kiter1901);
            $xfer += $output->writeString($viter1902);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStartstr_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStartstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStartstr_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 2);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStartstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStartstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1903 = 0;
            $_ktype1904 = 0;
            $_vtype1905 = 0;
            $xfer += $input->readMapBegin($_ktype1904, $_vtype1905, $_size1903);
            for ($_i1907 = 0; $_i1907 < $_size1903; ++$_i1907)
            {
              $key1908 = 0;
              $val1909 = '';
              $xfer += $input->readI64($key1908);
              $xfer += $input->readString($val1909);
              $this->success[$key1908] = $val1909;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStartstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter1910 => $viter1911)
          {
            $xfer += $output->writeI64($kiter1910);
            $xfer += $output->writeString($viter1911);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStartEnd_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $tend = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'tend',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStartEnd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStartEnd_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 2);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::I64, 3);
      $xfer += $output->writeI64($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStartEnd_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStartEnd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1912 = 0;
            $_ktype1913 = 0;
            $_vtype1914 = 0;
            $xfer += $input->readMapBegin($_ktype1913, $_vtype1914, $_size1912);
            for ($_i1916 = 0; $_i1916 < $_size1912; ++$_i1916)
            {
              $key1917 = 0;
              $val1918 = '';
              $xfer += $input->readI64($key1917);
              $xfer += $input->readString($val1918);
              $this->success[$key1917] = $val1918;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStartEnd_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter1919 => $viter1920)
          {
            $xfer += $output->writeI64($kiter1919);
            $xfer += $output->writeString($viter1920);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStartstrEndstr_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var string
   */
  public $tend = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'tend',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStartstrEndstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStartstrEndstr_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 2);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::STRING, 3);
      $xfer += $output->writeString($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditRecordStartstrEndstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditRecordStartstrEndstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1921 = 0;
            $_ktype1922 = 0;
            $_vtype1923 = 0;
            $xfer += $input->readMapBegin($_ktype1922, $_vtype1923, $_size1921);
            for ($_i1925 = 0; $_i1925 < $_size1921; ++$_i1925)
            {
              $key1926 = 0;
              $val1927 = '';
              $xfer += $input->readI64($key1926);
              $xfer += $input->readString($val1927);
              $this->success[$key1926] = $val1927;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditRecordStartstrEndstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter1928 => $viter1929)
          {
            $xfer += $output->writeI64($kiter1928);
            $xfer += $output->writeString($viter1929);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecord_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1930 = 0;
            $_ktype1931 = 0;
            $_vtype1932 = 0;
            $xfer += $input->readMapBegin($_ktype1931, $_vtype1932, $_size1930);
            for ($_i1934 = 0; $_i1934 < $_size1930; ++$_i1934)
            {
              $key1935 = 0;
              $val1936 = '';
              $xfer += $input->readI64($key1935);
              $xfer += $input->readString($val1936);
              $this->success[$key1935] = $val1936;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter1937 => $viter1938)
          {
            $xfer += $output->writeI64($kiter1937);
            $xfer += $output->writeString($viter1938);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStart_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStart_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStart_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStart_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStart_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1939 = 0;
            $_ktype1940 = 0;
            $_vtype1941 = 0;
            $xfer += $input->readMapBegin($_ktype1940, $_vtype1941, $_size1939);
            for ($_i1943 = 0; $_i1943 < $_size1939; ++$_i1943)
            {
              $key1944 = 0;
              $val1945 = '';
              $xfer += $input->readI64($key1944);
              $xfer += $input->readString($val1945);
              $this->success[$key1944] = $val1945;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStart_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter1946 => $viter1947)
          {
            $xfer += $output->writeI64($kiter1946);
            $xfer += $output->writeString($viter1947);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStartstr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStartstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStartstr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 3);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStartstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStartstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1948 = 0;
            $_ktype1949 = 0;
            $_vtype1950 = 0;
            $xfer += $input->readMapBegin($_ktype1949, $_vtype1950, $_size1948);
            for ($_i1952 = 0; $_i1952 < $_size1948; ++$_i1952)
            {
              $key1953 = 0;
              $val1954 = '';
              $xfer += $input->readI64($key1953);
              $xfer += $input->readString($val1954);
              $this->success[$key1953] = $val1954;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStartstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter1955 => $viter1956)
          {
            $xfer += $output->writeI64($kiter1955);
            $xfer += $output->writeString($viter1956);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStartEnd_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $tend = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'tend',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStartEnd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStartEnd_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::I64, 4);
      $xfer += $output->writeI64($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStartEnd_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStartEnd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1957 = 0;
            $_ktype1958 = 0;
            $_vtype1959 = 0;
            $xfer += $input->readMapBegin($_ktype1958, $_vtype1959, $_size1957);
            for ($_i1961 = 0; $_i1961 < $_size1957; ++$_i1961)
            {
              $key1962 = 0;
              $val1963 = '';
              $xfer += $input->readI64($key1962);
              $xfer += $input->readString($val1963);
              $this->success[$key1962] = $val1963;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStartEnd_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter1964 => $viter1965)
          {
            $xfer += $output->writeI64($kiter1964);
            $xfer += $output->writeString($viter1965);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStartstrEndstr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var string
   */
  public $tend = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'tend',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStartstrEndstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStartstrEndstr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 3);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::STRING, 4);
      $xfer += $output->writeString($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_auditKeyRecordStartstrEndstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_auditKeyRecordStartstrEndstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1966 = 0;
            $_ktype1967 = 0;
            $_vtype1968 = 0;
            $xfer += $input->readMapBegin($_ktype1967, $_vtype1968, $_size1966);
            for ($_i1970 = 0; $_i1970 < $_size1966; ++$_i1970)
            {
              $key1971 = 0;
              $val1972 = '';
              $xfer += $input->readI64($key1971);
              $xfer += $input->readString($val1972);
              $this->success[$key1971] = $val1972;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_auditKeyRecordStartstrEndstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter1973 => $viter1974)
          {
            $xfer += $output->writeI64($kiter1973);
            $xfer += $output->writeString($viter1974);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecord_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecord_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1975 = 0;
            $_ktype1976 = 0;
            $_vtype1977 = 0;
            $xfer += $input->readMapBegin($_ktype1976, $_vtype1977, $_size1975);
            for ($_i1979 = 0; $_i1979 < $_size1975; ++$_i1979)
            {
              $key1980 = 0;
              $val1981 = array();
              $xfer += $input->readI64($key1980);
              $val1981 = array();
              $_size1982 = 0;
              $_etype1985 = 0;
              $xfer += $input->readSetBegin($_etype1985, $_size1982);
              for ($_i1986 = 0; $_i1986 < $_size1982; ++$_i1986)
              {
                $elem1987 = null;
                $elem1987 = new \thrift\data\TObject();
                $xfer += $elem1987->read($input);
                $val1981[$elem1987] = $elem1987;
			  }
			  $key1980 = (!is_integer($key1980) && !is_string($key1980)) ? serialize($key1980) : $key1980;
			  $this->success[$key1980] = $val1981;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecord_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter1988 => $viter1989)
          {
            $xfer += $output->writeI64($kiter1988);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter1989));
              {
                foreach ($viter1989 as $iter1990 => $iter1991)
                {
                  if (is_scalar($iter1991)) {
                  $xfer += $iter1990->write($output);
                  } else {
                  $xfer += $iter1991->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStart_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStart_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStart_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStart_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStart_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size1992 = 0;
            $_ktype1993 = 0;
            $_vtype1994 = 0;
            $xfer += $input->readMapBegin($_ktype1993, $_vtype1994, $_size1992);
            for ($_i1996 = 0; $_i1996 < $_size1992; ++$_i1996)
            {
              $key1997 = 0;
              $val1998 = array();
              $xfer += $input->readI64($key1997);
              $val1998 = array();
              $_size1999 = 0;
              $_etype2002 = 0;
              $xfer += $input->readSetBegin($_etype2002, $_size1999);
              for ($_i2003 = 0; $_i2003 < $_size1999; ++$_i2003)
              {
                $elem2004 = null;
                $elem2004 = new \thrift\data\TObject();
                $xfer += $elem2004->read($input);
                $val1998[$elem2004] = $elem2004;
			  }
			  $key1997 = (!is_integer($key1997) && !is_string($key1997)) ? serialize($key1997) : $key1997;
			  $this->success[$key1997] = $val1998;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStart_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter2005 => $viter2006)
          {
            $xfer += $output->writeI64($kiter2005);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter2006));
              {
                foreach ($viter2006 as $iter2007 => $iter2008)
                {
                  if (is_scalar($iter2008)) {
                  $xfer += $iter2007->write($output);
                  } else {
                  $xfer += $iter2008->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStartstr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStartstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStartstr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 3);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStartstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStartstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2009 = 0;
            $_ktype2010 = 0;
            $_vtype2011 = 0;
            $xfer += $input->readMapBegin($_ktype2010, $_vtype2011, $_size2009);
            for ($_i2013 = 0; $_i2013 < $_size2009; ++$_i2013)
            {
              $key2014 = 0;
              $val2015 = array();
              $xfer += $input->readI64($key2014);
              $val2015 = array();
              $_size2016 = 0;
              $_etype2019 = 0;
              $xfer += $input->readSetBegin($_etype2019, $_size2016);
              for ($_i2020 = 0; $_i2020 < $_size2016; ++$_i2020)
              {
                $elem2021 = null;
                $elem2021 = new \thrift\data\TObject();
                $xfer += $elem2021->read($input);
                $val2015[$elem2021] = $elem2021;
			  }
			  $key2014 = (!is_integer($key2014) && !is_string($key2014)) ? serialize($key2014) : $key2014;
			  $this->success[$key2014] = $val2015;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStartstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter2022 => $viter2023)
          {
            $xfer += $output->writeI64($kiter2022);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter2023));
              {
                foreach ($viter2023 as $iter2024 => $iter2025)
                {
                  if (is_scalar($iter2025)) {
                  $xfer += $iter2024->write($output);
                  } else {
                  $xfer += $iter2025->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStartEnd_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $tend = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'tend',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStartEnd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStartEnd_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::I64, 4);
      $xfer += $output->writeI64($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStartEnd_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStartEnd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2026 = 0;
            $_ktype2027 = 0;
            $_vtype2028 = 0;
            $xfer += $input->readMapBegin($_ktype2027, $_vtype2028, $_size2026);
            for ($_i2030 = 0; $_i2030 < $_size2026; ++$_i2030)
            {
              $key2031 = 0;
              $val2032 = array();
              $xfer += $input->readI64($key2031);
              $val2032 = array();
              $_size2033 = 0;
              $_etype2036 = 0;
              $xfer += $input->readSetBegin($_etype2036, $_size2033);
              for ($_i2037 = 0; $_i2037 < $_size2033; ++$_i2037)
              {
                $elem2038 = null;
                $elem2038 = new \thrift\data\TObject();
                $xfer += $elem2038->read($input);
                $val2032[$elem2038] = $elem2038;
			  }
			  $key2031 = (!is_integer($key2031) && !is_string($key2031)) ? serialize($key2031) : $key2031;
			  $this->success[$key2031] = $val2032;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStartEnd_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter2039 => $viter2040)
          {
            $xfer += $output->writeI64($kiter2039);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter2040));
              {
                foreach ($viter2040 as $iter2041 => $iter2042)
                {
                  if (is_scalar($iter2042)) {
                  $xfer += $iter2041->write($output);
                  } else {
                  $xfer += $iter2042->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStartstrEndstr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var string
   */
  public $tend = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'tend',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStartstrEndstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStartstrEndstr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 3);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::STRING, 4);
      $xfer += $output->writeString($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_chronologizeKeyRecordStartstrEndstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_chronologizeKeyRecordStartstrEndstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2043 = 0;
            $_ktype2044 = 0;
            $_vtype2045 = 0;
            $xfer += $input->readMapBegin($_ktype2044, $_vtype2045, $_size2043);
            for ($_i2047 = 0; $_i2047 < $_size2043; ++$_i2047)
            {
              $key2048 = 0;
              $val2049 = array();
              $xfer += $input->readI64($key2048);
              $val2049 = array();
              $_size2050 = 0;
              $_etype2053 = 0;
              $xfer += $input->readSetBegin($_etype2053, $_size2050);
              for ($_i2054 = 0; $_i2054 < $_size2050; ++$_i2054)
              {
                $elem2055 = null;
                $elem2055 = new \thrift\data\TObject();
                $xfer += $elem2055->read($input);
                $val2049[$elem2055] = $elem2055;
			  }
			  $key2048 = (!is_integer($key2048) && !is_string($key2048)) ? serialize($key2048) : $key2048;
			  $this->success[$key2048] = $val2049;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_chronologizeKeyRecordStartstrEndstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter2056 => $viter2057)
          {
            $xfer += $output->writeI64($kiter2056);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter2057));
              {
                foreach ($viter2057 as $iter2058 => $iter2059)
                {
                  if (is_scalar($iter2059)) {
                  $xfer += $iter2058->write($output);
                  } else {
                  $xfer += $iter2059->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffRecordStart_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffRecordStart_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffRecordStart_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 2);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffRecordStart_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffRecordStart_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2060 = 0;
            $_ktype2061 = 0;
            $_vtype2062 = 0;
            $xfer += $input->readMapBegin($_ktype2061, $_vtype2062, $_size2060);
            for ($_i2064 = 0; $_i2064 < $_size2060; ++$_i2064)
            {
              $key2065 = '';
              $val2066 = array();
              $xfer += $input->readString($key2065);
              $val2066 = array();
              $_size2067 = 0;
              $_ktype2068 = 0;
              $_vtype2069 = 0;
              $xfer += $input->readMapBegin($_ktype2068, $_vtype2069, $_size2067);
              for ($_i2071 = 0; $_i2071 < $_size2067; ++$_i2071)
              {
                $key2072 = 0;
                $val2073 = array();
                $xfer += $input->readI32($key2072);
                $val2073 = array();
                $_size2074 = 0;
                $_etype2077 = 0;
                $xfer += $input->readSetBegin($_etype2077, $_size2074);
                for ($_i2078 = 0; $_i2078 < $_size2074; ++$_i2078)
                {
                  $elem2079 = null;
                  $elem2079 = new \thrift\data\TObject();
                  $xfer += $elem2079->read($input);
                  if (is_scalar($elem2079)) {
                    $val2073[$elem2079] = true;
                  } else {
                    $val2073 []= $elem2079;
                  }
                }
                $xfer += $input->readSetEnd();
                $val2066[$key2072] = $val2073;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key2065] = $val2066;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffRecordStart_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter2080 => $viter2081)
          {
            $xfer += $output->writeString($kiter2080);
            {
              $output->writeMapBegin(TType::I32, TType::SET, count($viter2081));
              {
                foreach ($viter2081 as $kiter2082 => $viter2083)
                {
                  $xfer += $output->writeI32($kiter2082);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter2083));
                    {
                      foreach ($viter2083 as $iter2084 => $iter2085)
                      {
                        if (is_scalar($iter2085)) {
                        $xfer += $iter2084->write($output);
                        } else {
                        $xfer += $iter2085->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffRecordStartstr_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffRecordStartstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffRecordStartstr_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 2);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffRecordStartstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffRecordStartstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2086 = 0;
            $_ktype2087 = 0;
            $_vtype2088 = 0;
            $xfer += $input->readMapBegin($_ktype2087, $_vtype2088, $_size2086);
            for ($_i2090 = 0; $_i2090 < $_size2086; ++$_i2090)
            {
              $key2091 = '';
              $val2092 = array();
              $xfer += $input->readString($key2091);
              $val2092 = array();
              $_size2093 = 0;
              $_ktype2094 = 0;
              $_vtype2095 = 0;
              $xfer += $input->readMapBegin($_ktype2094, $_vtype2095, $_size2093);
              for ($_i2097 = 0; $_i2097 < $_size2093; ++$_i2097)
              {
                $key2098 = 0;
                $val2099 = array();
                $xfer += $input->readI32($key2098);
                $val2099 = array();
                $_size2100 = 0;
                $_etype2103 = 0;
                $xfer += $input->readSetBegin($_etype2103, $_size2100);
                for ($_i2104 = 0; $_i2104 < $_size2100; ++$_i2104)
                {
                  $elem2105 = null;
                  $elem2105 = new \thrift\data\TObject();
                  $xfer += $elem2105->read($input);
                  if (is_scalar($elem2105)) {
                    $val2099[$elem2105] = true;
                  } else {
                    $val2099 []= $elem2105;
                  }
                }
                $xfer += $input->readSetEnd();
                $val2092[$key2098] = $val2099;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key2091] = $val2092;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffRecordStartstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter2106 => $viter2107)
          {
            $xfer += $output->writeString($kiter2106);
            {
              $output->writeMapBegin(TType::I32, TType::SET, count($viter2107));
              {
                foreach ($viter2107 as $kiter2108 => $viter2109)
                {
                  $xfer += $output->writeI32($kiter2108);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter2109));
                    {
                      foreach ($viter2109 as $iter2110 => $iter2111)
                      {
                        if (is_scalar($iter2111)) {
                        $xfer += $iter2110->write($output);
                        } else {
                        $xfer += $iter2111->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffRecordStartEnd_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $tend = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'tend',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffRecordStartEnd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffRecordStartEnd_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 2);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::I64, 3);
      $xfer += $output->writeI64($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffRecordStartEnd_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffRecordStartEnd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2112 = 0;
            $_ktype2113 = 0;
            $_vtype2114 = 0;
            $xfer += $input->readMapBegin($_ktype2113, $_vtype2114, $_size2112);
            for ($_i2116 = 0; $_i2116 < $_size2112; ++$_i2116)
            {
              $key2117 = '';
              $val2118 = array();
              $xfer += $input->readString($key2117);
              $val2118 = array();
              $_size2119 = 0;
              $_ktype2120 = 0;
              $_vtype2121 = 0;
              $xfer += $input->readMapBegin($_ktype2120, $_vtype2121, $_size2119);
              for ($_i2123 = 0; $_i2123 < $_size2119; ++$_i2123)
              {
                $key2124 = 0;
                $val2125 = array();
                $xfer += $input->readI32($key2124);
                $val2125 = array();
                $_size2126 = 0;
                $_etype2129 = 0;
                $xfer += $input->readSetBegin($_etype2129, $_size2126);
                for ($_i2130 = 0; $_i2130 < $_size2126; ++$_i2130)
                {
                  $elem2131 = null;
                  $elem2131 = new \thrift\data\TObject();
                  $xfer += $elem2131->read($input);
                  if (is_scalar($elem2131)) {
                    $val2125[$elem2131] = true;
                  } else {
                    $val2125 []= $elem2131;
                  }
                }
                $xfer += $input->readSetEnd();
                $val2118[$key2124] = $val2125;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key2117] = $val2118;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffRecordStartEnd_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter2132 => $viter2133)
          {
            $xfer += $output->writeString($kiter2132);
            {
              $output->writeMapBegin(TType::I32, TType::SET, count($viter2133));
              {
                foreach ($viter2133 as $kiter2134 => $viter2135)
                {
                  $xfer += $output->writeI32($kiter2134);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter2135));
                    {
                      foreach ($viter2135 as $iter2136 => $iter2137)
                      {
                        if (is_scalar($iter2137)) {
                        $xfer += $iter2136->write($output);
                        } else {
                        $xfer += $iter2137->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffRecordStartstrEndstr_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var string
   */
  public $tend = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'tend',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffRecordStartstrEndstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffRecordStartstrEndstr_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 2);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::STRING, 3);
      $xfer += $output->writeString($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffRecordStartstrEndstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\thrift\data\TObject',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffRecordStartstrEndstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2138 = 0;
            $_ktype2139 = 0;
            $_vtype2140 = 0;
            $xfer += $input->readMapBegin($_ktype2139, $_vtype2140, $_size2138);
            for ($_i2142 = 0; $_i2142 < $_size2138; ++$_i2142)
            {
              $key2143 = '';
              $val2144 = array();
              $xfer += $input->readString($key2143);
              $val2144 = array();
              $_size2145 = 0;
              $_ktype2146 = 0;
              $_vtype2147 = 0;
              $xfer += $input->readMapBegin($_ktype2146, $_vtype2147, $_size2145);
              for ($_i2149 = 0; $_i2149 < $_size2145; ++$_i2149)
              {
                $key2150 = 0;
                $val2151 = array();
                $xfer += $input->readI32($key2150);
                $val2151 = array();
                $_size2152 = 0;
                $_etype2155 = 0;
                $xfer += $input->readSetBegin($_etype2155, $_size2152);
                for ($_i2156 = 0; $_i2156 < $_size2152; ++$_i2156)
                {
                  $elem2157 = null;
                  $elem2157 = new \thrift\data\TObject();
                  $xfer += $elem2157->read($input);
                  if (is_scalar($elem2157)) {
                    $val2151[$elem2157] = true;
                  } else {
                    $val2151 []= $elem2157;
                  }
                }
                $xfer += $input->readSetEnd();
                $val2144[$key2150] = $val2151;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key2143] = $val2144;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffRecordStartstrEndstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter2158 => $viter2159)
          {
            $xfer += $output->writeString($kiter2158);
            {
              $output->writeMapBegin(TType::I32, TType::SET, count($viter2159));
              {
                foreach ($viter2159 as $kiter2160 => $viter2161)
                {
                  $xfer += $output->writeI32($kiter2160);
                  {
                    $output->writeSetBegin(TType::STRUCT, count($viter2161));
                    {
                      foreach ($viter2161 as $iter2162 => $iter2163)
                      {
                        if (is_scalar($iter2163)) {
                        $xfer += $iter2162->write($output);
                        } else {
                        $xfer += $iter2163->write($output);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyRecordStart_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyRecordStart_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyRecordStart_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyRecordStart_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyRecordStart_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2164 = 0;
            $_ktype2165 = 0;
            $_vtype2166 = 0;
            $xfer += $input->readMapBegin($_ktype2165, $_vtype2166, $_size2164);
            for ($_i2168 = 0; $_i2168 < $_size2164; ++$_i2168)
            {
              $key2169 = 0;
              $val2170 = array();
              $xfer += $input->readI32($key2169);
              $val2170 = array();
              $_size2171 = 0;
              $_etype2174 = 0;
              $xfer += $input->readSetBegin($_etype2174, $_size2171);
              for ($_i2175 = 0; $_i2175 < $_size2171; ++$_i2175)
              {
                $elem2176 = null;
                $elem2176 = new \thrift\data\TObject();
                $xfer += $elem2176->read($input);
                $val2170[$elem2176] = $elem2176;
			  }
			  $key2169 = (!is_integer($key2169) && !is_string($key2169)) ? serialize($key2169) : $key2169;
			  $this->success[$key2169] = $val2170;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyRecordStart_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I32, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter2177 => $viter2178)
          {
            $xfer += $output->writeI32($kiter2177);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter2178));
              {
                foreach ($viter2178 as $iter2179 => $iter2180)
                {
                  if (is_scalar($iter2180)) {
                  $xfer += $iter2179->write($output);
                  } else {
                  $xfer += $iter2180->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyRecordStartstr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyRecordStartstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyRecordStartstr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 3);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyRecordStartstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyRecordStartstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2181 = 0;
            $_ktype2182 = 0;
            $_vtype2183 = 0;
            $xfer += $input->readMapBegin($_ktype2182, $_vtype2183, $_size2181);
            for ($_i2185 = 0; $_i2185 < $_size2181; ++$_i2185)
            {
              $key2186 = 0;
              $val2187 = array();
              $xfer += $input->readI32($key2186);
              $val2187 = array();
              $_size2188 = 0;
              $_etype2191 = 0;
              $xfer += $input->readSetBegin($_etype2191, $_size2188);
              for ($_i2192 = 0; $_i2192 < $_size2188; ++$_i2192)
              {
                $elem2193 = null;
                $elem2193 = new \thrift\data\TObject();
                $xfer += $elem2193->read($input);
                $val2187[$elem2193] = $elem2193;
			  }
			  $key2186 = (!is_integer($key2186) && !is_string($key2186)) ? serialize($key2186) : $key2186;
			  $this->success[$key2186] = $val2187;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyRecordStartstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I32, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter2194 => $viter2195)
          {
            $xfer += $output->writeI32($kiter2194);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter2195));
              {
                foreach ($viter2195 as $iter2196 => $iter2197)
                {
                  if (is_scalar($iter2197)) {
                  $xfer += $iter2196->write($output);
                  } else {
                  $xfer += $iter2197->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyRecordStartEnd_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $tend = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'tend',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyRecordStartEnd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyRecordStartEnd_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 3);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::I64, 4);
      $xfer += $output->writeI64($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyRecordStartEnd_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyRecordStartEnd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2198 = 0;
            $_ktype2199 = 0;
            $_vtype2200 = 0;
            $xfer += $input->readMapBegin($_ktype2199, $_vtype2200, $_size2198);
            for ($_i2202 = 0; $_i2202 < $_size2198; ++$_i2202)
            {
              $key2203 = 0;
              $val2204 = array();
              $xfer += $input->readI32($key2203);
              $val2204 = array();
              $_size2205 = 0;
              $_etype2208 = 0;
              $xfer += $input->readSetBegin($_etype2208, $_size2205);
              for ($_i2209 = 0; $_i2209 < $_size2205; ++$_i2209)
              {
                $elem2210 = null;
                $elem2210 = new \thrift\data\TObject();
                $xfer += $elem2210->read($input);
                $val2204[$elem2210] = $elem2210;
			  }
			  $key2203 = (!is_integer($key2203) && !is_string($key2203)) ? serialize($key2203) : $key2203;
			  $this->success[$key2203] = $val2204;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyRecordStartEnd_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I32, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter2211 => $viter2212)
          {
            $xfer += $output->writeI32($kiter2211);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter2212));
              {
                foreach ($viter2212 as $iter2213 => $iter2214)
                {
                  if (is_scalar($iter2214)) {
                  $xfer += $iter2213->write($output);
                  } else {
                  $xfer += $iter2214->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyRecordStartstrEndstr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var string
   */
  public $tend = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'tend',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyRecordStartstrEndstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyRecordStartstrEndstr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 3);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::STRING, 4);
      $xfer += $output->writeString($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyRecordStartstrEndstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\thrift\data\TObject',
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyRecordStartstrEndstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2215 = 0;
            $_ktype2216 = 0;
            $_vtype2217 = 0;
            $xfer += $input->readMapBegin($_ktype2216, $_vtype2217, $_size2215);
            for ($_i2219 = 0; $_i2219 < $_size2215; ++$_i2219)
            {
              $key2220 = 0;
              $val2221 = array();
              $xfer += $input->readI32($key2220);
              $val2221 = array();
              $_size2222 = 0;
              $_etype2225 = 0;
              $xfer += $input->readSetBegin($_etype2225, $_size2222);
              for ($_i2226 = 0; $_i2226 < $_size2222; ++$_i2226)
              {
                $elem2227 = null;
                $elem2227 = new \thrift\data\TObject();
                $xfer += $elem2227->read($input);
                $val2221[$elem2227] = $elem2227;
			  }
			  $key2220 = (!is_integer($key2220) && !is_string($key2220)) ? serialize($key2220) : $key2220;
			  $this->success[$key2220] = $val2221;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyRecordStartstrEndstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I32, TType::SET, count($this->success));
        {
          foreach ($this->success as $kiter2228 => $viter2229)
          {
            $xfer += $output->writeI32($kiter2228);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter2229));
              {
                foreach ($viter2229 as $iter2230 => $iter2231)
                {
                  if (is_scalar($iter2231)) {
                  $xfer += $iter2230->write($output);
                  } else {
                  $xfer += $iter2231->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyStart_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyStart_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyStart_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 2);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyStart_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRUCT,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::I64,
              'elem' => array(
                'type' => TType::I64,
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyStart_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2232 = 0;
            $_ktype2233 = 0;
            $_vtype2234 = 0;
            $xfer += $input->readMapBegin($_ktype2233, $_vtype2234, $_size2232);
            for ($_i2236 = 0; $_i2236 < $_size2232; ++$_i2236)
            {
              $key2237 = new \thrift\data\TObject();
              $val2238 = array();
              $key2237 = new \thrift\data\TObject();
              $xfer += $key2237->read($input);
              $val2238 = array();
              $_size2239 = 0;
              $_ktype2240 = 0;
              $_vtype2241 = 0;
              $xfer += $input->readMapBegin($_ktype2240, $_vtype2241, $_size2239);
              for ($_i2243 = 0; $_i2243 < $_size2239; ++$_i2243)
              {
                $key2244 = 0;
                $val2245 = array();
                $xfer += $input->readI32($key2244);
                $val2245 = array();
                $_size2246 = 0;
                $_etype2249 = 0;
                $xfer += $input->readSetBegin($_etype2249, $_size2246);
                for ($_i2250 = 0; $_i2250 < $_size2246; ++$_i2250)
                {
                  $elem2251 = null;
                  $xfer += $input->readI64($elem2251);
                  if (is_scalar($elem2251)) {
                    $val2245[$elem2251] = true;
                  } else {
                    $val2245 []= $elem2251;
                  }
                }
                $xfer += $input->readSetEnd();
                $val2238[$key2244] = $val2245;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key2237] = $val2238;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyStart_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRUCT, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter2252 => $viter2253)
          {
            $xfer += $kiter2252->write($output);
            {
              $output->writeMapBegin(TType::I32, TType::SET, count($viter2253));
              {
                foreach ($viter2253 as $kiter2254 => $viter2255)
                {
                  $xfer += $output->writeI32($kiter2254);
                  {
                    $output->writeSetBegin(TType::I64, count($viter2255));
                    {
                      foreach ($viter2255 as $iter2256 => $iter2257)
                      {
                        if (is_scalar($iter2257)) {
                        $xfer += $output->writeI64($iter2256);
                        } else {
                        $xfer += $output->writeI64($iter2257);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyStartstr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyStartstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyStartstr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 2);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyStartstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRUCT,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::I64,
              'elem' => array(
                'type' => TType::I64,
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyStartstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2258 = 0;
            $_ktype2259 = 0;
            $_vtype2260 = 0;
            $xfer += $input->readMapBegin($_ktype2259, $_vtype2260, $_size2258);
            for ($_i2262 = 0; $_i2262 < $_size2258; ++$_i2262)
            {
              $key2263 = new \thrift\data\TObject();
              $val2264 = array();
              $key2263 = new \thrift\data\TObject();
              $xfer += $key2263->read($input);
              $val2264 = array();
              $_size2265 = 0;
              $_ktype2266 = 0;
              $_vtype2267 = 0;
              $xfer += $input->readMapBegin($_ktype2266, $_vtype2267, $_size2265);
              for ($_i2269 = 0; $_i2269 < $_size2265; ++$_i2269)
              {
                $key2270 = 0;
                $val2271 = array();
                $xfer += $input->readI32($key2270);
                $val2271 = array();
                $_size2272 = 0;
                $_etype2275 = 0;
                $xfer += $input->readSetBegin($_etype2275, $_size2272);
                for ($_i2276 = 0; $_i2276 < $_size2272; ++$_i2276)
                {
                  $elem2277 = null;
                  $xfer += $input->readI64($elem2277);
                  if (is_scalar($elem2277)) {
                    $val2271[$elem2277] = true;
                  } else {
                    $val2271 []= $elem2277;
                  }
                }
                $xfer += $input->readSetEnd();
                $val2264[$key2270] = $val2271;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key2263] = $val2264;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyStartstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRUCT, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter2278 => $viter2279)
          {
            $xfer += $kiter2278->write($output);
            {
              $output->writeMapBegin(TType::I32, TType::SET, count($viter2279));
              {
                foreach ($viter2279 as $kiter2280 => $viter2281)
                {
                  $xfer += $output->writeI32($kiter2280);
                  {
                    $output->writeSetBegin(TType::I64, count($viter2281));
                    {
                      foreach ($viter2281 as $iter2282 => $iter2283)
                      {
                        if (is_scalar($iter2283)) {
                        $xfer += $output->writeI64($iter2282);
                        } else {
                        $xfer += $output->writeI64($iter2283);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyStartEnd_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $start = null;
  /**
   * @var int
   */
  public $tend = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'tend',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyStartEnd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyStartEnd_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::I64, 2);
      $xfer += $output->writeI64($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::I64, 3);
      $xfer += $output->writeI64($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyStartEnd_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRUCT,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::I64,
              'elem' => array(
                'type' => TType::I64,
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyStartEnd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2284 = 0;
            $_ktype2285 = 0;
            $_vtype2286 = 0;
            $xfer += $input->readMapBegin($_ktype2285, $_vtype2286, $_size2284);
            for ($_i2288 = 0; $_i2288 < $_size2284; ++$_i2288)
            {
              $key2289 = new \thrift\data\TObject();
              $val2290 = array();
              $key2289 = new \thrift\data\TObject();
              $xfer += $key2289->read($input);
              $val2290 = array();
              $_size2291 = 0;
              $_ktype2292 = 0;
              $_vtype2293 = 0;
              $xfer += $input->readMapBegin($_ktype2292, $_vtype2293, $_size2291);
              for ($_i2295 = 0; $_i2295 < $_size2291; ++$_i2295)
              {
                $key2296 = 0;
                $val2297 = array();
                $xfer += $input->readI32($key2296);
                $val2297 = array();
                $_size2298 = 0;
                $_etype2301 = 0;
                $xfer += $input->readSetBegin($_etype2301, $_size2298);
                for ($_i2302 = 0; $_i2302 < $_size2298; ++$_i2302)
                {
                  $elem2303 = null;
                  $xfer += $input->readI64($elem2303);
                  if (is_scalar($elem2303)) {
                    $val2297[$elem2303] = true;
                  } else {
                    $val2297 []= $elem2303;
                  }
                }
                $xfer += $input->readSetEnd();
                $val2290[$key2296] = $val2297;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key2289] = $val2290;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyStartEnd_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRUCT, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter2304 => $viter2305)
          {
            $xfer += $kiter2304->write($output);
            {
              $output->writeMapBegin(TType::I32, TType::SET, count($viter2305));
              {
                foreach ($viter2305 as $kiter2306 => $viter2307)
                {
                  $xfer += $output->writeI32($kiter2306);
                  {
                    $output->writeSetBegin(TType::I64, count($viter2307));
                    {
                      foreach ($viter2307 as $iter2308 => $iter2309)
                      {
                        if (is_scalar($iter2309)) {
                        $xfer += $output->writeI64($iter2308);
                        } else {
                        $xfer += $output->writeI64($iter2309);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyStartstrEndstr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $start = null;
  /**
   * @var string
   */
  public $tend = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'tend',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['start'])) {
        $this->start = $vals['start'];
      }
      if (isset($vals['tend'])) {
        $this->tend = $vals['tend'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyStartstrEndstr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->start);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyStartstrEndstr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start !== null) {
      $xfer += $output->writeFieldBegin('start', TType::STRING, 2);
      $xfer += $output->writeString($this->start);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tend !== null) {
      $xfer += $output->writeFieldBegin('tend', TType::STRING, 3);
      $xfer += $output->writeString($this->tend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_diffKeyStartstrEndstr_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRUCT,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRUCT,
            'class' => '\thrift\data\TObject',
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::SET,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::SET,
              'etype' => TType::I64,
              'elem' => array(
                'type' => TType::I64,
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_diffKeyStartstrEndstr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2310 = 0;
            $_ktype2311 = 0;
            $_vtype2312 = 0;
            $xfer += $input->readMapBegin($_ktype2311, $_vtype2312, $_size2310);
            for ($_i2314 = 0; $_i2314 < $_size2310; ++$_i2314)
            {
              $key2315 = new \thrift\data\TObject();
              $val2316 = array();
              $key2315 = new \thrift\data\TObject();
              $xfer += $key2315->read($input);
              $val2316 = array();
              $_size2317 = 0;
              $_ktype2318 = 0;
              $_vtype2319 = 0;
              $xfer += $input->readMapBegin($_ktype2318, $_vtype2319, $_size2317);
              for ($_i2321 = 0; $_i2321 < $_size2317; ++$_i2321)
              {
                $key2322 = 0;
                $val2323 = array();
                $xfer += $input->readI32($key2322);
                $val2323 = array();
                $_size2324 = 0;
                $_etype2327 = 0;
                $xfer += $input->readSetBegin($_etype2327, $_size2324);
                for ($_i2328 = 0; $_i2328 < $_size2324; ++$_i2328)
                {
                  $elem2329 = null;
                  $xfer += $input->readI64($elem2329);
                  if (is_scalar($elem2329)) {
                    $val2323[$elem2329] = true;
                  } else {
                    $val2323 []= $elem2329;
                  }
                }
                $xfer += $input->readSetEnd();
                $val2316[$key2322] = $val2323;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key2315] = $val2316;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_diffKeyStartstrEndstr_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRUCT, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter2330 => $viter2331)
          {
            $xfer += $kiter2330->write($output);
            {
              $output->writeMapBegin(TType::I32, TType::SET, count($viter2331));
              {
                foreach ($viter2331 as $kiter2332 => $viter2333)
                {
                  $xfer += $output->writeI32($kiter2332);
                  {
                    $output->writeSetBegin(TType::I64, count($viter2333));
                    {
                      foreach ($viter2333 as $iter2334 => $iter2335)
                      {
                        if (is_scalar($iter2335)) {
                        $xfer += $output->writeI64($iter2334);
                        } else {
                        $xfer += $output->writeI64($iter2335);
                        }
                      }
                    }
                    $output->writeSetEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordsTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size2336 = 0;
            $_etype2339 = 0;
            $xfer += $input->readListBegin($_etype2339, $_size2336);
            for ($_i2340 = 0; $_i2340 < $_size2336; ++$_i2340)
            {
              $elem2341 = null;
              $xfer += $input->readString($elem2341);
              $this->keys []= $elem2341;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size2342 = 0;
            $_etype2345 = 0;
            $xfer += $input->readListBegin($_etype2345, $_size2342);
            for ($_i2346 = 0; $_i2346 < $_size2342; ++$_i2346)
            {
              $elem2347 = null;
              $xfer += $input->readI64($elem2347);
              $this->records []= $elem2347;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordsTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter2348)
          {
            $xfer += $output->writeString($iter2348);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter2349)
          {
            $xfer += $output->writeI64($iter2349);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordsTime_result {
  static $_TSPEC;

  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordsTime_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size2350 = 0;
            $_etype2353 = 0;
            $xfer += $input->readListBegin($_etype2353, $_size2350);
            for ($_i2354 = 0; $_i2354 < $_size2350; ++$_i2354)
            {
              $elem2355 = null;
              $xfer += $input->readString($elem2355);
              $this->keys []= $elem2355;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size2356 = 0;
            $_etype2359 = 0;
            $xfer += $input->readListBegin($_etype2359, $_size2356);
            for ($_i2360 = 0; $_i2360 < $_size2356; ++$_i2360)
            {
              $elem2361 = null;
              $xfer += $input->readI64($elem2361);
              $this->records []= $elem2361;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordsTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter2362)
          {
            $xfer += $output->writeString($iter2362);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter2363)
          {
            $xfer += $output->writeI64($iter2363);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordsTimestr_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordTime_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size2364 = 0;
            $_etype2367 = 0;
            $xfer += $input->readListBegin($_etype2367, $_size2364);
            for ($_i2368 = 0; $_i2368 < $_size2364; ++$_i2368)
            {
              $elem2369 = null;
              $xfer += $input->readString($elem2369);
              $this->keys []= $elem2369;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordTime_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter2370)
          {
            $xfer += $output->writeString($iter2370);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordTime_result {
  static $_TSPEC;

  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordTime_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $keys = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size2371 = 0;
            $_etype2374 = 0;
            $xfer += $input->readListBegin($_etype2374, $_size2371);
            for ($_i2375 = 0; $_i2375 < $_size2371; ++$_i2375)
            {
              $elem2376 = null;
              $xfer += $input->readString($elem2376);
              $this->keys []= $elem2376;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordTimestr_args');
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter2377)
          {
            $xfer += $output->writeString($iter2377);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeysRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeysRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeysRecordTimestr_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordsTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordsTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size2378 = 0;
            $_etype2381 = 0;
            $xfer += $input->readListBegin($_etype2381, $_size2378);
            for ($_i2382 = 0; $_i2382 < $_size2378; ++$_i2382)
            {
              $elem2383 = null;
              $xfer += $input->readI64($elem2383);
              $this->records []= $elem2383;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordsTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter2384)
          {
            $xfer += $output->writeI64($iter2384);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordsTime_result {
  static $_TSPEC;

  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordsTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordsTime_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordsTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordsTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size2385 = 0;
            $_etype2388 = 0;
            $xfer += $input->readListBegin($_etype2388, $_size2385);
            for ($_i2389 = 0; $_i2389 < $_size2385; ++$_i2389)
            {
              $elem2390 = null;
              $xfer += $input->readI64($elem2390);
              $this->records []= $elem2390;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordsTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter2391)
          {
            $xfer += $output->writeI64($iter2391);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordsTimestr_result {
  static $_TSPEC;

  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordsTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordsTimestr_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordTime_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var int
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordTime_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordTime_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordTime_result {
  static $_TSPEC;

  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordTime_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordTime_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordTimestr_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var string
   */
  public $timestamp = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordTimestr_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordTimestr_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 2);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 3);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_revertKeyRecordTimestr_result {
  static $_TSPEC;

  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_revertKeyRecordTimestr_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_revertKeyRecordTimestr_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_pingRecords_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $records = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_pingRecords_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size2392 = 0;
            $_etype2395 = 0;
            $xfer += $input->readListBegin($_etype2395, $_size2392);
            for ($_i2396 = 0; $_i2396 < $_size2392; ++$_i2396)
            {
              $elem2397 = null;
              $xfer += $input->readI64($elem2397);
              $this->records []= $elem2397;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_pingRecords_args');
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->records));
        {
          foreach ($this->records as $iter2398)
          {
            $xfer += $output->writeI64($iter2398);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_pingRecords_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::BOOL,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::BOOL,
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_pingRecords_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size2399 = 0;
            $_ktype2400 = 0;
            $_vtype2401 = 0;
            $xfer += $input->readMapBegin($_ktype2400, $_vtype2401, $_size2399);
            for ($_i2403 = 0; $_i2403 < $_size2399; ++$_i2403)
            {
              $key2404 = 0;
              $val2405 = false;
              $xfer += $input->readI64($key2404);
              $xfer += $input->readBool($val2405);
              $this->success[$key2404] = $val2405;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_pingRecords_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::BOOL, count($this->success));
        {
          foreach ($this->success as $kiter2406 => $viter2407)
          {
            $xfer += $output->writeI64($kiter2406);
            $xfer += $output->writeBool($viter2407);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_pingRecord_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_pingRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_pingRecord_args');
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 1);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 3);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_pingRecord_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_pingRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_pingRecord_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyAndSwap_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $expected = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\data\TObject
   */
  public $replacement = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'expected',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'replacement',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        5 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        6 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        7 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['expected'])) {
        $this->expected = $vals['expected'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['replacement'])) {
        $this->replacement = $vals['replacement'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyAndSwap_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->expected = new \thrift\data\TObject();
            $xfer += $this->expected->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->replacement = new \thrift\data\TObject();
            $xfer += $this->replacement->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyAndSwap_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expected !== null) {
      if (!is_object($this->expected)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('expected', TType::STRUCT, 2);
      $xfer += $this->expected->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replacement !== null) {
      if (!is_object($this->replacement)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('replacement', TType::STRUCT, 4);
      $xfer += $this->replacement->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 5);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 6);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 7);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyAndSwap_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyAndSwap_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyAndSwap_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyOrSet_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $value = null;
  /**
   * @var int
   */
  public $record = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'record',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        5 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        6 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['record'])) {
        $this->record = $vals['record'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyOrSet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyOrSet_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record !== null) {
      $xfer += $output->writeFieldBegin('record', TType::I64, 3);
      $xfer += $output->writeI64($this->record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 4);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 5);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 6);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_verifyOrSet_result {
  static $_TSPEC;

  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\InvalidArgumentException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_verifyOrSet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_verifyOrSet_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findOrAddKeyValue_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var \thrift\data\TObject
   */
  public $value = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TObject',
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findOrAddKeyValue_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->value = new \thrift\data\TObject();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findOrAddKeyValue_args');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 2);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findOrAddKeyValue_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\DuplicateEntryException
   */
  public $ex3 = null;
  /**
   * @var \thrift\exceptions\InvalidArgumentException
   */
  public $ex4 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\DuplicateEntryException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\InvalidArgumentException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findOrAddKeyValue_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\DuplicateEntryException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \thrift\exceptions\InvalidArgumentException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findOrAddKeyValue_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findOrInsertCriteriaJson_args {
  static $_TSPEC;

  /**
   * @var \thrift\data\TCriteria
   */
  public $criteria = null;
  /**
   * @var string
   */
  public $json = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'criteria',
          'type' => TType::STRUCT,
          'class' => '\thrift\data\TCriteria',
          ),
        2 => array(
          'var' => 'json',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['criteria'])) {
        $this->criteria = $vals['criteria'];
      }
      if (isset($vals['json'])) {
        $this->json = $vals['json'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findOrInsertCriteriaJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->criteria = new \thrift\data\TCriteria();
            $xfer += $this->criteria->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->json);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findOrInsertCriteriaJson_args');
    if ($this->criteria !== null) {
      if (!is_object($this->criteria)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('criteria', TType::STRUCT, 1);
      $xfer += $this->criteria->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->json !== null) {
      $xfer += $output->writeFieldBegin('json', TType::STRING, 2);
      $xfer += $output->writeString($this->json);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findOrInsertCriteriaJson_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\DuplicateEntryException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\DuplicateEntryException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findOrInsertCriteriaJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\DuplicateEntryException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findOrInsertCriteriaJson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findOrInsertCclJson_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ccl = null;
  /**
   * @var string
   */
  public $json = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $transaction = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ccl',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'json',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        4 => array(
          'var' => 'transaction',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        5 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ccl'])) {
        $this->ccl = $vals['ccl'];
      }
      if (isset($vals['json'])) {
        $this->json = $vals['json'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['transaction'])) {
        $this->transaction = $vals['transaction'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findOrInsertCclJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ccl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->json);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->transaction = new \thrift\shared\TransactionToken();
            $xfer += $this->transaction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findOrInsertCclJson_args');
    if ($this->ccl !== null) {
      $xfer += $output->writeFieldBegin('ccl', TType::STRING, 1);
      $xfer += $output->writeString($this->ccl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->json !== null) {
      $xfer += $output->writeFieldBegin('json', TType::STRING, 2);
      $xfer += $output->writeString($this->json);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 3);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transaction !== null) {
      if (!is_object($this->transaction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transaction', TType::STRUCT, 4);
      $xfer += $this->transaction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 5);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_findOrInsertCclJson_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;
  /**
   * @var \thrift\exceptions\DuplicateEntryException
   */
  public $ex4 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        4 => array(
          'var' => 'ex4',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\DuplicateEntryException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
      if (isset($vals['ex4'])) {
        $this->ex4 = $vals['ex4'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_findOrInsertCclJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ex4 = new \thrift\exceptions\DuplicateEntryException();
            $xfer += $this->ex4->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_findOrInsertCclJson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex4 !== null) {
      $xfer += $output->writeFieldBegin('ex4', TType::STRUCT, 4);
      $xfer += $this->ex4->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getServerEnvironment_args {
  static $_TSPEC;

  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $token = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'token',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        3 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getServerEnvironment_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->token = new \thrift\shared\TransactionToken();
            $xfer += $this->token->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getServerEnvironment_args');
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 1);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      if (!is_object($this->token)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('token', TType::STRUCT, 2);
      $xfer += $this->token->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 3);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getServerEnvironment_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getServerEnvironment_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getServerEnvironment_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getServerVersion_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ConcourseService_getServerVersion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getServerVersion_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_getServerVersion_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_getServerVersion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_getServerVersion_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_time_args {
  static $_TSPEC;

  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $token = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        2 => array(
          'var' => 'token',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        3 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_time_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->token = new \thrift\shared\TransactionToken();
            $xfer += $this->token->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_time_args');
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 1);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      if (!is_object($this->token)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('token', TType::STRUCT, 2);
      $xfer += $this->token->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 3);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_time_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_time_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_time_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_timePhrase_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $phrase = null;
  /**
   * @var \thrift\shared\AccessToken
   */
  public $creds = null;
  /**
   * @var \thrift\shared\TransactionToken
   */
  public $token = null;
  /**
   * @var string
   */
  public $environment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'phrase',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'creds',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\AccessToken',
          ),
        3 => array(
          'var' => 'token',
          'type' => TType::STRUCT,
          'class' => '\thrift\shared\TransactionToken',
          ),
        4 => array(
          'var' => 'environment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['phrase'])) {
        $this->phrase = $vals['phrase'];
      }
      if (isset($vals['creds'])) {
        $this->creds = $vals['creds'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['environment'])) {
        $this->environment = $vals['environment'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_timePhrase_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phrase);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->creds = new \thrift\shared\AccessToken();
            $xfer += $this->creds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->token = new \thrift\shared\TransactionToken();
            $xfer += $this->token->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->environment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_timePhrase_args');
    if ($this->phrase !== null) {
      $xfer += $output->writeFieldBegin('phrase', TType::STRING, 1);
      $xfer += $output->writeString($this->phrase);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creds !== null) {
      if (!is_object($this->creds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('creds', TType::STRUCT, 2);
      $xfer += $this->creds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      if (!is_object($this->token)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('token', TType::STRUCT, 3);
      $xfer += $this->token->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->environment !== null) {
      $xfer += $output->writeFieldBegin('environment', TType::STRING, 4);
      $xfer += $output->writeString($this->environment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConcourseService_timePhrase_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \thrift\exceptions\SecurityException
   */
  public $ex = null;
  /**
   * @var \thrift\exceptions\TransactionException
   */
  public $ex2 = null;
  /**
   * @var \thrift\exceptions\ParseException
   */
  public $ex3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\SecurityException',
          ),
        2 => array(
          'var' => 'ex2',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\TransactionException',
          ),
        3 => array(
          'var' => 'ex3',
          'type' => TType::STRUCT,
          'class' => '\thrift\exceptions\ParseException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
      if (isset($vals['ex2'])) {
        $this->ex2 = $vals['ex2'];
      }
      if (isset($vals['ex3'])) {
        $this->ex3 = $vals['ex3'];
      }
    }
  }

  public function getName() {
    return 'ConcourseService_timePhrase_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \thrift\exceptions\SecurityException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->ex2 = new \thrift\exceptions\TransactionException();
            $xfer += $this->ex2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ex3 = new \thrift\exceptions\ParseException();
            $xfer += $this->ex3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConcourseService_timePhrase_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I64, 0);
      $xfer += $output->writeI64($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex2 !== null) {
      $xfer += $output->writeFieldBegin('ex2', TType::STRUCT, 2);
      $xfer += $this->ex2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex3 !== null) {
      $xfer += $output->writeFieldBegin('ex3', TType::STRUCT, 3);
      $xfer += $this->ex3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}



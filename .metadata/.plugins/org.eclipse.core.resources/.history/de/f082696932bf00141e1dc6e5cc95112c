/*
 * The MIT License (MIT)
 * 
 * Copyright (c) 2014 Jeff Nelson, Cinchapi Software Collective
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.cinchapi.concourse;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.cinchapi.concourse.util.Convert;
import org.junit.Assert;
import org.junit.Test;

import com.google.common.collect.LinkedListMultimap;
import com.google.common.collect.Multimap;


/**
 * Unit tests for the {@code jsonify()} API methods.
 * Jsonify takes a list of records and represents each record's data
 * into a JSON formatted string.
 * 
 * @author hyin
 */
public class JsonifyTest extends ConcourseIntegrationTest {

	@Test
	public void testEmptyJsonify() {
		String expected = "[]";
		List<Long> empty = new ArrayList<>();
		String actual = client.jsonify(empty);
		Assert.assertEquals(expected, actual);
	}
	
	//Test for corner cases with Concourse data types
	//Double and Link
	@Test
	public void testDoubleAndLinkJsonify() {
		String expectedDouble = "[{\"$primaryKey$\":[1],\"key\":[\"3.14D\"]}]";
		String expectedLink = "[{\"$primaryKey$\":[2],\"key\":[\"@12345@\"]}]";

		client.add("key", 3.14, 1);
		client.add("key", Link.to(12345), 2);
		String actualDouble = client.jsonify(1);
		String actualLink = client.jsonify(2);

		Assert.assertEquals(expectedDouble, actualDouble);
		Assert.assertEquals(expectedLink, actualLink);
	}
	
	@Test
	public void testStringToJavaAndBack() {
		String testStr = "{\"key1\": a, \"key2\": b, \"key3\": [c, d, e]}";
		client.insert(testStr, 10L);
		String resultStr = client.jsonify(10L);
		
		Assert.assertTrue(resultStr.contains("\"key1\":[\"a\"]"));
		Assert.assertTrue(resultStr.contains("\"key2\":[\"b\"]"));
		Assert.assertTrue(resultStr.contains("\"key3\":[\"d\",\"e\",\"c\"]"));
	}
	
	@Test
	public void testJavaToStringAndBack() {
		Multimap<String, Object> expectedMap = LinkedListMultimap.create();
		expectedMap.put("key1", Arrays.asList(1L, 2L, 3L));;
		expectedMap.put("key2", Arrays.asList(4L, 5L, 6L));
		Collection<Long> r1 = Arrays.asList(1L, 2L, 3L);
		Collection<Long> r2 = Arrays.asList(4L, 5L, 6L);
		client.add("key1", r1, 1L);
		client.add("key2", r2, 2L);
		
		String json = client.jsonify(Arrays.asList(1L, 2L), false);
		List<Multimap<String, Object>> actualMap
							= Convert.jsonArrayToJava(json);
		
		String expectedkey1 = expectedMap.get("key1").toString();
		String actualkey1 = actualMap.get(0).get("key1").toString();
		String expectedkey2 = expectedMap.get("key2").toString();
		String actualkey2 = actualMap.get(1).get("key2").toString();

		Assert.assertEquals(expectedkey1, actualkey1);
		Assert.assertEquals(expectedkey2, actualkey2);
		
	}
	
	//includePrimaryKey set as true
	@Test
	public void testJsonify() {
		long record1 = 1;
		long record2 = 2;
		long record3 = 3;
		List<Long> recordsList = new ArrayList<Long>();
		recordsList.add(record1);
		recordsList.add(record2);
		recordsList.add(record3);
		client.add("a", 1, record1);
		client.add("a", 2, record1);
		client.add("a", 3, record1);
		client.add("b", 1, record1);
		client.add("b", 2, record1);
		client.add("b", 3, record1);
		client.add("c", 1, record2);
		client.add("c", 2, record2);
		client.add("c", 3, record2);
		client.add("d", 1, record3);
		client.add("d", 2, record3);
		client.add("d", 3, record3);
		String expected = "{\"1\":{\"b\":[2,1,3],\"a\":[2,1,3]}," + 
						  "\"2\":{\"c\":[2,1,3]}," + 
						  "\"3\":{\"d\":[2,1,3]}}";
		String actual = client.jsonify(recordsList);
		System.out.println(actual);
		Assert.assertEquals(expected, actual);
	}
	
	// PrimaryKey not included
	public void testJsonifyFalse() {
		long record1 = 1;
		long record2 = 2;
		long record3 = 3;
		List<Long> recordsList = new ArrayList<Long>();
		recordsList.add(record1);
		recordsList.add(record2);
		recordsList.add(record3);
		client.add("a", 1, record1);
		client.add("a", 2, record1);
		client.add("a", 3, record1);
		client.add("b", 1, record1);
		client.add("b", 2, record1);
		client.add("b", 3, record1);
		client.add("c", 1, record2);
		client.add("c", 2, record2);
		client.add("c", 3, record2);
		client.add("d", 4, record3);
		client.add("d", 5, record3);
		client.add("d", 6, record3);
		String actual = client.jsonify(recordsList, false);
		String expected = "{\"c\":[2,1,3],\"b\":[2,1,3]," + 
					"\"a\":[2,1,3],\"d\":[6,4,5]}";
		Assert.assertEquals(actual, expected);
	}
}

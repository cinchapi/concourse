# Copyright (c) 2013-2025 Cinchapi Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script will update the copyright notices on every file to include
# the current year (e.g. 2013-2014 will become 2013-2015, etc). This only
# needs to be run once a year. The script is smart enough to get the current
# year without being told, so it is a noop if it is run multiple times in
# the same year

version: 2.1
orbs:
  ruby: circleci/ruby@1.8.0

executors:
  java-executor:
    docker:
      - image: cimg/openjdk:8.0.322
    resource_class: xlarge
    environment:
      GRADLE_OPTS: "-Djenkins=true -Xmx8192m"
      TERM: dumb
      CONTAINER_BUILD: "true"
      ORG_GRADLE_PROJECT_signing.secretKeyRingFile: /home/circleci/secring.gpg

jobs:
  setup:
    executor: java-executor
    steps:
      - checkout
      - run:
          name: Get Sonatype Credentials
          command: |
            cd ~/project
            git clone git@github.com:cinchapi/sonatype-credentials.git
            cp sonatype-credentials/gradle.properties .
            cp sonatype-credentials/secring.gpg ~
      - run:
          name: Generate gradle.lock
          command: |
            find ~/project -type f -name build.gradle | sort -d | awk NF | xargs cat > ~/gradle.lock
      - persist_to_workspace:
          root: ~/
          paths:
            - project
            - secring.gpg
            - gradle.lock

  compile:
    executor: java-executor
    steps:
      - attach_workspace:
          at: ~/
      - restore_cache:
          key: v1-jars-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Branch }}-{{ checksum "~/gradle.lock" }}
      - run:
          name: Compile Project
          command: |
            cd ~/project
            ./gradlew compileJava compileTestJava -x spotlessJava -x spotlessJavaCheck --no-daemon
      - persist_to_workspace:
          root: ~/
          paths:
            - project
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-jars-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Branch }}-{{ checksum "~/gradle.lock" }}

  test:
    executor: java-executor
    steps:
      - attach_workspace:
          at: ~/
      - restore_cache:
          key: v1-jars-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Branch }}-{{ checksum "~/gradle.lock" }}
      - run:
          name: Run Tests
          command: |
            cd ~/project
            ./gradlew test -x spotlessJava -x spotlessJavaCheck --no-daemon
      - run:
          name: Save test results
          command: |
            cd ~/project
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - persist_to_workspace:
          root: ~/
          paths:
            - project
            - junit

  build:
    executor: java-executor
    steps:
      - attach_workspace:
          at: ~/
      - setup_remote_docker:
          version: default
          docker_layer_caching: true
      - ruby/install:
          version: '2.7'
      - run: echo "Ruby 2.7 has been installed"
      - run:
          name: Install groff
          command: |
            sudo apt-get update
            sudo apt-get install -y groff
      - restore_cache:
          key: v1-jars-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Branch }}-{{ checksum "~/gradle.lock" }}
      - run:
          name: Package and Publish
          command: |
            cd ~/project
            ./gradlew assemble installer publish uploadArchives cloudsmithUpload dockerize -x spotlessJava -x spotlessJavaCheck --no-daemon
      - persist_to_workspace:
          root: ~/
          paths:
            - project

  collect_artifacts:
    executor: java-executor
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Save artifacts
          command: |
            cd ~/project
            mkdir -p ~/artifacts/
            find . -type f -regex ".*/build/libs/.*jar" -exec cp {} ~/artifacts/ \;
            find . -type f -regex ".*/build/distributions/.*bin" -exec cp {} ~/artifacts \;
            mkdir -p ~/artifacts/logs/concourse-server
            find concourse-server -type f -regex "concourse-server/log/.*log" -exec cp {} ~/artifacts/logs/concourse-server \;
            mkdir -p ~/artifacts/logs/concourse-integration-tests
            find concourse-integration-tests -type f -regex "concourse-integration-tests/log/.*log" -exec cp {} ~/artifacts/logs/concourse-integration-tests \;
          when: always
      - store_artifacts:
          path: ~/artifacts

  publish_docs:
    docker:
      - image: circleci/python:3.6-stretch-node-browsers
    steps:
      - add_ssh_keys:
          fingerprints:
            - "34:53:71:d8:34:5a:c2:af:af:d0:a5:93:e2:ac:9e:f0"
      - checkout
      - run:
          name: Publish Documentation
          command: |
            cd ~/project
            sudo ./docs/init.sh
            sudo ./docs/guide/mkdocs gh-deploy -m "Deploying updated documentation [ci skip]" --remote-name https://$MKDOCS_DEPLOY_GH_USER:$MKDOCS_DEPLOY_GH_TOKEN@github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME --force

workflows:
  version: 2
  build_and_publish:
    jobs:
      - setup
      - compile:
          requires:
            - setup
      - test:
          requires:
            - compile
      - build:
          requires:
            - test
      - collect_artifacts:
          requires:
            - build
      - publish_docs:
          requires:
            - setup

//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var data_ttypes = require('./data_types')


var ttypes = module.exports = {};
ttypes.ComplexTObjectType = {
  'SCALAR' : 1,
  'MAP' : 2,
  'LIST' : 3,
  'SET' : 4,
  'TOBJECT' : 5,
  'TCRITERIA' : 6,
  'BINARY' : 7
};
ComplexTObject = module.exports.ComplexTObject = function(args) {
  this.type = null;
  this.tscalar = null;
  this.tmap = null;
  this.tlist = null;
  this.tset = null;
  this.tobject = null;
  this.tcriteria = null;
  this.tbinary = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.tscalar !== undefined && args.tscalar !== null) {
      this.tscalar = new data_ttypes.TObject(args.tscalar);
    }
    if (args.tmap !== undefined && args.tmap !== null) {
      this.tmap = Thrift.copyMap(args.tmap, [null]);
    }
    if (args.tlist !== undefined && args.tlist !== null) {
      this.tlist = Thrift.copyList(args.tlist, [null]);
    }
    if (args.tset !== undefined && args.tset !== null) {
      this.tset = Thrift.copyList(args.tset, [null]);
    }
    if (args.tobject !== undefined && args.tobject !== null) {
      this.tobject = new data_ttypes.TObject(args.tobject);
    }
    if (args.tcriteria !== undefined && args.tcriteria !== null) {
      this.tcriteria = new data_ttypes.TCriteria(args.tcriteria);
    }
    if (args.tbinary !== undefined && args.tbinary !== null) {
      this.tbinary = args.tbinary;
    }
  }
};
ComplexTObject.prototype = {};
ComplexTObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tscalar = new data_ttypes.TObject();
        this.tscalar.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.tmap = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = new ttypes.ComplexTObject();
          key6.read(input);
          val7 = new ttypes.ComplexTObject();
          val7.read(input);
          this.tmap[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.tlist = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.ComplexTObject();
          elem14.read(input);
          this.tlist.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.SET) {
        var _size15 = 0;
        var _rtmp319;
        this.tset = [];
        var _etype18 = 0;
        _rtmp319 = input.readSetBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = new ttypes.ComplexTObject();
          elem21.read(input);
          this.tset.push(elem21);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.tobject = new data_ttypes.TObject();
        this.tobject.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.tcriteria = new data_ttypes.TCriteria();
        this.tcriteria.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.tbinary = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ComplexTObject.prototype.write = function(output) {
  output.writeStructBegin('ComplexTObject');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.tscalar !== null && this.tscalar !== undefined) {
    output.writeFieldBegin('tscalar', Thrift.Type.STRUCT, 2);
    this.tscalar.write(output);
    output.writeFieldEnd();
  }
  if (this.tmap !== null && this.tmap !== undefined) {
    output.writeFieldBegin('tmap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.STRUCT, Thrift.objectLength(this.tmap));
    for (var kiter22 in this.tmap)
    {
      if (this.tmap.hasOwnProperty(kiter22))
      {
        var viter23 = this.tmap[kiter22];
        kiter22.write(output);
        viter23.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.tlist !== null && this.tlist !== undefined) {
    output.writeFieldBegin('tlist', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.tlist.length);
    for (var iter24 in this.tlist)
    {
      if (this.tlist.hasOwnProperty(iter24))
      {
        iter24 = this.tlist[iter24];
        iter24.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tset !== null && this.tset !== undefined) {
    output.writeFieldBegin('tset', Thrift.Type.SET, 5);
    output.writeSetBegin(Thrift.Type.STRUCT, this.tset.length);
    for (var iter25 in this.tset)
    {
      if (this.tset.hasOwnProperty(iter25))
      {
        iter25 = this.tset[iter25];
        iter25.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.tobject !== null && this.tobject !== undefined) {
    output.writeFieldBegin('tobject', Thrift.Type.STRUCT, 6);
    this.tobject.write(output);
    output.writeFieldEnd();
  }
  if (this.tcriteria !== null && this.tcriteria !== undefined) {
    output.writeFieldBegin('tcriteria', Thrift.Type.STRUCT, 7);
    this.tcriteria.write(output);
    output.writeFieldEnd();
  }
  if (this.tbinary !== null && this.tbinary !== undefined) {
    output.writeFieldBegin('tbinary', Thrift.Type.STRING, 8);
    output.writeBinary(this.tbinary);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


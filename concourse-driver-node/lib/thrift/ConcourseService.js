//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var data_ttypes = require('./data_types')
var shared_ttypes = require('./shared_types')
var exceptions_ttypes = require('./exceptions_types')
var complex_ttypes = require('./complex_types')


var ttypes = require('./concourse_types');
//HELPER FUNCTIONS AND STRUCTURES

ConcourseService_abort_args = function(args) {
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_abort_args.prototype = {};
ConcourseService_abort_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_abort_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_abort_args');
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 1);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 2);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 3);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_abort_result = function(args) {
    this.ex = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args) {
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
    }
};
ConcourseService_abort_result.prototype = {};
ConcourseService_abort_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_abort_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_abort_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_addKeyValue_args = function(args) {
    this.key = null;
    this.value = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.value !== undefined && args.value !== null) {
            this.value = new data_ttypes.TObject(args.value);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_addKeyValue_args.prototype = {};
ConcourseService_addKeyValue_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_addKeyValue_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_addKeyValue_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_addKeyValue_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_addKeyValue_result.prototype = {};
ConcourseService_addKeyValue_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_addKeyValue_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_addKeyValue_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_addKeyValueRecord_args = function(args) {
    this.key = null;
    this.value = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.value !== undefined && args.value !== null) {
            this.value = new data_ttypes.TObject(args.value);
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_addKeyValueRecord_args.prototype = {};
ConcourseService_addKeyValueRecord_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_addKeyValueRecord_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_addKeyValueRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 3);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_addKeyValueRecord_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_addKeyValueRecord_result.prototype = {};
ConcourseService_addKeyValueRecord_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_addKeyValueRecord_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_addKeyValueRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_addKeyValueRecords_args = function(args) {
    this.key = null;
    this.value = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.value !== undefined && args.value !== null) {
            this.value = new data_ttypes.TObject(args.value);
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_addKeyValueRecords_args.prototype = {};
ConcourseService_addKeyValueRecords_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size0 = 0;
          var _rtmp34;
          this.records = [];
          var _etype3 = 0;
          _rtmp34 = input.readListBegin();
          _etype3 = _rtmp34.etype;
          _size0 = _rtmp34.size;
          for (var _i5 = 0; _i5 < _size0; ++_i5)
          {
            var elem6 = null;
            elem6 = input.readI64();
            this.records.push(elem6);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_addKeyValueRecords_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_addKeyValueRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter7 in this.records)
      {
        if (this.records.hasOwnProperty(iter7))
        {
          iter7 = this.records[iter7];
          output.writeI64(iter7);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_addKeyValueRecords_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_addKeyValueRecords_result.prototype = {};
ConcourseService_addKeyValueRecords_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size8 = 0;
          var _rtmp312;
          this.success = {};
          var _ktype9 = 0;
          var _vtype10 = 0;
          _rtmp312 = input.readMapBegin();
          _ktype9 = _rtmp312.ktype;
          _vtype10 = _rtmp312.vtype;
          _size8 = _rtmp312.size;
          for (var _i13 = 0; _i13 < _size8; ++_i13)
          {
            var key14 = null;
            var val15 = null;
            key14 = input.readI64();
            val15 = input.readBool();
            this.success[key14] = val15;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_addKeyValueRecords_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_addKeyValueRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.BOOL, Thrift.objectLength(this.success));
      for (var kiter16 in this.success)
      {
        if (this.success.hasOwnProperty(kiter16))
        {
          var viter17 = this.success[kiter16];
          output.writeI64(kiter16);
          output.writeBool(viter17);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_auditRecord_args = function(args) {
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_auditRecord_args.prototype = {};
ConcourseService_auditRecord_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_auditRecord_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_auditRecord_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_auditRecord_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_auditRecord_result.prototype = {};
ConcourseService_auditRecord_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size18 = 0;
          var _rtmp322;
          this.success = {};
          var _ktype19 = 0;
          var _vtype20 = 0;
          _rtmp322 = input.readMapBegin();
          _ktype19 = _rtmp322.ktype;
          _vtype20 = _rtmp322.vtype;
          _size18 = _rtmp322.size;
          for (var _i23 = 0; _i23 < _size18; ++_i23)
          {
            var key24 = null;
            var val25 = null;
            key24 = input.readI64();
            val25 = input.readString();
            this.success[key24] = val25;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_auditRecord_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_auditRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(this.success));
      for (var kiter26 in this.success)
      {
        if (this.success.hasOwnProperty(kiter26))
        {
          var viter27 = this.success[kiter26];
          output.writeI64(kiter26);
          output.writeString(viter27);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_auditRecordStart_args = function(args) {
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.start !== undefined && args.start !== null) {
            this.start = args.start;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_auditRecordStart_args.prototype = {};
ConcourseService_auditRecordStart_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_auditRecordStart_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_auditRecordStart_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_auditRecordStart_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_auditRecordStart_result.prototype = {};
ConcourseService_auditRecordStart_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size28 = 0;
          var _rtmp332;
          this.success = {};
          var _ktype29 = 0;
          var _vtype30 = 0;
          _rtmp332 = input.readMapBegin();
          _ktype29 = _rtmp332.ktype;
          _vtype30 = _rtmp332.vtype;
          _size28 = _rtmp332.size;
          for (var _i33 = 0; _i33 < _size28; ++_i33)
          {
            var key34 = null;
            var val35 = null;
            key34 = input.readI64();
            val35 = input.readString();
            this.success[key34] = val35;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_auditRecordStart_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_auditRecordStart_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(this.success));
      for (var kiter36 in this.success)
      {
        if (this.success.hasOwnProperty(kiter36))
        {
          var viter37 = this.success[kiter36];
          output.writeI64(kiter36);
          output.writeString(viter37);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_auditRecordStartstr_args = function(args) {
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.start !== undefined && args.start !== null) {
            this.start = args.start;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_auditRecordStartstr_args.prototype = {};
ConcourseService_auditRecordStartstr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.start = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_auditRecordStartstr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_auditRecordStartstr_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 2);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_auditRecordStartstr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_auditRecordStartstr_result.prototype = {};
ConcourseService_auditRecordStartstr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size38 = 0;
          var _rtmp342;
          this.success = {};
          var _ktype39 = 0;
          var _vtype40 = 0;
          _rtmp342 = input.readMapBegin();
          _ktype39 = _rtmp342.ktype;
          _vtype40 = _rtmp342.vtype;
          _size38 = _rtmp342.size;
          for (var _i43 = 0; _i43 < _size38; ++_i43)
          {
            var key44 = null;
            var val45 = null;
            key44 = input.readI64();
            val45 = input.readString();
            this.success[key44] = val45;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_auditRecordStartstr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_auditRecordStartstr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(this.success));
      for (var kiter46 in this.success)
      {
        if (this.success.hasOwnProperty(kiter46))
        {
          var viter47 = this.success[kiter46];
          output.writeI64(kiter46);
          output.writeString(viter47);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_auditRecordStartEnd_args = function(args) {
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.start !== undefined && args.start !== null) {
            this.start = args.start;
        }
        if (args.tend !== undefined && args.tend !== null) {
            this.tend = args.tend;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_auditRecordStartEnd_args.prototype = {};
ConcourseService_auditRecordStartEnd_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.tend = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_auditRecordStartEnd_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_auditRecordStartEnd_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.I64, 3);
      output.writeI64(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_auditRecordStartEnd_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_auditRecordStartEnd_result.prototype = {};
ConcourseService_auditRecordStartEnd_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size48 = 0;
          var _rtmp352;
          this.success = {};
          var _ktype49 = 0;
          var _vtype50 = 0;
          _rtmp352 = input.readMapBegin();
          _ktype49 = _rtmp352.ktype;
          _vtype50 = _rtmp352.vtype;
          _size48 = _rtmp352.size;
          for (var _i53 = 0; _i53 < _size48; ++_i53)
          {
            var key54 = null;
            var val55 = null;
            key54 = input.readI64();
            val55 = input.readString();
            this.success[key54] = val55;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_auditRecordStartEnd_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_auditRecordStartEnd_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(this.success));
      for (var kiter56 in this.success)
      {
        if (this.success.hasOwnProperty(kiter56))
        {
          var viter57 = this.success[kiter56];
          output.writeI64(kiter56);
          output.writeString(viter57);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_auditRecordStartstrEndstr_args = function(args) {
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.start !== undefined && args.start !== null) {
            this.start = args.start;
        }
        if (args.tend !== undefined && args.tend !== null) {
            this.tend = args.tend;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_auditRecordStartstrEndstr_args.prototype = {};
ConcourseService_auditRecordStartstrEndstr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.start = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.tend = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_auditRecordStartstrEndstr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_auditRecordStartstrEndstr_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 2);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.STRING, 3);
      output.writeString(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_auditRecordStartstrEndstr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_auditRecordStartstrEndstr_result.prototype = {};
ConcourseService_auditRecordStartstrEndstr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size58 = 0;
          var _rtmp362;
          this.success = {};
          var _ktype59 = 0;
          var _vtype60 = 0;
          _rtmp362 = input.readMapBegin();
          _ktype59 = _rtmp362.ktype;
          _vtype60 = _rtmp362.vtype;
          _size58 = _rtmp362.size;
          for (var _i63 = 0; _i63 < _size58; ++_i63)
          {
            var key64 = null;
            var val65 = null;
            key64 = input.readI64();
            val65 = input.readString();
            this.success[key64] = val65;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_auditRecordStartstrEndstr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_auditRecordStartstrEndstr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(this.success));
      for (var kiter66 in this.success)
      {
        if (this.success.hasOwnProperty(kiter66))
        {
          var viter67 = this.success[kiter66];
          output.writeI64(kiter66);
          output.writeString(viter67);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_auditKeyRecord_args = function(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_auditKeyRecord_args.prototype = {};
ConcourseService_auditKeyRecord_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_auditKeyRecord_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_auditKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_auditKeyRecord_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_auditKeyRecord_result.prototype = {};
ConcourseService_auditKeyRecord_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size68 = 0;
          var _rtmp372;
          this.success = {};
          var _ktype69 = 0;
          var _vtype70 = 0;
          _rtmp372 = input.readMapBegin();
          _ktype69 = _rtmp372.ktype;
          _vtype70 = _rtmp372.vtype;
          _size68 = _rtmp372.size;
          for (var _i73 = 0; _i73 < _size68; ++_i73)
          {
            var key74 = null;
            var val75 = null;
            key74 = input.readI64();
            val75 = input.readString();
            this.success[key74] = val75;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_auditKeyRecord_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_auditKeyRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(this.success));
      for (var kiter76 in this.success)
      {
        if (this.success.hasOwnProperty(kiter76))
        {
          var viter77 = this.success[kiter76];
          output.writeI64(kiter76);
          output.writeString(viter77);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_auditKeyRecordStart_args = function(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.start !== undefined && args.start !== null) {
            this.start = args.start;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_auditKeyRecordStart_args.prototype = {};
ConcourseService_auditKeyRecordStart_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_auditKeyRecordStart_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_auditKeyRecordStart_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 3);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_auditKeyRecordStart_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_auditKeyRecordStart_result.prototype = {};
ConcourseService_auditKeyRecordStart_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size78 = 0;
          var _rtmp382;
          this.success = {};
          var _ktype79 = 0;
          var _vtype80 = 0;
          _rtmp382 = input.readMapBegin();
          _ktype79 = _rtmp382.ktype;
          _vtype80 = _rtmp382.vtype;
          _size78 = _rtmp382.size;
          for (var _i83 = 0; _i83 < _size78; ++_i83)
          {
            var key84 = null;
            var val85 = null;
            key84 = input.readI64();
            val85 = input.readString();
            this.success[key84] = val85;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_auditKeyRecordStart_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_auditKeyRecordStart_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(this.success));
      for (var kiter86 in this.success)
      {
        if (this.success.hasOwnProperty(kiter86))
        {
          var viter87 = this.success[kiter86];
          output.writeI64(kiter86);
          output.writeString(viter87);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_auditKeyRecordStartstr_args = function(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.start !== undefined && args.start !== null) {
            this.start = args.start;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_auditKeyRecordStartstr_args.prototype = {};
ConcourseService_auditKeyRecordStartstr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.start = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_auditKeyRecordStartstr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_auditKeyRecordStartstr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 3);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_auditKeyRecordStartstr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_auditKeyRecordStartstr_result.prototype = {};
ConcourseService_auditKeyRecordStartstr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size88 = 0;
          var _rtmp392;
          this.success = {};
          var _ktype89 = 0;
          var _vtype90 = 0;
          _rtmp392 = input.readMapBegin();
          _ktype89 = _rtmp392.ktype;
          _vtype90 = _rtmp392.vtype;
          _size88 = _rtmp392.size;
          for (var _i93 = 0; _i93 < _size88; ++_i93)
          {
            var key94 = null;
            var val95 = null;
            key94 = input.readI64();
            val95 = input.readString();
            this.success[key94] = val95;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_auditKeyRecordStartstr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_auditKeyRecordStartstr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(this.success));
      for (var kiter96 in this.success)
      {
        if (this.success.hasOwnProperty(kiter96))
        {
          var viter97 = this.success[kiter96];
          output.writeI64(kiter96);
          output.writeString(viter97);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_auditKeyRecordStartEnd_args = function(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.start !== undefined && args.start !== null) {
            this.start = args.start;
        }
        if (args.tend !== undefined && args.tend !== null) {
            this.tend = args.tend;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_auditKeyRecordStartEnd_args.prototype = {};
ConcourseService_auditKeyRecordStartEnd_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.tend = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_auditKeyRecordStartEnd_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_auditKeyRecordStartEnd_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 3);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.I64, 4);
      output.writeI64(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_auditKeyRecordStartEnd_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_auditKeyRecordStartEnd_result.prototype = {};
ConcourseService_auditKeyRecordStartEnd_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size98 = 0;
          var _rtmp3102;
          this.success = {};
          var _ktype99 = 0;
          var _vtype100 = 0;
          _rtmp3102 = input.readMapBegin();
          _ktype99 = _rtmp3102.ktype;
          _vtype100 = _rtmp3102.vtype;
          _size98 = _rtmp3102.size;
          for (var _i103 = 0; _i103 < _size98; ++_i103)
          {
            var key104 = null;
            var val105 = null;
            key104 = input.readI64();
            val105 = input.readString();
            this.success[key104] = val105;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_auditKeyRecordStartEnd_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_auditKeyRecordStartEnd_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(this.success));
      for (var kiter106 in this.success)
      {
        if (this.success.hasOwnProperty(kiter106))
        {
          var viter107 = this.success[kiter106];
          output.writeI64(kiter106);
          output.writeString(viter107);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_auditKeyRecordStartstrEndstr_args = function(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.start !== undefined && args.start !== null) {
            this.start = args.start;
        }
        if (args.tend !== undefined && args.tend !== null) {
            this.tend = args.tend;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_auditKeyRecordStartstrEndstr_args.prototype = {};
ConcourseService_auditKeyRecordStartstrEndstr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.start = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.tend = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_auditKeyRecordStartstrEndstr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_auditKeyRecordStartstrEndstr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 3);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.STRING, 4);
      output.writeString(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_auditKeyRecordStartstrEndstr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_auditKeyRecordStartstrEndstr_result.prototype = {};
ConcourseService_auditKeyRecordStartstrEndstr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size108 = 0;
          var _rtmp3112;
          this.success = {};
          var _ktype109 = 0;
          var _vtype110 = 0;
          _rtmp3112 = input.readMapBegin();
          _ktype109 = _rtmp3112.ktype;
          _vtype110 = _rtmp3112.vtype;
          _size108 = _rtmp3112.size;
          for (var _i113 = 0; _i113 < _size108; ++_i113)
          {
            var key114 = null;
            var val115 = null;
            key114 = input.readI64();
            val115 = input.readString();
            this.success[key114] = val115;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_auditKeyRecordStartstrEndstr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_auditKeyRecordStartstrEndstr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRING, Thrift.objectLength(this.success));
      for (var kiter116 in this.success)
      {
        if (this.success.hasOwnProperty(kiter116))
        {
          var viter117 = this.success[kiter116];
          output.writeI64(kiter116);
          output.writeString(viter117);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_browseKey_args = function(args) {
    this.key = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_browseKey_args.prototype = {};
ConcourseService_browseKey_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_browseKey_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_browseKey_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_browseKey_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_browseKey_result.prototype = {};
ConcourseService_browseKey_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size118 = 0;
          var _rtmp3122;
          this.success = {};
          var _ktype119 = 0;
          var _vtype120 = 0;
          _rtmp3122 = input.readMapBegin();
          _ktype119 = _rtmp3122.ktype;
          _vtype120 = _rtmp3122.vtype;
          _size118 = _rtmp3122.size;
          for (var _i123 = 0; _i123 < _size118; ++_i123)
          {
            var key124 = null;
            var val125 = null;
            key124 = new data_ttypes.TObject();
            key124.read(input);
            var _size126 = 0;
            var _rtmp3130;
            val125 = [];
            var _etype129 = 0;
            _rtmp3130 = input.readSetBegin();
            _etype129 = _rtmp3130.etype;
            _size126 = _rtmp3130.size;
            for (var _i131 = 0; _i131 < _size126; ++_i131)
            {
              var elem132 = null;
              elem132 = input.readI64();
              val125.push(elem132);
            }
            input.readSetEnd();
            this.success[key124] = val125;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_browseKey_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_browseKey_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter133 in this.success)
      {
        if (this.success.hasOwnProperty(kiter133))
        {
          var viter134 = this.success[kiter133];
          kiter133.write(output);
          output.writeSetBegin(Thrift.Type.I64, viter134.length);
          for (var iter135 in viter134)
          {
            if (viter134.hasOwnProperty(iter135))
            {
              iter135 = viter134[iter135];
              output.writeI64(iter135);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_browseKeys_args = function(args) {
    this.keys = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_browseKeys_args.prototype = {};
ConcourseService_browseKeys_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size136 = 0;
          var _rtmp3140;
          this.keys = [];
          var _etype139 = 0;
          _rtmp3140 = input.readListBegin();
          _etype139 = _rtmp3140.etype;
          _size136 = _rtmp3140.size;
          for (var _i141 = 0; _i141 < _size136; ++_i141)
          {
            var elem142 = null;
            elem142 = input.readString();
            this.keys.push(elem142);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_browseKeys_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_browseKeys_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter143 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter143))
        {
          iter143 = this.keys[iter143];
          output.writeString(iter143);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_browseKeys_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_browseKeys_result.prototype = {};
ConcourseService_browseKeys_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size144 = 0;
          var _rtmp3148;
          this.success = {};
          var _ktype145 = 0;
          var _vtype146 = 0;
          _rtmp3148 = input.readMapBegin();
          _ktype145 = _rtmp3148.ktype;
          _vtype146 = _rtmp3148.vtype;
          _size144 = _rtmp3148.size;
          for (var _i149 = 0; _i149 < _size144; ++_i149)
          {
            var key150 = null;
            var val151 = null;
            key150 = input.readString();
            var _size152 = 0;
            var _rtmp3156;
            val151 = {};
            var _ktype153 = 0;
            var _vtype154 = 0;
            _rtmp3156 = input.readMapBegin();
            _ktype153 = _rtmp3156.ktype;
            _vtype154 = _rtmp3156.vtype;
            _size152 = _rtmp3156.size;
            for (var _i157 = 0; _i157 < _size152; ++_i157)
            {
              var key158 = null;
              var val159 = null;
              key158 = new data_ttypes.TObject();
              key158.read(input);
              var _size160 = 0;
              var _rtmp3164;
              val159 = [];
              var _etype163 = 0;
              _rtmp3164 = input.readSetBegin();
              _etype163 = _rtmp3164.etype;
              _size160 = _rtmp3164.size;
              for (var _i165 = 0; _i165 < _size160; ++_i165)
              {
                var elem166 = null;
                elem166 = input.readI64();
                val159.push(elem166);
              }
              input.readSetEnd();
              val151[key158] = val159;
            }
            input.readMapEnd();
            this.success[key150] = val151;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_browseKeys_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_browseKeys_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter167 in this.success)
      {
        if (this.success.hasOwnProperty(kiter167))
        {
          var viter168 = this.success[kiter167];
          output.writeString(kiter167);
          output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.SET, Thrift.objectLength(viter168));
          for (var kiter169 in viter168)
          {
            if (viter168.hasOwnProperty(kiter169))
            {
              var viter170 = viter168[kiter169];
              kiter169.write(output);
              output.writeSetBegin(Thrift.Type.I64, viter170.length);
              for (var iter171 in viter170)
              {
                if (viter170.hasOwnProperty(iter171))
                {
                  iter171 = viter170[iter171];
                  output.writeI64(iter171);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_browseKeyTime_args = function(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_browseKeyTime_args.prototype = {};
ConcourseService_browseKeyTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_browseKeyTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_browseKeyTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_browseKeyTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_browseKeyTime_result.prototype = {};
ConcourseService_browseKeyTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size172 = 0;
          var _rtmp3176;
          this.success = {};
          var _ktype173 = 0;
          var _vtype174 = 0;
          _rtmp3176 = input.readMapBegin();
          _ktype173 = _rtmp3176.ktype;
          _vtype174 = _rtmp3176.vtype;
          _size172 = _rtmp3176.size;
          for (var _i177 = 0; _i177 < _size172; ++_i177)
          {
            var key178 = null;
            var val179 = null;
            key178 = new data_ttypes.TObject();
            key178.read(input);
            var _size180 = 0;
            var _rtmp3184;
            val179 = [];
            var _etype183 = 0;
            _rtmp3184 = input.readSetBegin();
            _etype183 = _rtmp3184.etype;
            _size180 = _rtmp3184.size;
            for (var _i185 = 0; _i185 < _size180; ++_i185)
            {
              var elem186 = null;
              elem186 = input.readI64();
              val179.push(elem186);
            }
            input.readSetEnd();
            this.success[key178] = val179;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_browseKeyTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_browseKeyTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter187 in this.success)
      {
        if (this.success.hasOwnProperty(kiter187))
        {
          var viter188 = this.success[kiter187];
          kiter187.write(output);
          output.writeSetBegin(Thrift.Type.I64, viter188.length);
          for (var iter189 in viter188)
          {
            if (viter188.hasOwnProperty(iter189))
            {
              iter189 = viter188[iter189];
              output.writeI64(iter189);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_browseKeyTimestr_args = function(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_browseKeyTimestr_args.prototype = {};
ConcourseService_browseKeyTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_browseKeyTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_browseKeyTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_browseKeyTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_browseKeyTimestr_result.prototype = {};
ConcourseService_browseKeyTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size190 = 0;
          var _rtmp3194;
          this.success = {};
          var _ktype191 = 0;
          var _vtype192 = 0;
          _rtmp3194 = input.readMapBegin();
          _ktype191 = _rtmp3194.ktype;
          _vtype192 = _rtmp3194.vtype;
          _size190 = _rtmp3194.size;
          for (var _i195 = 0; _i195 < _size190; ++_i195)
          {
            var key196 = null;
            var val197 = null;
            key196 = new data_ttypes.TObject();
            key196.read(input);
            var _size198 = 0;
            var _rtmp3202;
            val197 = [];
            var _etype201 = 0;
            _rtmp3202 = input.readSetBegin();
            _etype201 = _rtmp3202.etype;
            _size198 = _rtmp3202.size;
            for (var _i203 = 0; _i203 < _size198; ++_i203)
            {
              var elem204 = null;
              elem204 = input.readI64();
              val197.push(elem204);
            }
            input.readSetEnd();
            this.success[key196] = val197;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_browseKeyTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_browseKeyTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter205 in this.success)
      {
        if (this.success.hasOwnProperty(kiter205))
        {
          var viter206 = this.success[kiter205];
          kiter205.write(output);
          output.writeSetBegin(Thrift.Type.I64, viter206.length);
          for (var iter207 in viter206)
          {
            if (viter206.hasOwnProperty(iter207))
            {
              iter207 = viter206[iter207];
              output.writeI64(iter207);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_browseKeysTime_args = function(args) {
    this.keys = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_browseKeysTime_args.prototype = {};
ConcourseService_browseKeysTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size208 = 0;
          var _rtmp3212;
          this.keys = [];
          var _etype211 = 0;
          _rtmp3212 = input.readListBegin();
          _etype211 = _rtmp3212.etype;
          _size208 = _rtmp3212.size;
          for (var _i213 = 0; _i213 < _size208; ++_i213)
          {
            var elem214 = null;
            elem214 = input.readString();
            this.keys.push(elem214);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_browseKeysTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_browseKeysTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter215 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter215))
        {
          iter215 = this.keys[iter215];
          output.writeString(iter215);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_browseKeysTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_browseKeysTime_result.prototype = {};
ConcourseService_browseKeysTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size216 = 0;
          var _rtmp3220;
          this.success = {};
          var _ktype217 = 0;
          var _vtype218 = 0;
          _rtmp3220 = input.readMapBegin();
          _ktype217 = _rtmp3220.ktype;
          _vtype218 = _rtmp3220.vtype;
          _size216 = _rtmp3220.size;
          for (var _i221 = 0; _i221 < _size216; ++_i221)
          {
            var key222 = null;
            var val223 = null;
            key222 = input.readString();
            var _size224 = 0;
            var _rtmp3228;
            val223 = {};
            var _ktype225 = 0;
            var _vtype226 = 0;
            _rtmp3228 = input.readMapBegin();
            _ktype225 = _rtmp3228.ktype;
            _vtype226 = _rtmp3228.vtype;
            _size224 = _rtmp3228.size;
            for (var _i229 = 0; _i229 < _size224; ++_i229)
            {
              var key230 = null;
              var val231 = null;
              key230 = new data_ttypes.TObject();
              key230.read(input);
              var _size232 = 0;
              var _rtmp3236;
              val231 = [];
              var _etype235 = 0;
              _rtmp3236 = input.readSetBegin();
              _etype235 = _rtmp3236.etype;
              _size232 = _rtmp3236.size;
              for (var _i237 = 0; _i237 < _size232; ++_i237)
              {
                var elem238 = null;
                elem238 = input.readI64();
                val231.push(elem238);
              }
              input.readSetEnd();
              val223[key230] = val231;
            }
            input.readMapEnd();
            this.success[key222] = val223;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_browseKeysTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_browseKeysTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter239 in this.success)
      {
        if (this.success.hasOwnProperty(kiter239))
        {
          var viter240 = this.success[kiter239];
          output.writeString(kiter239);
          output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.SET, Thrift.objectLength(viter240));
          for (var kiter241 in viter240)
          {
            if (viter240.hasOwnProperty(kiter241))
            {
              var viter242 = viter240[kiter241];
              kiter241.write(output);
              output.writeSetBegin(Thrift.Type.I64, viter242.length);
              for (var iter243 in viter242)
              {
                if (viter242.hasOwnProperty(iter243))
                {
                  iter243 = viter242[iter243];
                  output.writeI64(iter243);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_browseKeysTimestr_args = function(args) {
    this.keys = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_browseKeysTimestr_args.prototype = {};
ConcourseService_browseKeysTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size244 = 0;
          var _rtmp3248;
          this.keys = [];
          var _etype247 = 0;
          _rtmp3248 = input.readListBegin();
          _etype247 = _rtmp3248.etype;
          _size244 = _rtmp3248.size;
          for (var _i249 = 0; _i249 < _size244; ++_i249)
          {
            var elem250 = null;
            elem250 = input.readString();
            this.keys.push(elem250);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_browseKeysTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_browseKeysTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter251 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter251))
        {
          iter251 = this.keys[iter251];
          output.writeString(iter251);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_browseKeysTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_browseKeysTimestr_result.prototype = {};
ConcourseService_browseKeysTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size252 = 0;
          var _rtmp3256;
          this.success = {};
          var _ktype253 = 0;
          var _vtype254 = 0;
          _rtmp3256 = input.readMapBegin();
          _ktype253 = _rtmp3256.ktype;
          _vtype254 = _rtmp3256.vtype;
          _size252 = _rtmp3256.size;
          for (var _i257 = 0; _i257 < _size252; ++_i257)
          {
            var key258 = null;
            var val259 = null;
            key258 = input.readString();
            var _size260 = 0;
            var _rtmp3264;
            val259 = {};
            var _ktype261 = 0;
            var _vtype262 = 0;
            _rtmp3264 = input.readMapBegin();
            _ktype261 = _rtmp3264.ktype;
            _vtype262 = _rtmp3264.vtype;
            _size260 = _rtmp3264.size;
            for (var _i265 = 0; _i265 < _size260; ++_i265)
            {
              var key266 = null;
              var val267 = null;
              key266 = new data_ttypes.TObject();
              key266.read(input);
              var _size268 = 0;
              var _rtmp3272;
              val267 = [];
              var _etype271 = 0;
              _rtmp3272 = input.readSetBegin();
              _etype271 = _rtmp3272.etype;
              _size268 = _rtmp3272.size;
              for (var _i273 = 0; _i273 < _size268; ++_i273)
              {
                var elem274 = null;
                elem274 = input.readI64();
                val267.push(elem274);
              }
              input.readSetEnd();
              val259[key266] = val267;
            }
            input.readMapEnd();
            this.success[key258] = val259;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_browseKeysTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_browseKeysTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter275 in this.success)
      {
        if (this.success.hasOwnProperty(kiter275))
        {
          var viter276 = this.success[kiter275];
          output.writeString(kiter275);
          output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.SET, Thrift.objectLength(viter276));
          for (var kiter277 in viter276)
          {
            if (viter276.hasOwnProperty(kiter277))
            {
              var viter278 = viter276[kiter277];
              kiter277.write(output);
              output.writeSetBegin(Thrift.Type.I64, viter278.length);
              for (var iter279 in viter278)
              {
                if (viter278.hasOwnProperty(iter279))
                {
                  iter279 = viter278[iter279];
                  output.writeI64(iter279);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_chronologizeKeyRecord_args = function(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_chronologizeKeyRecord_args.prototype = {};
ConcourseService_chronologizeKeyRecord_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_chronologizeKeyRecord_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_chronologizeKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_chronologizeKeyRecord_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_chronologizeKeyRecord_result.prototype = {};
ConcourseService_chronologizeKeyRecord_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size280 = 0;
          var _rtmp3284;
          this.success = {};
          var _ktype281 = 0;
          var _vtype282 = 0;
          _rtmp3284 = input.readMapBegin();
          _ktype281 = _rtmp3284.ktype;
          _vtype282 = _rtmp3284.vtype;
          _size280 = _rtmp3284.size;
          for (var _i285 = 0; _i285 < _size280; ++_i285)
          {
            var key286 = null;
            var val287 = null;
            key286 = input.readI64();
            var _size288 = 0;
            var _rtmp3292;
            val287 = [];
            var _etype291 = 0;
            _rtmp3292 = input.readSetBegin();
            _etype291 = _rtmp3292.etype;
            _size288 = _rtmp3292.size;
            for (var _i293 = 0; _i293 < _size288; ++_i293)
            {
              var elem294 = null;
              elem294 = new data_ttypes.TObject();
              elem294.read(input);
              val287.push(elem294);
            }
            input.readSetEnd();
            this.success[key286] = val287;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_chronologizeKeyRecord_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_chronologizeKeyRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter295 in this.success)
      {
        if (this.success.hasOwnProperty(kiter295))
        {
          var viter296 = this.success[kiter295];
          output.writeI64(kiter295);
          output.writeSetBegin(Thrift.Type.STRUCT, viter296.length);
          for (var iter297 in viter296)
          {
            if (viter296.hasOwnProperty(iter297))
            {
              iter297 = viter296[iter297];
              iter297.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_chronologizeKeyRecordStart_args = function(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.start !== undefined && args.start !== null) {
            this.start = args.start;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_chronologizeKeyRecordStart_args.prototype = {};
ConcourseService_chronologizeKeyRecordStart_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_chronologizeKeyRecordStart_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_chronologizeKeyRecordStart_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 3);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_chronologizeKeyRecordStart_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_chronologizeKeyRecordStart_result.prototype = {};
ConcourseService_chronologizeKeyRecordStart_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size298 = 0;
          var _rtmp3302;
          this.success = {};
          var _ktype299 = 0;
          var _vtype300 = 0;
          _rtmp3302 = input.readMapBegin();
          _ktype299 = _rtmp3302.ktype;
          _vtype300 = _rtmp3302.vtype;
          _size298 = _rtmp3302.size;
          for (var _i303 = 0; _i303 < _size298; ++_i303)
          {
            var key304 = null;
            var val305 = null;
            key304 = input.readI64();
            var _size306 = 0;
            var _rtmp3310;
            val305 = [];
            var _etype309 = 0;
            _rtmp3310 = input.readSetBegin();
            _etype309 = _rtmp3310.etype;
            _size306 = _rtmp3310.size;
            for (var _i311 = 0; _i311 < _size306; ++_i311)
            {
              var elem312 = null;
              elem312 = new data_ttypes.TObject();
              elem312.read(input);
              val305.push(elem312);
            }
            input.readSetEnd();
            this.success[key304] = val305;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_chronologizeKeyRecordStart_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_chronologizeKeyRecordStart_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter313 in this.success)
      {
        if (this.success.hasOwnProperty(kiter313))
        {
          var viter314 = this.success[kiter313];
          output.writeI64(kiter313);
          output.writeSetBegin(Thrift.Type.STRUCT, viter314.length);
          for (var iter315 in viter314)
          {
            if (viter314.hasOwnProperty(iter315))
            {
              iter315 = viter314[iter315];
              iter315.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_chronologizeKeyRecordStartstr_args = function(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.start !== undefined && args.start !== null) {
            this.start = args.start;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_chronologizeKeyRecordStartstr_args.prototype = {};
ConcourseService_chronologizeKeyRecordStartstr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.start = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_chronologizeKeyRecordStartstr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_chronologizeKeyRecordStartstr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 3);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_chronologizeKeyRecordStartstr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_chronologizeKeyRecordStartstr_result.prototype = {};
ConcourseService_chronologizeKeyRecordStartstr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size316 = 0;
          var _rtmp3320;
          this.success = {};
          var _ktype317 = 0;
          var _vtype318 = 0;
          _rtmp3320 = input.readMapBegin();
          _ktype317 = _rtmp3320.ktype;
          _vtype318 = _rtmp3320.vtype;
          _size316 = _rtmp3320.size;
          for (var _i321 = 0; _i321 < _size316; ++_i321)
          {
            var key322 = null;
            var val323 = null;
            key322 = input.readI64();
            var _size324 = 0;
            var _rtmp3328;
            val323 = [];
            var _etype327 = 0;
            _rtmp3328 = input.readSetBegin();
            _etype327 = _rtmp3328.etype;
            _size324 = _rtmp3328.size;
            for (var _i329 = 0; _i329 < _size324; ++_i329)
            {
              var elem330 = null;
              elem330 = new data_ttypes.TObject();
              elem330.read(input);
              val323.push(elem330);
            }
            input.readSetEnd();
            this.success[key322] = val323;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_chronologizeKeyRecordStartstr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_chronologizeKeyRecordStartstr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter331 in this.success)
      {
        if (this.success.hasOwnProperty(kiter331))
        {
          var viter332 = this.success[kiter331];
          output.writeI64(kiter331);
          output.writeSetBegin(Thrift.Type.STRUCT, viter332.length);
          for (var iter333 in viter332)
          {
            if (viter332.hasOwnProperty(iter333))
            {
              iter333 = viter332[iter333];
              iter333.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_chronologizeKeyRecordStartEnd_args = function(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.start !== undefined && args.start !== null) {
            this.start = args.start;
        }
        if (args.tend !== undefined && args.tend !== null) {
            this.tend = args.tend;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_chronologizeKeyRecordStartEnd_args.prototype = {};
ConcourseService_chronologizeKeyRecordStartEnd_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.tend = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_chronologizeKeyRecordStartEnd_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_chronologizeKeyRecordStartEnd_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 3);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.I64, 4);
      output.writeI64(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_chronologizeKeyRecordStartEnd_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_chronologizeKeyRecordStartEnd_result.prototype = {};
ConcourseService_chronologizeKeyRecordStartEnd_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size334 = 0;
          var _rtmp3338;
          this.success = {};
          var _ktype335 = 0;
          var _vtype336 = 0;
          _rtmp3338 = input.readMapBegin();
          _ktype335 = _rtmp3338.ktype;
          _vtype336 = _rtmp3338.vtype;
          _size334 = _rtmp3338.size;
          for (var _i339 = 0; _i339 < _size334; ++_i339)
          {
            var key340 = null;
            var val341 = null;
            key340 = input.readI64();
            var _size342 = 0;
            var _rtmp3346;
            val341 = [];
            var _etype345 = 0;
            _rtmp3346 = input.readSetBegin();
            _etype345 = _rtmp3346.etype;
            _size342 = _rtmp3346.size;
            for (var _i347 = 0; _i347 < _size342; ++_i347)
            {
              var elem348 = null;
              elem348 = new data_ttypes.TObject();
              elem348.read(input);
              val341.push(elem348);
            }
            input.readSetEnd();
            this.success[key340] = val341;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_chronologizeKeyRecordStartEnd_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_chronologizeKeyRecordStartEnd_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter349 in this.success)
      {
        if (this.success.hasOwnProperty(kiter349))
        {
          var viter350 = this.success[kiter349];
          output.writeI64(kiter349);
          output.writeSetBegin(Thrift.Type.STRUCT, viter350.length);
          for (var iter351 in viter350)
          {
            if (viter350.hasOwnProperty(iter351))
            {
              iter351 = viter350[iter351];
              iter351.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_chronologizeKeyRecordStartstrEndstr_args = function(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.start !== undefined && args.start !== null) {
            this.start = args.start;
        }
        if (args.tend !== undefined && args.tend !== null) {
            this.tend = args.tend;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_chronologizeKeyRecordStartstrEndstr_args.prototype = {};
ConcourseService_chronologizeKeyRecordStartstrEndstr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.start = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.tend = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_chronologizeKeyRecordStartstrEndstr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_chronologizeKeyRecordStartstrEndstr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 3);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.STRING, 4);
      output.writeString(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_chronologizeKeyRecordStartstrEndstr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_chronologizeKeyRecordStartstrEndstr_result.prototype = {};
ConcourseService_chronologizeKeyRecordStartstrEndstr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size352 = 0;
          var _rtmp3356;
          this.success = {};
          var _ktype353 = 0;
          var _vtype354 = 0;
          _rtmp3356 = input.readMapBegin();
          _ktype353 = _rtmp3356.ktype;
          _vtype354 = _rtmp3356.vtype;
          _size352 = _rtmp3356.size;
          for (var _i357 = 0; _i357 < _size352; ++_i357)
          {
            var key358 = null;
            var val359 = null;
            key358 = input.readI64();
            var _size360 = 0;
            var _rtmp3364;
            val359 = [];
            var _etype363 = 0;
            _rtmp3364 = input.readSetBegin();
            _etype363 = _rtmp3364.etype;
            _size360 = _rtmp3364.size;
            for (var _i365 = 0; _i365 < _size360; ++_i365)
            {
              var elem366 = null;
              elem366 = new data_ttypes.TObject();
              elem366.read(input);
              val359.push(elem366);
            }
            input.readSetEnd();
            this.success[key358] = val359;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_chronologizeKeyRecordStartstrEndstr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_chronologizeKeyRecordStartstrEndstr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter367 in this.success)
      {
        if (this.success.hasOwnProperty(kiter367))
        {
          var viter368 = this.success[kiter367];
          output.writeI64(kiter367);
          output.writeSetBegin(Thrift.Type.STRUCT, viter368.length);
          for (var iter369 in viter368)
          {
            if (viter368.hasOwnProperty(iter369))
            {
              iter369 = viter368[iter369];
              iter369.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_clearRecord_args = function(args) {
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_clearRecord_args.prototype = {};
ConcourseService_clearRecord_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_clearRecord_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_clearRecord_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_clearRecord_result = function(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_clearRecord_result.prototype = {};
ConcourseService_clearRecord_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_clearRecord_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_clearRecord_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_clearRecords_args = function(args) {
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_clearRecords_args.prototype = {};
ConcourseService_clearRecords_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size370 = 0;
          var _rtmp3374;
          this.records = [];
          var _etype373 = 0;
          _rtmp3374 = input.readListBegin();
          _etype373 = _rtmp3374.etype;
          _size370 = _rtmp3374.size;
          for (var _i375 = 0; _i375 < _size370; ++_i375)
          {
            var elem376 = null;
            elem376 = input.readI64();
            this.records.push(elem376);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_clearRecords_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_clearRecords_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter377 in this.records)
      {
        if (this.records.hasOwnProperty(iter377))
        {
          iter377 = this.records[iter377];
          output.writeI64(iter377);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_clearRecords_result = function(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_clearRecords_result.prototype = {};
ConcourseService_clearRecords_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_clearRecords_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_clearRecords_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_clearKeyRecord_args = function(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_clearKeyRecord_args.prototype = {};
ConcourseService_clearKeyRecord_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_clearKeyRecord_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_clearKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_clearKeyRecord_result = function(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_clearKeyRecord_result.prototype = {};
ConcourseService_clearKeyRecord_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_clearKeyRecord_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_clearKeyRecord_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_clearKeysRecord_args = function(args) {
    this.keys = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_clearKeysRecord_args.prototype = {};
ConcourseService_clearKeysRecord_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size378 = 0;
          var _rtmp3382;
          this.keys = [];
          var _etype381 = 0;
          _rtmp3382 = input.readListBegin();
          _etype381 = _rtmp3382.etype;
          _size378 = _rtmp3382.size;
          for (var _i383 = 0; _i383 < _size378; ++_i383)
          {
            var elem384 = null;
            elem384 = input.readString();
            this.keys.push(elem384);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_clearKeysRecord_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_clearKeysRecord_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter385 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter385))
        {
          iter385 = this.keys[iter385];
          output.writeString(iter385);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_clearKeysRecord_result = function(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_clearKeysRecord_result.prototype = {};
ConcourseService_clearKeysRecord_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_clearKeysRecord_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_clearKeysRecord_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_clearKeyRecords_args = function(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_clearKeyRecords_args.prototype = {};
ConcourseService_clearKeyRecords_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size386 = 0;
          var _rtmp3390;
          this.records = [];
          var _etype389 = 0;
          _rtmp3390 = input.readListBegin();
          _etype389 = _rtmp3390.etype;
          _size386 = _rtmp3390.size;
          for (var _i391 = 0; _i391 < _size386; ++_i391)
          {
            var elem392 = null;
            elem392 = input.readI64();
            this.records.push(elem392);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_clearKeyRecords_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_clearKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter393 in this.records)
      {
        if (this.records.hasOwnProperty(iter393))
        {
          iter393 = this.records[iter393];
          output.writeI64(iter393);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_clearKeyRecords_result = function(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_clearKeyRecords_result.prototype = {};
ConcourseService_clearKeyRecords_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_clearKeyRecords_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_clearKeyRecords_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_clearKeysRecords_args = function(args) {
    this.keys = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_clearKeysRecords_args.prototype = {};
ConcourseService_clearKeysRecords_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size394 = 0;
          var _rtmp3398;
          this.keys = [];
          var _etype397 = 0;
          _rtmp3398 = input.readListBegin();
          _etype397 = _rtmp3398.etype;
          _size394 = _rtmp3398.size;
          for (var _i399 = 0; _i399 < _size394; ++_i399)
          {
            var elem400 = null;
            elem400 = input.readString();
            this.keys.push(elem400);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size401 = 0;
          var _rtmp3405;
          this.records = [];
          var _etype404 = 0;
          _rtmp3405 = input.readListBegin();
          _etype404 = _rtmp3405.etype;
          _size401 = _rtmp3405.size;
          for (var _i406 = 0; _i406 < _size401; ++_i406)
          {
            var elem407 = null;
            elem407 = input.readI64();
            this.records.push(elem407);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_clearKeysRecords_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_clearKeysRecords_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter408 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter408))
        {
          iter408 = this.keys[iter408];
          output.writeString(iter408);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter409 in this.records)
      {
        if (this.records.hasOwnProperty(iter409))
        {
          iter409 = this.records[iter409];
          output.writeI64(iter409);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_clearKeysRecords_result = function(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_clearKeysRecords_result.prototype = {};
ConcourseService_clearKeysRecords_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_clearKeysRecords_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_clearKeysRecords_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_commit_args = function(args) {
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_commit_args.prototype = {};
ConcourseService_commit_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_commit_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_commit_args');
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 1);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 2);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 3);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_commit_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_commit_result.prototype = {};
ConcourseService_commit_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_commit_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_commit_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_describe_args = function(args) {
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_describe_args.prototype = {};
ConcourseService_describe_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_describe_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_describe_args');
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 1);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 2);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 3);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_describe_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyList(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_describe_result.prototype = {};
ConcourseService_describe_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.SET) {
          var _size410 = 0;
          var _rtmp3414;
          this.success = [];
          var _etype413 = 0;
          _rtmp3414 = input.readSetBegin();
          _etype413 = _rtmp3414.etype;
          _size410 = _rtmp3414.size;
          for (var _i415 = 0; _i415 < _size410; ++_i415)
          {
            var elem416 = null;
            elem416 = input.readString();
            this.success.push(elem416);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_describe_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_describe_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.STRING, this.success.length);
      for (var iter417 in this.success)
      {
        if (this.success.hasOwnProperty(iter417))
        {
          iter417 = this.success[iter417];
          output.writeString(iter417);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_describeTime_args = function(args) {
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_describeTime_args.prototype = {};
ConcourseService_describeTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_describeTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_describeTime_args');
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_describeTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyList(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_describeTime_result.prototype = {};
ConcourseService_describeTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.SET) {
          var _size418 = 0;
          var _rtmp3422;
          this.success = [];
          var _etype421 = 0;
          _rtmp3422 = input.readSetBegin();
          _etype421 = _rtmp3422.etype;
          _size418 = _rtmp3422.size;
          for (var _i423 = 0; _i423 < _size418; ++_i423)
          {
            var elem424 = null;
            elem424 = input.readString();
            this.success.push(elem424);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_describeTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_describeTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.STRING, this.success.length);
      for (var iter425 in this.success)
      {
        if (this.success.hasOwnProperty(iter425))
        {
          iter425 = this.success[iter425];
          output.writeString(iter425);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_describeTimestr_args = function(args) {
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_describeTimestr_args.prototype = {};
ConcourseService_describeTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_describeTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_describeTimestr_args');
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_describeTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyList(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_describeTimestr_result.prototype = {};
ConcourseService_describeTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.SET) {
          var _size426 = 0;
          var _rtmp3430;
          this.success = [];
          var _etype429 = 0;
          _rtmp3430 = input.readSetBegin();
          _etype429 = _rtmp3430.etype;
          _size426 = _rtmp3430.size;
          for (var _i431 = 0; _i431 < _size426; ++_i431)
          {
            var elem432 = null;
            elem432 = input.readString();
            this.success.push(elem432);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_describeTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_describeTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.STRING, this.success.length);
      for (var iter433 in this.success)
      {
        if (this.success.hasOwnProperty(iter433))
        {
          iter433 = this.success[iter433];
          output.writeString(iter433);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_describeRecord_args = function(args) {
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_describeRecord_args.prototype = {};
ConcourseService_describeRecord_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_describeRecord_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_describeRecord_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_describeRecord_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyList(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_describeRecord_result.prototype = {};
ConcourseService_describeRecord_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.SET) {
          var _size434 = 0;
          var _rtmp3438;
          this.success = [];
          var _etype437 = 0;
          _rtmp3438 = input.readSetBegin();
          _etype437 = _rtmp3438.etype;
          _size434 = _rtmp3438.size;
          for (var _i439 = 0; _i439 < _size434; ++_i439)
          {
            var elem440 = null;
            elem440 = input.readString();
            this.success.push(elem440);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_describeRecord_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_describeRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.STRING, this.success.length);
      for (var iter441 in this.success)
      {
        if (this.success.hasOwnProperty(iter441))
        {
          iter441 = this.success[iter441];
          output.writeString(iter441);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_describeRecordTime_args = function(args) {
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_describeRecordTime_args.prototype = {};
ConcourseService_describeRecordTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_describeRecordTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_describeRecordTime_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_describeRecordTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyList(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_describeRecordTime_result.prototype = {};
ConcourseService_describeRecordTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.SET) {
          var _size442 = 0;
          var _rtmp3446;
          this.success = [];
          var _etype445 = 0;
          _rtmp3446 = input.readSetBegin();
          _etype445 = _rtmp3446.etype;
          _size442 = _rtmp3446.size;
          for (var _i447 = 0; _i447 < _size442; ++_i447)
          {
            var elem448 = null;
            elem448 = input.readString();
            this.success.push(elem448);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_describeRecordTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_describeRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.STRING, this.success.length);
      for (var iter449 in this.success)
      {
        if (this.success.hasOwnProperty(iter449))
        {
          iter449 = this.success[iter449];
          output.writeString(iter449);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_describeRecordTimestr_args = function(args) {
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_describeRecordTimestr_args.prototype = {};
ConcourseService_describeRecordTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_describeRecordTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_describeRecordTimestr_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_describeRecordTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyList(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_describeRecordTimestr_result.prototype = {};
ConcourseService_describeRecordTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.SET) {
          var _size450 = 0;
          var _rtmp3454;
          this.success = [];
          var _etype453 = 0;
          _rtmp3454 = input.readSetBegin();
          _etype453 = _rtmp3454.etype;
          _size450 = _rtmp3454.size;
          for (var _i455 = 0; _i455 < _size450; ++_i455)
          {
            var elem456 = null;
            elem456 = input.readString();
            this.success.push(elem456);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_describeRecordTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_describeRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.STRING, this.success.length);
      for (var iter457 in this.success)
      {
        if (this.success.hasOwnProperty(iter457))
        {
          iter457 = this.success[iter457];
          output.writeString(iter457);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_describeRecords_args = function(args) {
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_describeRecords_args.prototype = {};
ConcourseService_describeRecords_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size458 = 0;
          var _rtmp3462;
          this.records = [];
          var _etype461 = 0;
          _rtmp3462 = input.readListBegin();
          _etype461 = _rtmp3462.etype;
          _size458 = _rtmp3462.size;
          for (var _i463 = 0; _i463 < _size458; ++_i463)
          {
            var elem464 = null;
            elem464 = input.readI64();
            this.records.push(elem464);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_describeRecords_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_describeRecords_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter465 in this.records)
      {
        if (this.records.hasOwnProperty(iter465))
        {
          iter465 = this.records[iter465];
          output.writeI64(iter465);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_describeRecords_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_describeRecords_result.prototype = {};
ConcourseService_describeRecords_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size466 = 0;
          var _rtmp3470;
          this.success = {};
          var _ktype467 = 0;
          var _vtype468 = 0;
          _rtmp3470 = input.readMapBegin();
          _ktype467 = _rtmp3470.ktype;
          _vtype468 = _rtmp3470.vtype;
          _size466 = _rtmp3470.size;
          for (var _i471 = 0; _i471 < _size466; ++_i471)
          {
            var key472 = null;
            var val473 = null;
            key472 = input.readI64();
            var _size474 = 0;
            var _rtmp3478;
            val473 = [];
            var _etype477 = 0;
            _rtmp3478 = input.readSetBegin();
            _etype477 = _rtmp3478.etype;
            _size474 = _rtmp3478.size;
            for (var _i479 = 0; _i479 < _size474; ++_i479)
            {
              var elem480 = null;
              elem480 = input.readString();
              val473.push(elem480);
            }
            input.readSetEnd();
            this.success[key472] = val473;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_describeRecords_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_describeRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter481 in this.success)
      {
        if (this.success.hasOwnProperty(kiter481))
        {
          var viter482 = this.success[kiter481];
          output.writeI64(kiter481);
          output.writeSetBegin(Thrift.Type.STRING, viter482.length);
          for (var iter483 in viter482)
          {
            if (viter482.hasOwnProperty(iter483))
            {
              iter483 = viter482[iter483];
              output.writeString(iter483);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_describeRecordsTime_args = function(args) {
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_describeRecordsTime_args.prototype = {};
ConcourseService_describeRecordsTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size484 = 0;
          var _rtmp3488;
          this.records = [];
          var _etype487 = 0;
          _rtmp3488 = input.readListBegin();
          _etype487 = _rtmp3488.etype;
          _size484 = _rtmp3488.size;
          for (var _i489 = 0; _i489 < _size484; ++_i489)
          {
            var elem490 = null;
            elem490 = input.readI64();
            this.records.push(elem490);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_describeRecordsTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_describeRecordsTime_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter491 in this.records)
      {
        if (this.records.hasOwnProperty(iter491))
        {
          iter491 = this.records[iter491];
          output.writeI64(iter491);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_describeRecordsTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_describeRecordsTime_result.prototype = {};
ConcourseService_describeRecordsTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size492 = 0;
          var _rtmp3496;
          this.success = {};
          var _ktype493 = 0;
          var _vtype494 = 0;
          _rtmp3496 = input.readMapBegin();
          _ktype493 = _rtmp3496.ktype;
          _vtype494 = _rtmp3496.vtype;
          _size492 = _rtmp3496.size;
          for (var _i497 = 0; _i497 < _size492; ++_i497)
          {
            var key498 = null;
            var val499 = null;
            key498 = input.readI64();
            var _size500 = 0;
            var _rtmp3504;
            val499 = [];
            var _etype503 = 0;
            _rtmp3504 = input.readSetBegin();
            _etype503 = _rtmp3504.etype;
            _size500 = _rtmp3504.size;
            for (var _i505 = 0; _i505 < _size500; ++_i505)
            {
              var elem506 = null;
              elem506 = input.readString();
              val499.push(elem506);
            }
            input.readSetEnd();
            this.success[key498] = val499;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_describeRecordsTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_describeRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter507 in this.success)
      {
        if (this.success.hasOwnProperty(kiter507))
        {
          var viter508 = this.success[kiter507];
          output.writeI64(kiter507);
          output.writeSetBegin(Thrift.Type.STRING, viter508.length);
          for (var iter509 in viter508)
          {
            if (viter508.hasOwnProperty(iter509))
            {
              iter509 = viter508[iter509];
              output.writeString(iter509);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_describeRecordsTimestr_args = function(args) {
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_describeRecordsTimestr_args.prototype = {};
ConcourseService_describeRecordsTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size510 = 0;
          var _rtmp3514;
          this.records = [];
          var _etype513 = 0;
          _rtmp3514 = input.readListBegin();
          _etype513 = _rtmp3514.etype;
          _size510 = _rtmp3514.size;
          for (var _i515 = 0; _i515 < _size510; ++_i515)
          {
            var elem516 = null;
            elem516 = input.readI64();
            this.records.push(elem516);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_describeRecordsTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_describeRecordsTimestr_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter517 in this.records)
      {
        if (this.records.hasOwnProperty(iter517))
        {
          iter517 = this.records[iter517];
          output.writeI64(iter517);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_describeRecordsTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_describeRecordsTimestr_result.prototype = {};
ConcourseService_describeRecordsTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size518 = 0;
          var _rtmp3522;
          this.success = {};
          var _ktype519 = 0;
          var _vtype520 = 0;
          _rtmp3522 = input.readMapBegin();
          _ktype519 = _rtmp3522.ktype;
          _vtype520 = _rtmp3522.vtype;
          _size518 = _rtmp3522.size;
          for (var _i523 = 0; _i523 < _size518; ++_i523)
          {
            var key524 = null;
            var val525 = null;
            key524 = input.readI64();
            var _size526 = 0;
            var _rtmp3530;
            val525 = [];
            var _etype529 = 0;
            _rtmp3530 = input.readSetBegin();
            _etype529 = _rtmp3530.etype;
            _size526 = _rtmp3530.size;
            for (var _i531 = 0; _i531 < _size526; ++_i531)
            {
              var elem532 = null;
              elem532 = input.readString();
              val525.push(elem532);
            }
            input.readSetEnd();
            this.success[key524] = val525;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_describeRecordsTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_describeRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter533 in this.success)
      {
        if (this.success.hasOwnProperty(kiter533))
        {
          var viter534 = this.success[kiter533];
          output.writeI64(kiter533);
          output.writeSetBegin(Thrift.Type.STRING, viter534.length);
          for (var iter535 in viter534)
          {
            if (viter534.hasOwnProperty(iter535))
            {
              iter535 = viter534[iter535];
              output.writeString(iter535);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_diffRecordStart_args = function(args) {
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.start !== undefined && args.start !== null) {
            this.start = args.start;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_diffRecordStart_args.prototype = {};
ConcourseService_diffRecordStart_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_diffRecordStart_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_diffRecordStart_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_diffRecordStart_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_diffRecordStart_result.prototype = {};
ConcourseService_diffRecordStart_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size536 = 0;
          var _rtmp3540;
          this.success = {};
          var _ktype537 = 0;
          var _vtype538 = 0;
          _rtmp3540 = input.readMapBegin();
          _ktype537 = _rtmp3540.ktype;
          _vtype538 = _rtmp3540.vtype;
          _size536 = _rtmp3540.size;
          for (var _i541 = 0; _i541 < _size536; ++_i541)
          {
            var key542 = null;
            var val543 = null;
            key542 = input.readString();
            var _size544 = 0;
            var _rtmp3548;
            val543 = {};
            var _ktype545 = 0;
            var _vtype546 = 0;
            _rtmp3548 = input.readMapBegin();
            _ktype545 = _rtmp3548.ktype;
            _vtype546 = _rtmp3548.vtype;
            _size544 = _rtmp3548.size;
            for (var _i549 = 0; _i549 < _size544; ++_i549)
            {
              var key550 = null;
              var val551 = null;
              key550 = input.readI32();
              var _size552 = 0;
              var _rtmp3556;
              val551 = [];
              var _etype555 = 0;
              _rtmp3556 = input.readSetBegin();
              _etype555 = _rtmp3556.etype;
              _size552 = _rtmp3556.size;
              for (var _i557 = 0; _i557 < _size552; ++_i557)
              {
                var elem558 = null;
                elem558 = new data_ttypes.TObject();
                elem558.read(input);
                val551.push(elem558);
              }
              input.readSetEnd();
              val543[key550] = val551;
            }
            input.readMapEnd();
            this.success[key542] = val543;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_diffRecordStart_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_diffRecordStart_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter559 in this.success)
      {
        if (this.success.hasOwnProperty(kiter559))
        {
          var viter560 = this.success[kiter559];
          output.writeString(kiter559);
          output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(viter560));
          for (var kiter561 in viter560)
          {
            if (viter560.hasOwnProperty(kiter561))
            {
              var viter562 = viter560[kiter561];
              output.writeI32(kiter561);
              output.writeSetBegin(Thrift.Type.STRUCT, viter562.length);
              for (var iter563 in viter562)
              {
                if (viter562.hasOwnProperty(iter563))
                {
                  iter563 = viter562[iter563];
                  iter563.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_diffRecordStartstr_args = function(args) {
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.start !== undefined && args.start !== null) {
            this.start = args.start;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_diffRecordStartstr_args.prototype = {};
ConcourseService_diffRecordStartstr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.start = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_diffRecordStartstr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_diffRecordStartstr_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 2);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_diffRecordStartstr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_diffRecordStartstr_result.prototype = {};
ConcourseService_diffRecordStartstr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size564 = 0;
          var _rtmp3568;
          this.success = {};
          var _ktype565 = 0;
          var _vtype566 = 0;
          _rtmp3568 = input.readMapBegin();
          _ktype565 = _rtmp3568.ktype;
          _vtype566 = _rtmp3568.vtype;
          _size564 = _rtmp3568.size;
          for (var _i569 = 0; _i569 < _size564; ++_i569)
          {
            var key570 = null;
            var val571 = null;
            key570 = input.readString();
            var _size572 = 0;
            var _rtmp3576;
            val571 = {};
            var _ktype573 = 0;
            var _vtype574 = 0;
            _rtmp3576 = input.readMapBegin();
            _ktype573 = _rtmp3576.ktype;
            _vtype574 = _rtmp3576.vtype;
            _size572 = _rtmp3576.size;
            for (var _i577 = 0; _i577 < _size572; ++_i577)
            {
              var key578 = null;
              var val579 = null;
              key578 = input.readI32();
              var _size580 = 0;
              var _rtmp3584;
              val579 = [];
              var _etype583 = 0;
              _rtmp3584 = input.readSetBegin();
              _etype583 = _rtmp3584.etype;
              _size580 = _rtmp3584.size;
              for (var _i585 = 0; _i585 < _size580; ++_i585)
              {
                var elem586 = null;
                elem586 = new data_ttypes.TObject();
                elem586.read(input);
                val579.push(elem586);
              }
              input.readSetEnd();
              val571[key578] = val579;
            }
            input.readMapEnd();
            this.success[key570] = val571;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_diffRecordStartstr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_diffRecordStartstr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter587 in this.success)
      {
        if (this.success.hasOwnProperty(kiter587))
        {
          var viter588 = this.success[kiter587];
          output.writeString(kiter587);
          output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(viter588));
          for (var kiter589 in viter588)
          {
            if (viter588.hasOwnProperty(kiter589))
            {
              var viter590 = viter588[kiter589];
              output.writeI32(kiter589);
              output.writeSetBegin(Thrift.Type.STRUCT, viter590.length);
              for (var iter591 in viter590)
              {
                if (viter590.hasOwnProperty(iter591))
                {
                  iter591 = viter590[iter591];
                  iter591.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_diffRecordStartEnd_args = function(args) {
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.start !== undefined && args.start !== null) {
            this.start = args.start;
        }
        if (args.tend !== undefined && args.tend !== null) {
            this.tend = args.tend;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_diffRecordStartEnd_args.prototype = {};
ConcourseService_diffRecordStartEnd_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.tend = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_diffRecordStartEnd_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_diffRecordStartEnd_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.I64, 3);
      output.writeI64(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_diffRecordStartEnd_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_diffRecordStartEnd_result.prototype = {};
ConcourseService_diffRecordStartEnd_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size592 = 0;
          var _rtmp3596;
          this.success = {};
          var _ktype593 = 0;
          var _vtype594 = 0;
          _rtmp3596 = input.readMapBegin();
          _ktype593 = _rtmp3596.ktype;
          _vtype594 = _rtmp3596.vtype;
          _size592 = _rtmp3596.size;
          for (var _i597 = 0; _i597 < _size592; ++_i597)
          {
            var key598 = null;
            var val599 = null;
            key598 = input.readString();
            var _size600 = 0;
            var _rtmp3604;
            val599 = {};
            var _ktype601 = 0;
            var _vtype602 = 0;
            _rtmp3604 = input.readMapBegin();
            _ktype601 = _rtmp3604.ktype;
            _vtype602 = _rtmp3604.vtype;
            _size600 = _rtmp3604.size;
            for (var _i605 = 0; _i605 < _size600; ++_i605)
            {
              var key606 = null;
              var val607 = null;
              key606 = input.readI32();
              var _size608 = 0;
              var _rtmp3612;
              val607 = [];
              var _etype611 = 0;
              _rtmp3612 = input.readSetBegin();
              _etype611 = _rtmp3612.etype;
              _size608 = _rtmp3612.size;
              for (var _i613 = 0; _i613 < _size608; ++_i613)
              {
                var elem614 = null;
                elem614 = new data_ttypes.TObject();
                elem614.read(input);
                val607.push(elem614);
              }
              input.readSetEnd();
              val599[key606] = val607;
            }
            input.readMapEnd();
            this.success[key598] = val599;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_diffRecordStartEnd_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_diffRecordStartEnd_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter615 in this.success)
      {
        if (this.success.hasOwnProperty(kiter615))
        {
          var viter616 = this.success[kiter615];
          output.writeString(kiter615);
          output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(viter616));
          for (var kiter617 in viter616)
          {
            if (viter616.hasOwnProperty(kiter617))
            {
              var viter618 = viter616[kiter617];
              output.writeI32(kiter617);
              output.writeSetBegin(Thrift.Type.STRUCT, viter618.length);
              for (var iter619 in viter618)
              {
                if (viter618.hasOwnProperty(iter619))
                {
                  iter619 = viter618[iter619];
                  iter619.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_diffRecordStartstrEndstr_args = function(args) {
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.start !== undefined && args.start !== null) {
            this.start = args.start;
        }
        if (args.tend !== undefined && args.tend !== null) {
            this.tend = args.tend;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_diffRecordStartstrEndstr_args.prototype = {};
ConcourseService_diffRecordStartstrEndstr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.start = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.tend = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_diffRecordStartstrEndstr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_diffRecordStartstrEndstr_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 2);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.STRING, 3);
      output.writeString(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_diffRecordStartstrEndstr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_diffRecordStartstrEndstr_result.prototype = {};
ConcourseService_diffRecordStartstrEndstr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size620 = 0;
          var _rtmp3624;
          this.success = {};
          var _ktype621 = 0;
          var _vtype622 = 0;
          _rtmp3624 = input.readMapBegin();
          _ktype621 = _rtmp3624.ktype;
          _vtype622 = _rtmp3624.vtype;
          _size620 = _rtmp3624.size;
          for (var _i625 = 0; _i625 < _size620; ++_i625)
          {
            var key626 = null;
            var val627 = null;
            key626 = input.readString();
            var _size628 = 0;
            var _rtmp3632;
            val627 = {};
            var _ktype629 = 0;
            var _vtype630 = 0;
            _rtmp3632 = input.readMapBegin();
            _ktype629 = _rtmp3632.ktype;
            _vtype630 = _rtmp3632.vtype;
            _size628 = _rtmp3632.size;
            for (var _i633 = 0; _i633 < _size628; ++_i633)
            {
              var key634 = null;
              var val635 = null;
              key634 = input.readI32();
              var _size636 = 0;
              var _rtmp3640;
              val635 = [];
              var _etype639 = 0;
              _rtmp3640 = input.readSetBegin();
              _etype639 = _rtmp3640.etype;
              _size636 = _rtmp3640.size;
              for (var _i641 = 0; _i641 < _size636; ++_i641)
              {
                var elem642 = null;
                elem642 = new data_ttypes.TObject();
                elem642.read(input);
                val635.push(elem642);
              }
              input.readSetEnd();
              val627[key634] = val635;
            }
            input.readMapEnd();
            this.success[key626] = val627;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_diffRecordStartstrEndstr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_diffRecordStartstrEndstr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter643 in this.success)
      {
        if (this.success.hasOwnProperty(kiter643))
        {
          var viter644 = this.success[kiter643];
          output.writeString(kiter643);
          output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(viter644));
          for (var kiter645 in viter644)
          {
            if (viter644.hasOwnProperty(kiter645))
            {
              var viter646 = viter644[kiter645];
              output.writeI32(kiter645);
              output.writeSetBegin(Thrift.Type.STRUCT, viter646.length);
              for (var iter647 in viter646)
              {
                if (viter646.hasOwnProperty(iter647))
                {
                  iter647 = viter646[iter647];
                  iter647.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_diffKeyRecordStart_args = function(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.start !== undefined && args.start !== null) {
            this.start = args.start;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_diffKeyRecordStart_args.prototype = {};
ConcourseService_diffKeyRecordStart_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_diffKeyRecordStart_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_diffKeyRecordStart_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 3);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_diffKeyRecordStart_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_diffKeyRecordStart_result.prototype = {};
ConcourseService_diffKeyRecordStart_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size648 = 0;
          var _rtmp3652;
          this.success = {};
          var _ktype649 = 0;
          var _vtype650 = 0;
          _rtmp3652 = input.readMapBegin();
          _ktype649 = _rtmp3652.ktype;
          _vtype650 = _rtmp3652.vtype;
          _size648 = _rtmp3652.size;
          for (var _i653 = 0; _i653 < _size648; ++_i653)
          {
            var key654 = null;
            var val655 = null;
            key654 = input.readI32();
            var _size656 = 0;
            var _rtmp3660;
            val655 = [];
            var _etype659 = 0;
            _rtmp3660 = input.readSetBegin();
            _etype659 = _rtmp3660.etype;
            _size656 = _rtmp3660.size;
            for (var _i661 = 0; _i661 < _size656; ++_i661)
            {
              var elem662 = null;
              elem662 = new data_ttypes.TObject();
              elem662.read(input);
              val655.push(elem662);
            }
            input.readSetEnd();
            this.success[key654] = val655;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_diffKeyRecordStart_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_diffKeyRecordStart_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter663 in this.success)
      {
        if (this.success.hasOwnProperty(kiter663))
        {
          var viter664 = this.success[kiter663];
          output.writeI32(kiter663);
          output.writeSetBegin(Thrift.Type.STRUCT, viter664.length);
          for (var iter665 in viter664)
          {
            if (viter664.hasOwnProperty(iter665))
            {
              iter665 = viter664[iter665];
              iter665.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_diffKeyRecordStartstr_args = function(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.start !== undefined && args.start !== null) {
            this.start = args.start;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_diffKeyRecordStartstr_args.prototype = {};
ConcourseService_diffKeyRecordStartstr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.start = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_diffKeyRecordStartstr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_diffKeyRecordStartstr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 3);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_diffKeyRecordStartstr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_diffKeyRecordStartstr_result.prototype = {};
ConcourseService_diffKeyRecordStartstr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size666 = 0;
          var _rtmp3670;
          this.success = {};
          var _ktype667 = 0;
          var _vtype668 = 0;
          _rtmp3670 = input.readMapBegin();
          _ktype667 = _rtmp3670.ktype;
          _vtype668 = _rtmp3670.vtype;
          _size666 = _rtmp3670.size;
          for (var _i671 = 0; _i671 < _size666; ++_i671)
          {
            var key672 = null;
            var val673 = null;
            key672 = input.readI32();
            var _size674 = 0;
            var _rtmp3678;
            val673 = [];
            var _etype677 = 0;
            _rtmp3678 = input.readSetBegin();
            _etype677 = _rtmp3678.etype;
            _size674 = _rtmp3678.size;
            for (var _i679 = 0; _i679 < _size674; ++_i679)
            {
              var elem680 = null;
              elem680 = new data_ttypes.TObject();
              elem680.read(input);
              val673.push(elem680);
            }
            input.readSetEnd();
            this.success[key672] = val673;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_diffKeyRecordStartstr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_diffKeyRecordStartstr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter681 in this.success)
      {
        if (this.success.hasOwnProperty(kiter681))
        {
          var viter682 = this.success[kiter681];
          output.writeI32(kiter681);
          output.writeSetBegin(Thrift.Type.STRUCT, viter682.length);
          for (var iter683 in viter682)
          {
            if (viter682.hasOwnProperty(iter683))
            {
              iter683 = viter682[iter683];
              iter683.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_diffKeyRecordStartEnd_args = function(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.start !== undefined && args.start !== null) {
            this.start = args.start;
        }
        if (args.tend !== undefined && args.tend !== null) {
            this.tend = args.tend;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_diffKeyRecordStartEnd_args.prototype = {};
ConcourseService_diffKeyRecordStartEnd_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.tend = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_diffKeyRecordStartEnd_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_diffKeyRecordStartEnd_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 3);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.I64, 4);
      output.writeI64(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_diffKeyRecordStartEnd_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_diffKeyRecordStartEnd_result.prototype = {};
ConcourseService_diffKeyRecordStartEnd_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size684 = 0;
          var _rtmp3688;
          this.success = {};
          var _ktype685 = 0;
          var _vtype686 = 0;
          _rtmp3688 = input.readMapBegin();
          _ktype685 = _rtmp3688.ktype;
          _vtype686 = _rtmp3688.vtype;
          _size684 = _rtmp3688.size;
          for (var _i689 = 0; _i689 < _size684; ++_i689)
          {
            var key690 = null;
            var val691 = null;
            key690 = input.readI32();
            var _size692 = 0;
            var _rtmp3696;
            val691 = [];
            var _etype695 = 0;
            _rtmp3696 = input.readSetBegin();
            _etype695 = _rtmp3696.etype;
            _size692 = _rtmp3696.size;
            for (var _i697 = 0; _i697 < _size692; ++_i697)
            {
              var elem698 = null;
              elem698 = new data_ttypes.TObject();
              elem698.read(input);
              val691.push(elem698);
            }
            input.readSetEnd();
            this.success[key690] = val691;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_diffKeyRecordStartEnd_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_diffKeyRecordStartEnd_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter699 in this.success)
      {
        if (this.success.hasOwnProperty(kiter699))
        {
          var viter700 = this.success[kiter699];
          output.writeI32(kiter699);
          output.writeSetBegin(Thrift.Type.STRUCT, viter700.length);
          for (var iter701 in viter700)
          {
            if (viter700.hasOwnProperty(iter701))
            {
              iter701 = viter700[iter701];
              iter701.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_diffKeyRecordStartstrEndstr_args = function(args) {
    this.key = null;
    this.record = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.start !== undefined && args.start !== null) {
            this.start = args.start;
        }
        if (args.tend !== undefined && args.tend !== null) {
            this.tend = args.tend;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_diffKeyRecordStartstrEndstr_args.prototype = {};
ConcourseService_diffKeyRecordStartstrEndstr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.start = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.tend = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_diffKeyRecordStartstrEndstr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_diffKeyRecordStartstrEndstr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 3);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.STRING, 4);
      output.writeString(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_diffKeyRecordStartstrEndstr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_diffKeyRecordStartstrEndstr_result.prototype = {};
ConcourseService_diffKeyRecordStartstrEndstr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size702 = 0;
          var _rtmp3706;
          this.success = {};
          var _ktype703 = 0;
          var _vtype704 = 0;
          _rtmp3706 = input.readMapBegin();
          _ktype703 = _rtmp3706.ktype;
          _vtype704 = _rtmp3706.vtype;
          _size702 = _rtmp3706.size;
          for (var _i707 = 0; _i707 < _size702; ++_i707)
          {
            var key708 = null;
            var val709 = null;
            key708 = input.readI32();
            var _size710 = 0;
            var _rtmp3714;
            val709 = [];
            var _etype713 = 0;
            _rtmp3714 = input.readSetBegin();
            _etype713 = _rtmp3714.etype;
            _size710 = _rtmp3714.size;
            for (var _i715 = 0; _i715 < _size710; ++_i715)
            {
              var elem716 = null;
              elem716 = new data_ttypes.TObject();
              elem716.read(input);
              val709.push(elem716);
            }
            input.readSetEnd();
            this.success[key708] = val709;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_diffKeyRecordStartstrEndstr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_diffKeyRecordStartstrEndstr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter717 in this.success)
      {
        if (this.success.hasOwnProperty(kiter717))
        {
          var viter718 = this.success[kiter717];
          output.writeI32(kiter717);
          output.writeSetBegin(Thrift.Type.STRUCT, viter718.length);
          for (var iter719 in viter718)
          {
            if (viter718.hasOwnProperty(iter719))
            {
              iter719 = viter718[iter719];
              iter719.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_diffKeyStart_args = function(args) {
    this.key = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.start !== undefined && args.start !== null) {
            this.start = args.start;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_diffKeyStart_args.prototype = {};
ConcourseService_diffKeyStart_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_diffKeyStart_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_diffKeyStart_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_diffKeyStart_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_diffKeyStart_result.prototype = {};
ConcourseService_diffKeyStart_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size720 = 0;
          var _rtmp3724;
          this.success = {};
          var _ktype721 = 0;
          var _vtype722 = 0;
          _rtmp3724 = input.readMapBegin();
          _ktype721 = _rtmp3724.ktype;
          _vtype722 = _rtmp3724.vtype;
          _size720 = _rtmp3724.size;
          for (var _i725 = 0; _i725 < _size720; ++_i725)
          {
            var key726 = null;
            var val727 = null;
            key726 = new data_ttypes.TObject();
            key726.read(input);
            var _size728 = 0;
            var _rtmp3732;
            val727 = {};
            var _ktype729 = 0;
            var _vtype730 = 0;
            _rtmp3732 = input.readMapBegin();
            _ktype729 = _rtmp3732.ktype;
            _vtype730 = _rtmp3732.vtype;
            _size728 = _rtmp3732.size;
            for (var _i733 = 0; _i733 < _size728; ++_i733)
            {
              var key734 = null;
              var val735 = null;
              key734 = input.readI32();
              var _size736 = 0;
              var _rtmp3740;
              val735 = [];
              var _etype739 = 0;
              _rtmp3740 = input.readSetBegin();
              _etype739 = _rtmp3740.etype;
              _size736 = _rtmp3740.size;
              for (var _i741 = 0; _i741 < _size736; ++_i741)
              {
                var elem742 = null;
                elem742 = input.readI64();
                val735.push(elem742);
              }
              input.readSetEnd();
              val727[key734] = val735;
            }
            input.readMapEnd();
            this.success[key726] = val727;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_diffKeyStart_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_diffKeyStart_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter743 in this.success)
      {
        if (this.success.hasOwnProperty(kiter743))
        {
          var viter744 = this.success[kiter743];
          kiter743.write(output);
          output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(viter744));
          for (var kiter745 in viter744)
          {
            if (viter744.hasOwnProperty(kiter745))
            {
              var viter746 = viter744[kiter745];
              output.writeI32(kiter745);
              output.writeSetBegin(Thrift.Type.I64, viter746.length);
              for (var iter747 in viter746)
              {
                if (viter746.hasOwnProperty(iter747))
                {
                  iter747 = viter746[iter747];
                  output.writeI64(iter747);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_diffKeyStartstr_args = function(args) {
    this.key = null;
    this.start = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.start !== undefined && args.start !== null) {
            this.start = args.start;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_diffKeyStartstr_args.prototype = {};
ConcourseService_diffKeyStartstr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.start = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_diffKeyStartstr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_diffKeyStartstr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 2);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_diffKeyStartstr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_diffKeyStartstr_result.prototype = {};
ConcourseService_diffKeyStartstr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size748 = 0;
          var _rtmp3752;
          this.success = {};
          var _ktype749 = 0;
          var _vtype750 = 0;
          _rtmp3752 = input.readMapBegin();
          _ktype749 = _rtmp3752.ktype;
          _vtype750 = _rtmp3752.vtype;
          _size748 = _rtmp3752.size;
          for (var _i753 = 0; _i753 < _size748; ++_i753)
          {
            var key754 = null;
            var val755 = null;
            key754 = new data_ttypes.TObject();
            key754.read(input);
            var _size756 = 0;
            var _rtmp3760;
            val755 = {};
            var _ktype757 = 0;
            var _vtype758 = 0;
            _rtmp3760 = input.readMapBegin();
            _ktype757 = _rtmp3760.ktype;
            _vtype758 = _rtmp3760.vtype;
            _size756 = _rtmp3760.size;
            for (var _i761 = 0; _i761 < _size756; ++_i761)
            {
              var key762 = null;
              var val763 = null;
              key762 = input.readI32();
              var _size764 = 0;
              var _rtmp3768;
              val763 = [];
              var _etype767 = 0;
              _rtmp3768 = input.readSetBegin();
              _etype767 = _rtmp3768.etype;
              _size764 = _rtmp3768.size;
              for (var _i769 = 0; _i769 < _size764; ++_i769)
              {
                var elem770 = null;
                elem770 = input.readI64();
                val763.push(elem770);
              }
              input.readSetEnd();
              val755[key762] = val763;
            }
            input.readMapEnd();
            this.success[key754] = val755;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_diffKeyStartstr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_diffKeyStartstr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter771 in this.success)
      {
        if (this.success.hasOwnProperty(kiter771))
        {
          var viter772 = this.success[kiter771];
          kiter771.write(output);
          output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(viter772));
          for (var kiter773 in viter772)
          {
            if (viter772.hasOwnProperty(kiter773))
            {
              var viter774 = viter772[kiter773];
              output.writeI32(kiter773);
              output.writeSetBegin(Thrift.Type.I64, viter774.length);
              for (var iter775 in viter774)
              {
                if (viter774.hasOwnProperty(iter775))
                {
                  iter775 = viter774[iter775];
                  output.writeI64(iter775);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_diffKeyStartEnd_args = function(args) {
    this.key = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.start !== undefined && args.start !== null) {
            this.start = args.start;
        }
        if (args.tend !== undefined && args.tend !== null) {
            this.tend = args.tend;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_diffKeyStartEnd_args.prototype = {};
ConcourseService_diffKeyStartEnd_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.start = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.tend = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_diffKeyStartEnd_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_diffKeyStartEnd_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.I64, 2);
      output.writeI64(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.I64, 3);
      output.writeI64(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_diffKeyStartEnd_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_diffKeyStartEnd_result.prototype = {};
ConcourseService_diffKeyStartEnd_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size776 = 0;
          var _rtmp3780;
          this.success = {};
          var _ktype777 = 0;
          var _vtype778 = 0;
          _rtmp3780 = input.readMapBegin();
          _ktype777 = _rtmp3780.ktype;
          _vtype778 = _rtmp3780.vtype;
          _size776 = _rtmp3780.size;
          for (var _i781 = 0; _i781 < _size776; ++_i781)
          {
            var key782 = null;
            var val783 = null;
            key782 = new data_ttypes.TObject();
            key782.read(input);
            var _size784 = 0;
            var _rtmp3788;
            val783 = {};
            var _ktype785 = 0;
            var _vtype786 = 0;
            _rtmp3788 = input.readMapBegin();
            _ktype785 = _rtmp3788.ktype;
            _vtype786 = _rtmp3788.vtype;
            _size784 = _rtmp3788.size;
            for (var _i789 = 0; _i789 < _size784; ++_i789)
            {
              var key790 = null;
              var val791 = null;
              key790 = input.readI32();
              var _size792 = 0;
              var _rtmp3796;
              val791 = [];
              var _etype795 = 0;
              _rtmp3796 = input.readSetBegin();
              _etype795 = _rtmp3796.etype;
              _size792 = _rtmp3796.size;
              for (var _i797 = 0; _i797 < _size792; ++_i797)
              {
                var elem798 = null;
                elem798 = input.readI64();
                val791.push(elem798);
              }
              input.readSetEnd();
              val783[key790] = val791;
            }
            input.readMapEnd();
            this.success[key782] = val783;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_diffKeyStartEnd_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_diffKeyStartEnd_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter799 in this.success)
      {
        if (this.success.hasOwnProperty(kiter799))
        {
          var viter800 = this.success[kiter799];
          kiter799.write(output);
          output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(viter800));
          for (var kiter801 in viter800)
          {
            if (viter800.hasOwnProperty(kiter801))
            {
              var viter802 = viter800[kiter801];
              output.writeI32(kiter801);
              output.writeSetBegin(Thrift.Type.I64, viter802.length);
              for (var iter803 in viter802)
              {
                if (viter802.hasOwnProperty(iter803))
                {
                  iter803 = viter802[iter803];
                  output.writeI64(iter803);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_diffKeyStartstrEndstr_args = function(args) {
    this.key = null;
    this.start = null;
    this.tend = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.start !== undefined && args.start !== null) {
            this.start = args.start;
        }
        if (args.tend !== undefined && args.tend !== null) {
            this.tend = args.tend;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_diffKeyStartstrEndstr_args.prototype = {};
ConcourseService_diffKeyStartstrEndstr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.start = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.tend = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_diffKeyStartstrEndstr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_diffKeyStartstrEndstr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.start !== null && this.start !== undefined) {
      output.writeFieldBegin('start', Thrift.Type.STRING, 2);
      output.writeString(this.start);
      output.writeFieldEnd();
    }
    if (this.tend !== null && this.tend !== undefined) {
      output.writeFieldBegin('tend', Thrift.Type.STRING, 3);
      output.writeString(this.tend);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_diffKeyStartstrEndstr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_diffKeyStartstrEndstr_result.prototype = {};
ConcourseService_diffKeyStartstrEndstr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size804 = 0;
          var _rtmp3808;
          this.success = {};
          var _ktype805 = 0;
          var _vtype806 = 0;
          _rtmp3808 = input.readMapBegin();
          _ktype805 = _rtmp3808.ktype;
          _vtype806 = _rtmp3808.vtype;
          _size804 = _rtmp3808.size;
          for (var _i809 = 0; _i809 < _size804; ++_i809)
          {
            var key810 = null;
            var val811 = null;
            key810 = new data_ttypes.TObject();
            key810.read(input);
            var _size812 = 0;
            var _rtmp3816;
            val811 = {};
            var _ktype813 = 0;
            var _vtype814 = 0;
            _rtmp3816 = input.readMapBegin();
            _ktype813 = _rtmp3816.ktype;
            _vtype814 = _rtmp3816.vtype;
            _size812 = _rtmp3816.size;
            for (var _i817 = 0; _i817 < _size812; ++_i817)
            {
              var key818 = null;
              var val819 = null;
              key818 = input.readI32();
              var _size820 = 0;
              var _rtmp3824;
              val819 = [];
              var _etype823 = 0;
              _rtmp3824 = input.readSetBegin();
              _etype823 = _rtmp3824.etype;
              _size820 = _rtmp3824.size;
              for (var _i825 = 0; _i825 < _size820; ++_i825)
              {
                var elem826 = null;
                elem826 = input.readI64();
                val819.push(elem826);
              }
              input.readSetEnd();
              val811[key818] = val819;
            }
            input.readMapEnd();
            this.success[key810] = val811;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_diffKeyStartstrEndstr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_diffKeyStartstrEndstr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter827 in this.success)
      {
        if (this.success.hasOwnProperty(kiter827))
        {
          var viter828 = this.success[kiter827];
          kiter827.write(output);
          output.writeMapBegin(Thrift.Type.I32, Thrift.Type.SET, Thrift.objectLength(viter828));
          for (var kiter829 in viter828)
          {
            if (viter828.hasOwnProperty(kiter829))
            {
              var viter830 = viter828[kiter829];
              output.writeI32(kiter829);
              output.writeSetBegin(Thrift.Type.I64, viter830.length);
              for (var iter831 in viter830)
              {
                if (viter830.hasOwnProperty(iter831))
                {
                  iter831 = viter830[iter831];
                  output.writeI64(iter831);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_invokePlugin_args = function(args) {
    this.id = null;
    this.method = null;
    this.params = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.id !== undefined && args.id !== null) {
            this.id = args.id;
        }
        if (args.method !== undefined && args.method !== null) {
            this.method = args.method;
        }
        if (args.params !== undefined && args.params !== null) {
            this.params = Thrift.copyList(args.params, [complex_ttypes.ComplexTObject]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_invokePlugin_args.prototype = {};
ConcourseService_invokePlugin_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.method = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size832 = 0;
          var _rtmp3836;
          this.params = [];
          var _etype835 = 0;
          _rtmp3836 = input.readListBegin();
          _etype835 = _rtmp3836.etype;
          _size832 = _rtmp3836.size;
          for (var _i837 = 0; _i837 < _size832; ++_i837)
          {
            var elem838 = null;
            elem838 = new complex_ttypes.ComplexTObject();
            elem838.read(input);
            this.params.push(elem838);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_invokePlugin_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_invokePlugin_args');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    if (this.method !== null && this.method !== undefined) {
      output.writeFieldBegin('method', Thrift.Type.STRING, 2);
      output.writeString(this.method);
      output.writeFieldEnd();
    }
    if (this.params !== null && this.params !== undefined) {
      output.writeFieldBegin('params', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.params.length);
      for (var iter839 in this.params)
      {
        if (this.params.hasOwnProperty(iter839))
        {
          iter839 = this.params[iter839];
          iter839.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_invokePlugin_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new complex_ttypes.ComplexTObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_invokePlugin_result.prototype = {};
ConcourseService_invokePlugin_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new complex_ttypes.ComplexTObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_invokePlugin_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_invokePlugin_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_login_args = function(args) {
    this.username = null;
    this.password = null;
    this.environment = null;
    if (args) {
        if (args.username !== undefined && args.username !== null) {
            this.username = args.username;
        }
        if (args.password !== undefined && args.password !== null) {
            this.password = args.password;
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_login_args.prototype = {};
ConcourseService_login_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.username = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.password = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_login_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_login_args');
    if (this.username !== null && this.username !== undefined) {
      output.writeFieldBegin('username', Thrift.Type.STRING, 1);
      output.writeBinary(this.username);
      output.writeFieldEnd();
    }
    if (this.password !== null && this.password !== undefined) {
      output.writeFieldBegin('password', Thrift.Type.STRING, 2);
      output.writeBinary(this.password);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 3);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_login_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex2 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new shared_ttypes.AccessToken(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
    }
};
ConcourseService_login_result.prototype = {};
ConcourseService_login_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new shared_ttypes.AccessToken();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.PermissionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_login_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_login_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_logout_args = function(args) {
    this.token = null;
    this.environment = null;
    if (args) {
        if (args.token !== undefined && args.token !== null) {
            this.token = new shared_ttypes.AccessToken(args.token);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_logout_args.prototype = {};
ConcourseService_logout_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.token = new shared_ttypes.AccessToken();
          this.token.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_logout_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_logout_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
      this.token.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 2);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_logout_result = function(args) {
    this.ex = null;
    this.ex2 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex2 = args;
        return;
    }
    if (args) {
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
    }
};
ConcourseService_logout_result.prototype = {};
ConcourseService_logout_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.PermissionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_logout_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_logout_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_stage_args = function(args) {
    this.token = null;
    this.environment = null;
    if (args) {
        if (args.token !== undefined && args.token !== null) {
            this.token = new shared_ttypes.AccessToken(args.token);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_stage_args.prototype = {};
ConcourseService_stage_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.token = new shared_ttypes.AccessToken();
          this.token.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_stage_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_stage_args');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
      this.token.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 2);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_stage_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex2 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new shared_ttypes.TransactionToken(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
    }
};
ConcourseService_stage_result.prototype = {};
ConcourseService_stage_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new shared_ttypes.TransactionToken();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.PermissionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_stage_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_stage_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_insertJson_args = function(args) {
    this.json = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.json !== undefined && args.json !== null) {
            this.json = args.json;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_insertJson_args.prototype = {};
ConcourseService_insertJson_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.json = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_insertJson_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_insertJson_args');
    if (this.json !== null && this.json !== undefined) {
      output.writeFieldBegin('json', Thrift.Type.STRING, 1);
      output.writeString(this.json);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_insertJson_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    this.ex5 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex4 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex5 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyList(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
        if (args.ex5 !== undefined && args.ex5 !== null) {
            this.ex5 = args.ex5;
        }
    }
};
ConcourseService_insertJson_result.prototype = {};
ConcourseService_insertJson_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.SET) {
          var _size840 = 0;
          var _rtmp3844;
          this.success = [];
          var _etype843 = 0;
          _rtmp3844 = input.readSetBegin();
          _etype843 = _rtmp3844.etype;
          _size840 = _rtmp3844.size;
          for (var _i845 = 0; _i845 < _size840; ++_i845)
          {
            var elem846 = null;
            elem846 = input.readI64();
            this.success.push(elem846);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.InvalidArgumentException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex5 = new exceptions_ttypes.PermissionException();
          this.ex5.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_insertJson_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_insertJson_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.I64, this.success.length);
      for (var iter847 in this.success)
      {
        if (this.success.hasOwnProperty(iter847))
        {
          iter847 = this.success[iter847];
          output.writeI64(iter847);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    if (this.ex5 !== null && this.ex5 !== undefined) {
      output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
      this.ex5.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_insertJsonRecord_args = function(args) {
    this.json = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.json !== undefined && args.json !== null) {
            this.json = args.json;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_insertJsonRecord_args.prototype = {};
ConcourseService_insertJsonRecord_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.json = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_insertJsonRecord_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_insertJsonRecord_args');
    if (this.json !== null && this.json !== undefined) {
      output.writeFieldBegin('json', Thrift.Type.STRING, 1);
      output.writeString(this.json);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_insertJsonRecord_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    this.ex5 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex4 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex5 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
        if (args.ex5 !== undefined && args.ex5 !== null) {
            this.ex5 = args.ex5;
        }
    }
};
ConcourseService_insertJsonRecord_result.prototype = {};
ConcourseService_insertJsonRecord_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.InvalidArgumentException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex5 = new exceptions_ttypes.PermissionException();
          this.ex5.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_insertJsonRecord_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_insertJsonRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    if (this.ex5 !== null && this.ex5 !== undefined) {
      output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
      this.ex5.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_insertJsonRecords_args = function(args) {
    this.json = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.json !== undefined && args.json !== null) {
            this.json = args.json;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_insertJsonRecords_args.prototype = {};
ConcourseService_insertJsonRecords_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.json = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size848 = 0;
          var _rtmp3852;
          this.records = [];
          var _etype851 = 0;
          _rtmp3852 = input.readListBegin();
          _etype851 = _rtmp3852.etype;
          _size848 = _rtmp3852.size;
          for (var _i853 = 0; _i853 < _size848; ++_i853)
          {
            var elem854 = null;
            elem854 = input.readI64();
            this.records.push(elem854);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_insertJsonRecords_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_insertJsonRecords_args');
    if (this.json !== null && this.json !== undefined) {
      output.writeFieldBegin('json', Thrift.Type.STRING, 1);
      output.writeString(this.json);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter855 in this.records)
      {
        if (this.records.hasOwnProperty(iter855))
        {
          iter855 = this.records[iter855];
          output.writeI64(iter855);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_insertJsonRecords_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    this.ex5 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex4 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex5 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
        if (args.ex5 !== undefined && args.ex5 !== null) {
            this.ex5 = args.ex5;
        }
    }
};
ConcourseService_insertJsonRecords_result.prototype = {};
ConcourseService_insertJsonRecords_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size856 = 0;
          var _rtmp3860;
          this.success = {};
          var _ktype857 = 0;
          var _vtype858 = 0;
          _rtmp3860 = input.readMapBegin();
          _ktype857 = _rtmp3860.ktype;
          _vtype858 = _rtmp3860.vtype;
          _size856 = _rtmp3860.size;
          for (var _i861 = 0; _i861 < _size856; ++_i861)
          {
            var key862 = null;
            var val863 = null;
            key862 = input.readI64();
            val863 = input.readBool();
            this.success[key862] = val863;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.InvalidArgumentException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex5 = new exceptions_ttypes.PermissionException();
          this.ex5.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_insertJsonRecords_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_insertJsonRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.BOOL, Thrift.objectLength(this.success));
      for (var kiter864 in this.success)
      {
        if (this.success.hasOwnProperty(kiter864))
        {
          var viter865 = this.success[kiter864];
          output.writeI64(kiter864);
          output.writeBool(viter865);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    if (this.ex5 !== null && this.ex5 !== undefined) {
      output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
      this.ex5.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_removeKeyValueRecord_args = function(args) {
    this.key = null;
    this.value = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.value !== undefined && args.value !== null) {
            this.value = new data_ttypes.TObject(args.value);
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_removeKeyValueRecord_args.prototype = {};
ConcourseService_removeKeyValueRecord_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_removeKeyValueRecord_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_removeKeyValueRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 3);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_removeKeyValueRecord_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_removeKeyValueRecord_result.prototype = {};
ConcourseService_removeKeyValueRecord_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_removeKeyValueRecord_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_removeKeyValueRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_removeKeyValueRecords_args = function(args) {
    this.key = null;
    this.value = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.value !== undefined && args.value !== null) {
            this.value = new data_ttypes.TObject(args.value);
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_removeKeyValueRecords_args.prototype = {};
ConcourseService_removeKeyValueRecords_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size866 = 0;
          var _rtmp3870;
          this.records = [];
          var _etype869 = 0;
          _rtmp3870 = input.readListBegin();
          _etype869 = _rtmp3870.etype;
          _size866 = _rtmp3870.size;
          for (var _i871 = 0; _i871 < _size866; ++_i871)
          {
            var elem872 = null;
            elem872 = input.readI64();
            this.records.push(elem872);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_removeKeyValueRecords_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_removeKeyValueRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter873 in this.records)
      {
        if (this.records.hasOwnProperty(iter873))
        {
          iter873 = this.records[iter873];
          output.writeI64(iter873);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_removeKeyValueRecords_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_removeKeyValueRecords_result.prototype = {};
ConcourseService_removeKeyValueRecords_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size874 = 0;
          var _rtmp3878;
          this.success = {};
          var _ktype875 = 0;
          var _vtype876 = 0;
          _rtmp3878 = input.readMapBegin();
          _ktype875 = _rtmp3878.ktype;
          _vtype876 = _rtmp3878.vtype;
          _size874 = _rtmp3878.size;
          for (var _i879 = 0; _i879 < _size874; ++_i879)
          {
            var key880 = null;
            var val881 = null;
            key880 = input.readI64();
            val881 = input.readBool();
            this.success[key880] = val881;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_removeKeyValueRecords_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_removeKeyValueRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.BOOL, Thrift.objectLength(this.success));
      for (var kiter882 in this.success)
      {
        if (this.success.hasOwnProperty(kiter882))
        {
          var viter883 = this.success[kiter882];
          output.writeI64(kiter882);
          output.writeBool(viter883);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_setKeyValueRecord_args = function(args) {
    this.key = null;
    this.value = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.value !== undefined && args.value !== null) {
            this.value = new data_ttypes.TObject(args.value);
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_setKeyValueRecord_args.prototype = {};
ConcourseService_setKeyValueRecord_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_setKeyValueRecord_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_setKeyValueRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 3);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_setKeyValueRecord_result = function(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_setKeyValueRecord_result.prototype = {};
ConcourseService_setKeyValueRecord_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_setKeyValueRecord_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_setKeyValueRecord_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_setKeyValue_args = function(args) {
    this.key = null;
    this.value = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.value !== undefined && args.value !== null) {
            this.value = new data_ttypes.TObject(args.value);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_setKeyValue_args.prototype = {};
ConcourseService_setKeyValue_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_setKeyValue_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_setKeyValue_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_setKeyValue_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_setKeyValue_result.prototype = {};
ConcourseService_setKeyValue_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_setKeyValue_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_setKeyValue_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_setKeyValueRecords_args = function(args) {
    this.key = null;
    this.value = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.value !== undefined && args.value !== null) {
            this.value = new data_ttypes.TObject(args.value);
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_setKeyValueRecords_args.prototype = {};
ConcourseService_setKeyValueRecords_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size884 = 0;
          var _rtmp3888;
          this.records = [];
          var _etype887 = 0;
          _rtmp3888 = input.readListBegin();
          _etype887 = _rtmp3888.etype;
          _size884 = _rtmp3888.size;
          for (var _i889 = 0; _i889 < _size884; ++_i889)
          {
            var elem890 = null;
            elem890 = input.readI64();
            this.records.push(elem890);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_setKeyValueRecords_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_setKeyValueRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter891 in this.records)
      {
        if (this.records.hasOwnProperty(iter891))
        {
          iter891 = this.records[iter891];
          output.writeI64(iter891);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_setKeyValueRecords_result = function(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_setKeyValueRecords_result.prototype = {};
ConcourseService_setKeyValueRecords_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_setKeyValueRecords_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_setKeyValueRecords_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_reconcileKeyRecordValues_args = function(args) {
    this.key = null;
    this.record = null;
    this.values = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.values !== undefined && args.values !== null) {
            this.values = Thrift.copyList(args.values, [data_ttypes.TObject]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_reconcileKeyRecordValues_args.prototype = {};
ConcourseService_reconcileKeyRecordValues_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.SET) {
          var _size892 = 0;
          var _rtmp3896;
          this.values = [];
          var _etype895 = 0;
          _rtmp3896 = input.readSetBegin();
          _etype895 = _rtmp3896.etype;
          _size892 = _rtmp3896.size;
          for (var _i897 = 0; _i897 < _size892; ++_i897)
          {
            var elem898 = null;
            elem898 = new data_ttypes.TObject();
            elem898.read(input);
            this.values.push(elem898);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_reconcileKeyRecordValues_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_reconcileKeyRecordValues_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.values !== null && this.values !== undefined) {
      output.writeFieldBegin('values', Thrift.Type.SET, 3);
      output.writeSetBegin(Thrift.Type.STRUCT, this.values.length);
      for (var iter899 in this.values)
      {
        if (this.values.hasOwnProperty(iter899))
        {
          iter899 = this.values[iter899];
          iter899.write(output);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_reconcileKeyRecordValues_result = function(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_reconcileKeyRecordValues_result.prototype = {};
ConcourseService_reconcileKeyRecordValues_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_reconcileKeyRecordValues_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_reconcileKeyRecordValues_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_inventory_args = function(args) {
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_inventory_args.prototype = {};
ConcourseService_inventory_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_inventory_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_inventory_args');
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 1);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 2);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 3);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_inventory_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyList(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_inventory_result.prototype = {};
ConcourseService_inventory_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.SET) {
          var _size900 = 0;
          var _rtmp3904;
          this.success = [];
          var _etype903 = 0;
          _rtmp3904 = input.readSetBegin();
          _etype903 = _rtmp3904.etype;
          _size900 = _rtmp3904.size;
          for (var _i905 = 0; _i905 < _size900; ++_i905)
          {
            var elem906 = null;
            elem906 = input.readI64();
            this.success.push(elem906);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_inventory_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_inventory_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.I64, this.success.length);
      for (var iter907 in this.success)
      {
        if (this.success.hasOwnProperty(iter907))
        {
          iter907 = this.success[iter907];
          output.writeI64(iter907);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectRecord_args = function(args) {
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectRecord_args.prototype = {};
ConcourseService_selectRecord_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectRecord_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectRecord_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectRecord_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_selectRecord_result.prototype = {};
ConcourseService_selectRecord_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size908 = 0;
          var _rtmp3912;
          this.success = {};
          var _ktype909 = 0;
          var _vtype910 = 0;
          _rtmp3912 = input.readMapBegin();
          _ktype909 = _rtmp3912.ktype;
          _vtype910 = _rtmp3912.vtype;
          _size908 = _rtmp3912.size;
          for (var _i913 = 0; _i913 < _size908; ++_i913)
          {
            var key914 = null;
            var val915 = null;
            key914 = input.readString();
            var _size916 = 0;
            var _rtmp3920;
            val915 = [];
            var _etype919 = 0;
            _rtmp3920 = input.readSetBegin();
            _etype919 = _rtmp3920.etype;
            _size916 = _rtmp3920.size;
            for (var _i921 = 0; _i921 < _size916; ++_i921)
            {
              var elem922 = null;
              elem922 = new data_ttypes.TObject();
              elem922.read(input);
              val915.push(elem922);
            }
            input.readSetEnd();
            this.success[key914] = val915;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectRecord_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter923 in this.success)
      {
        if (this.success.hasOwnProperty(kiter923))
        {
          var viter924 = this.success[kiter923];
          output.writeString(kiter923);
          output.writeSetBegin(Thrift.Type.STRUCT, viter924.length);
          for (var iter925 in viter924)
          {
            if (viter924.hasOwnProperty(iter925))
            {
              iter925 = viter924[iter925];
              iter925.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectRecords_args = function(args) {
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectRecords_args.prototype = {};
ConcourseService_selectRecords_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size926 = 0;
          var _rtmp3930;
          this.records = [];
          var _etype929 = 0;
          _rtmp3930 = input.readListBegin();
          _etype929 = _rtmp3930.etype;
          _size926 = _rtmp3930.size;
          for (var _i931 = 0; _i931 < _size926; ++_i931)
          {
            var elem932 = null;
            elem932 = input.readI64();
            this.records.push(elem932);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectRecords_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectRecords_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter933 in this.records)
      {
        if (this.records.hasOwnProperty(iter933))
        {
          iter933 = this.records[iter933];
          output.writeI64(iter933);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectRecords_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_selectRecords_result.prototype = {};
ConcourseService_selectRecords_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size934 = 0;
          var _rtmp3938;
          this.success = {};
          var _ktype935 = 0;
          var _vtype936 = 0;
          _rtmp3938 = input.readMapBegin();
          _ktype935 = _rtmp3938.ktype;
          _vtype936 = _rtmp3938.vtype;
          _size934 = _rtmp3938.size;
          for (var _i939 = 0; _i939 < _size934; ++_i939)
          {
            var key940 = null;
            var val941 = null;
            key940 = input.readI64();
            var _size942 = 0;
            var _rtmp3946;
            val941 = {};
            var _ktype943 = 0;
            var _vtype944 = 0;
            _rtmp3946 = input.readMapBegin();
            _ktype943 = _rtmp3946.ktype;
            _vtype944 = _rtmp3946.vtype;
            _size942 = _rtmp3946.size;
            for (var _i947 = 0; _i947 < _size942; ++_i947)
            {
              var key948 = null;
              var val949 = null;
              key948 = input.readString();
              var _size950 = 0;
              var _rtmp3954;
              val949 = [];
              var _etype953 = 0;
              _rtmp3954 = input.readSetBegin();
              _etype953 = _rtmp3954.etype;
              _size950 = _rtmp3954.size;
              for (var _i955 = 0; _i955 < _size950; ++_i955)
              {
                var elem956 = null;
                elem956 = new data_ttypes.TObject();
                elem956.read(input);
                val949.push(elem956);
              }
              input.readSetEnd();
              val941[key948] = val949;
            }
            input.readMapEnd();
            this.success[key940] = val941;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectRecords_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter957 in this.success)
      {
        if (this.success.hasOwnProperty(kiter957))
        {
          var viter958 = this.success[kiter957];
          output.writeI64(kiter957);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter958));
          for (var kiter959 in viter958)
          {
            if (viter958.hasOwnProperty(kiter959))
            {
              var viter960 = viter958[kiter959];
              output.writeString(kiter959);
              output.writeSetBegin(Thrift.Type.STRUCT, viter960.length);
              for (var iter961 in viter960)
              {
                if (viter960.hasOwnProperty(iter961))
                {
                  iter961 = viter960[iter961];
                  iter961.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectRecordTime_args = function(args) {
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectRecordTime_args.prototype = {};
ConcourseService_selectRecordTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectRecordTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectRecordTime_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectRecordTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_selectRecordTime_result.prototype = {};
ConcourseService_selectRecordTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size962 = 0;
          var _rtmp3966;
          this.success = {};
          var _ktype963 = 0;
          var _vtype964 = 0;
          _rtmp3966 = input.readMapBegin();
          _ktype963 = _rtmp3966.ktype;
          _vtype964 = _rtmp3966.vtype;
          _size962 = _rtmp3966.size;
          for (var _i967 = 0; _i967 < _size962; ++_i967)
          {
            var key968 = null;
            var val969 = null;
            key968 = input.readString();
            var _size970 = 0;
            var _rtmp3974;
            val969 = [];
            var _etype973 = 0;
            _rtmp3974 = input.readSetBegin();
            _etype973 = _rtmp3974.etype;
            _size970 = _rtmp3974.size;
            for (var _i975 = 0; _i975 < _size970; ++_i975)
            {
              var elem976 = null;
              elem976 = new data_ttypes.TObject();
              elem976.read(input);
              val969.push(elem976);
            }
            input.readSetEnd();
            this.success[key968] = val969;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectRecordTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter977 in this.success)
      {
        if (this.success.hasOwnProperty(kiter977))
        {
          var viter978 = this.success[kiter977];
          output.writeString(kiter977);
          output.writeSetBegin(Thrift.Type.STRUCT, viter978.length);
          for (var iter979 in viter978)
          {
            if (viter978.hasOwnProperty(iter979))
            {
              iter979 = viter978[iter979];
              iter979.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectRecordTimestr_args = function(args) {
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectRecordTimestr_args.prototype = {};
ConcourseService_selectRecordTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectRecordTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectRecordTimestr_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectRecordTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_selectRecordTimestr_result.prototype = {};
ConcourseService_selectRecordTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size980 = 0;
          var _rtmp3984;
          this.success = {};
          var _ktype981 = 0;
          var _vtype982 = 0;
          _rtmp3984 = input.readMapBegin();
          _ktype981 = _rtmp3984.ktype;
          _vtype982 = _rtmp3984.vtype;
          _size980 = _rtmp3984.size;
          for (var _i985 = 0; _i985 < _size980; ++_i985)
          {
            var key986 = null;
            var val987 = null;
            key986 = input.readString();
            var _size988 = 0;
            var _rtmp3992;
            val987 = [];
            var _etype991 = 0;
            _rtmp3992 = input.readSetBegin();
            _etype991 = _rtmp3992.etype;
            _size988 = _rtmp3992.size;
            for (var _i993 = 0; _i993 < _size988; ++_i993)
            {
              var elem994 = null;
              elem994 = new data_ttypes.TObject();
              elem994.read(input);
              val987.push(elem994);
            }
            input.readSetEnd();
            this.success[key986] = val987;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectRecordTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter995 in this.success)
      {
        if (this.success.hasOwnProperty(kiter995))
        {
          var viter996 = this.success[kiter995];
          output.writeString(kiter995);
          output.writeSetBegin(Thrift.Type.STRUCT, viter996.length);
          for (var iter997 in viter996)
          {
            if (viter996.hasOwnProperty(iter997))
            {
              iter997 = viter996[iter997];
              iter997.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectRecordsTime_args = function(args) {
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectRecordsTime_args.prototype = {};
ConcourseService_selectRecordsTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size998 = 0;
          var _rtmp31002;
          this.records = [];
          var _etype1001 = 0;
          _rtmp31002 = input.readListBegin();
          _etype1001 = _rtmp31002.etype;
          _size998 = _rtmp31002.size;
          for (var _i1003 = 0; _i1003 < _size998; ++_i1003)
          {
            var elem1004 = null;
            elem1004 = input.readI64();
            this.records.push(elem1004);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectRecordsTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectRecordsTime_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter1005 in this.records)
      {
        if (this.records.hasOwnProperty(iter1005))
        {
          iter1005 = this.records[iter1005];
          output.writeI64(iter1005);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectRecordsTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_selectRecordsTime_result.prototype = {};
ConcourseService_selectRecordsTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1006 = 0;
          var _rtmp31010;
          this.success = {};
          var _ktype1007 = 0;
          var _vtype1008 = 0;
          _rtmp31010 = input.readMapBegin();
          _ktype1007 = _rtmp31010.ktype;
          _vtype1008 = _rtmp31010.vtype;
          _size1006 = _rtmp31010.size;
          for (var _i1011 = 0; _i1011 < _size1006; ++_i1011)
          {
            var key1012 = null;
            var val1013 = null;
            key1012 = input.readI64();
            var _size1014 = 0;
            var _rtmp31018;
            val1013 = {};
            var _ktype1015 = 0;
            var _vtype1016 = 0;
            _rtmp31018 = input.readMapBegin();
            _ktype1015 = _rtmp31018.ktype;
            _vtype1016 = _rtmp31018.vtype;
            _size1014 = _rtmp31018.size;
            for (var _i1019 = 0; _i1019 < _size1014; ++_i1019)
            {
              var key1020 = null;
              var val1021 = null;
              key1020 = input.readString();
              var _size1022 = 0;
              var _rtmp31026;
              val1021 = [];
              var _etype1025 = 0;
              _rtmp31026 = input.readSetBegin();
              _etype1025 = _rtmp31026.etype;
              _size1022 = _rtmp31026.size;
              for (var _i1027 = 0; _i1027 < _size1022; ++_i1027)
              {
                var elem1028 = null;
                elem1028 = new data_ttypes.TObject();
                elem1028.read(input);
                val1021.push(elem1028);
              }
              input.readSetEnd();
              val1013[key1020] = val1021;
            }
            input.readMapEnd();
            this.success[key1012] = val1013;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectRecordsTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter1029 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1029))
        {
          var viter1030 = this.success[kiter1029];
          output.writeI64(kiter1029);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1030));
          for (var kiter1031 in viter1030)
          {
            if (viter1030.hasOwnProperty(kiter1031))
            {
              var viter1032 = viter1030[kiter1031];
              output.writeString(kiter1031);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1032.length);
              for (var iter1033 in viter1032)
              {
                if (viter1032.hasOwnProperty(iter1033))
                {
                  iter1033 = viter1032[iter1033];
                  iter1033.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectRecordsTimestr_args = function(args) {
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectRecordsTimestr_args.prototype = {};
ConcourseService_selectRecordsTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size1034 = 0;
          var _rtmp31038;
          this.records = [];
          var _etype1037 = 0;
          _rtmp31038 = input.readListBegin();
          _etype1037 = _rtmp31038.etype;
          _size1034 = _rtmp31038.size;
          for (var _i1039 = 0; _i1039 < _size1034; ++_i1039)
          {
            var elem1040 = null;
            elem1040 = input.readI64();
            this.records.push(elem1040);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectRecordsTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectRecordsTimestr_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter1041 in this.records)
      {
        if (this.records.hasOwnProperty(iter1041))
        {
          iter1041 = this.records[iter1041];
          output.writeI64(iter1041);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectRecordsTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_selectRecordsTimestr_result.prototype = {};
ConcourseService_selectRecordsTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1042 = 0;
          var _rtmp31046;
          this.success = {};
          var _ktype1043 = 0;
          var _vtype1044 = 0;
          _rtmp31046 = input.readMapBegin();
          _ktype1043 = _rtmp31046.ktype;
          _vtype1044 = _rtmp31046.vtype;
          _size1042 = _rtmp31046.size;
          for (var _i1047 = 0; _i1047 < _size1042; ++_i1047)
          {
            var key1048 = null;
            var val1049 = null;
            key1048 = input.readI64();
            var _size1050 = 0;
            var _rtmp31054;
            val1049 = {};
            var _ktype1051 = 0;
            var _vtype1052 = 0;
            _rtmp31054 = input.readMapBegin();
            _ktype1051 = _rtmp31054.ktype;
            _vtype1052 = _rtmp31054.vtype;
            _size1050 = _rtmp31054.size;
            for (var _i1055 = 0; _i1055 < _size1050; ++_i1055)
            {
              var key1056 = null;
              var val1057 = null;
              key1056 = input.readString();
              var _size1058 = 0;
              var _rtmp31062;
              val1057 = [];
              var _etype1061 = 0;
              _rtmp31062 = input.readSetBegin();
              _etype1061 = _rtmp31062.etype;
              _size1058 = _rtmp31062.size;
              for (var _i1063 = 0; _i1063 < _size1058; ++_i1063)
              {
                var elem1064 = null;
                elem1064 = new data_ttypes.TObject();
                elem1064.read(input);
                val1057.push(elem1064);
              }
              input.readSetEnd();
              val1049[key1056] = val1057;
            }
            input.readMapEnd();
            this.success[key1048] = val1049;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectRecordsTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter1065 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1065))
        {
          var viter1066 = this.success[kiter1065];
          output.writeI64(kiter1065);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1066));
          for (var kiter1067 in viter1066)
          {
            if (viter1066.hasOwnProperty(kiter1067))
            {
              var viter1068 = viter1066[kiter1067];
              output.writeString(kiter1067);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1068.length);
              for (var iter1069 in viter1068)
              {
                if (viter1068.hasOwnProperty(iter1069))
                {
                  iter1069 = viter1068[iter1069];
                  iter1069.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeyRecord_args = function(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectKeyRecord_args.prototype = {};
ConcourseService_selectKeyRecord_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeyRecord_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeyRecord_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyList(args.success, [data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_selectKeyRecord_result.prototype = {};
ConcourseService_selectKeyRecord_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.SET) {
          var _size1070 = 0;
          var _rtmp31074;
          this.success = [];
          var _etype1073 = 0;
          _rtmp31074 = input.readSetBegin();
          _etype1073 = _rtmp31074.etype;
          _size1070 = _rtmp31074.size;
          for (var _i1075 = 0; _i1075 < _size1070; ++_i1075)
          {
            var elem1076 = null;
            elem1076 = new data_ttypes.TObject();
            elem1076.read(input);
            this.success.push(elem1076);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeyRecord_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeyRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.STRUCT, this.success.length);
      for (var iter1077 in this.success)
      {
        if (this.success.hasOwnProperty(iter1077))
        {
          iter1077 = this.success[iter1077];
          iter1077.write(output);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeyRecordTime_args = function(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectKeyRecordTime_args.prototype = {};
ConcourseService_selectKeyRecordTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeyRecordTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeyRecordTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyList(args.success, [data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_selectKeyRecordTime_result.prototype = {};
ConcourseService_selectKeyRecordTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.SET) {
          var _size1078 = 0;
          var _rtmp31082;
          this.success = [];
          var _etype1081 = 0;
          _rtmp31082 = input.readSetBegin();
          _etype1081 = _rtmp31082.etype;
          _size1078 = _rtmp31082.size;
          for (var _i1083 = 0; _i1083 < _size1078; ++_i1083)
          {
            var elem1084 = null;
            elem1084 = new data_ttypes.TObject();
            elem1084.read(input);
            this.success.push(elem1084);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeyRecordTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeyRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.STRUCT, this.success.length);
      for (var iter1085 in this.success)
      {
        if (this.success.hasOwnProperty(iter1085))
        {
          iter1085 = this.success[iter1085];
          iter1085.write(output);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeyRecordTimestr_args = function(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectKeyRecordTimestr_args.prototype = {};
ConcourseService_selectKeyRecordTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeyRecordTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeyRecordTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyList(args.success, [data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_selectKeyRecordTimestr_result.prototype = {};
ConcourseService_selectKeyRecordTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.SET) {
          var _size1086 = 0;
          var _rtmp31090;
          this.success = [];
          var _etype1089 = 0;
          _rtmp31090 = input.readSetBegin();
          _etype1089 = _rtmp31090.etype;
          _size1086 = _rtmp31090.size;
          for (var _i1091 = 0; _i1091 < _size1086; ++_i1091)
          {
            var elem1092 = null;
            elem1092 = new data_ttypes.TObject();
            elem1092.read(input);
            this.success.push(elem1092);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeyRecordTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeyRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.STRUCT, this.success.length);
      for (var iter1093 in this.success)
      {
        if (this.success.hasOwnProperty(iter1093))
        {
          iter1093 = this.success[iter1093];
          iter1093.write(output);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeysRecord_args = function(args) {
    this.keys = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectKeysRecord_args.prototype = {};
ConcourseService_selectKeysRecord_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size1094 = 0;
          var _rtmp31098;
          this.keys = [];
          var _etype1097 = 0;
          _rtmp31098 = input.readListBegin();
          _etype1097 = _rtmp31098.etype;
          _size1094 = _rtmp31098.size;
          for (var _i1099 = 0; _i1099 < _size1094; ++_i1099)
          {
            var elem1100 = null;
            elem1100 = input.readString();
            this.keys.push(elem1100);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeysRecord_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeysRecord_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter1101 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter1101))
        {
          iter1101 = this.keys[iter1101];
          output.writeString(iter1101);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeysRecord_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_selectKeysRecord_result.prototype = {};
ConcourseService_selectKeysRecord_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1102 = 0;
          var _rtmp31106;
          this.success = {};
          var _ktype1103 = 0;
          var _vtype1104 = 0;
          _rtmp31106 = input.readMapBegin();
          _ktype1103 = _rtmp31106.ktype;
          _vtype1104 = _rtmp31106.vtype;
          _size1102 = _rtmp31106.size;
          for (var _i1107 = 0; _i1107 < _size1102; ++_i1107)
          {
            var key1108 = null;
            var val1109 = null;
            key1108 = input.readString();
            var _size1110 = 0;
            var _rtmp31114;
            val1109 = [];
            var _etype1113 = 0;
            _rtmp31114 = input.readSetBegin();
            _etype1113 = _rtmp31114.etype;
            _size1110 = _rtmp31114.size;
            for (var _i1115 = 0; _i1115 < _size1110; ++_i1115)
            {
              var elem1116 = null;
              elem1116 = new data_ttypes.TObject();
              elem1116.read(input);
              val1109.push(elem1116);
            }
            input.readSetEnd();
            this.success[key1108] = val1109;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeysRecord_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeysRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter1117 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1117))
        {
          var viter1118 = this.success[kiter1117];
          output.writeString(kiter1117);
          output.writeSetBegin(Thrift.Type.STRUCT, viter1118.length);
          for (var iter1119 in viter1118)
          {
            if (viter1118.hasOwnProperty(iter1119))
            {
              iter1119 = viter1118[iter1119];
              iter1119.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeysRecordTime_args = function(args) {
    this.keys = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectKeysRecordTime_args.prototype = {};
ConcourseService_selectKeysRecordTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size1120 = 0;
          var _rtmp31124;
          this.keys = [];
          var _etype1123 = 0;
          _rtmp31124 = input.readListBegin();
          _etype1123 = _rtmp31124.etype;
          _size1120 = _rtmp31124.size;
          for (var _i1125 = 0; _i1125 < _size1120; ++_i1125)
          {
            var elem1126 = null;
            elem1126 = input.readString();
            this.keys.push(elem1126);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeysRecordTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeysRecordTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter1127 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter1127))
        {
          iter1127 = this.keys[iter1127];
          output.writeString(iter1127);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeysRecordTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_selectKeysRecordTime_result.prototype = {};
ConcourseService_selectKeysRecordTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1128 = 0;
          var _rtmp31132;
          this.success = {};
          var _ktype1129 = 0;
          var _vtype1130 = 0;
          _rtmp31132 = input.readMapBegin();
          _ktype1129 = _rtmp31132.ktype;
          _vtype1130 = _rtmp31132.vtype;
          _size1128 = _rtmp31132.size;
          for (var _i1133 = 0; _i1133 < _size1128; ++_i1133)
          {
            var key1134 = null;
            var val1135 = null;
            key1134 = input.readString();
            var _size1136 = 0;
            var _rtmp31140;
            val1135 = [];
            var _etype1139 = 0;
            _rtmp31140 = input.readSetBegin();
            _etype1139 = _rtmp31140.etype;
            _size1136 = _rtmp31140.size;
            for (var _i1141 = 0; _i1141 < _size1136; ++_i1141)
            {
              var elem1142 = null;
              elem1142 = new data_ttypes.TObject();
              elem1142.read(input);
              val1135.push(elem1142);
            }
            input.readSetEnd();
            this.success[key1134] = val1135;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeysRecordTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeysRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter1143 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1143))
        {
          var viter1144 = this.success[kiter1143];
          output.writeString(kiter1143);
          output.writeSetBegin(Thrift.Type.STRUCT, viter1144.length);
          for (var iter1145 in viter1144)
          {
            if (viter1144.hasOwnProperty(iter1145))
            {
              iter1145 = viter1144[iter1145];
              iter1145.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeysRecordTimestr_args = function(args) {
    this.keys = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectKeysRecordTimestr_args.prototype = {};
ConcourseService_selectKeysRecordTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size1146 = 0;
          var _rtmp31150;
          this.keys = [];
          var _etype1149 = 0;
          _rtmp31150 = input.readListBegin();
          _etype1149 = _rtmp31150.etype;
          _size1146 = _rtmp31150.size;
          for (var _i1151 = 0; _i1151 < _size1146; ++_i1151)
          {
            var elem1152 = null;
            elem1152 = input.readString();
            this.keys.push(elem1152);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeysRecordTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeysRecordTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter1153 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter1153))
        {
          iter1153 = this.keys[iter1153];
          output.writeString(iter1153);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeysRecordTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_selectKeysRecordTimestr_result.prototype = {};
ConcourseService_selectKeysRecordTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1154 = 0;
          var _rtmp31158;
          this.success = {};
          var _ktype1155 = 0;
          var _vtype1156 = 0;
          _rtmp31158 = input.readMapBegin();
          _ktype1155 = _rtmp31158.ktype;
          _vtype1156 = _rtmp31158.vtype;
          _size1154 = _rtmp31158.size;
          for (var _i1159 = 0; _i1159 < _size1154; ++_i1159)
          {
            var key1160 = null;
            var val1161 = null;
            key1160 = input.readString();
            var _size1162 = 0;
            var _rtmp31166;
            val1161 = [];
            var _etype1165 = 0;
            _rtmp31166 = input.readSetBegin();
            _etype1165 = _rtmp31166.etype;
            _size1162 = _rtmp31166.size;
            for (var _i1167 = 0; _i1167 < _size1162; ++_i1167)
            {
              var elem1168 = null;
              elem1168 = new data_ttypes.TObject();
              elem1168.read(input);
              val1161.push(elem1168);
            }
            input.readSetEnd();
            this.success[key1160] = val1161;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeysRecordTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeysRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter1169 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1169))
        {
          var viter1170 = this.success[kiter1169];
          output.writeString(kiter1169);
          output.writeSetBegin(Thrift.Type.STRUCT, viter1170.length);
          for (var iter1171 in viter1170)
          {
            if (viter1170.hasOwnProperty(iter1171))
            {
              iter1171 = viter1170[iter1171];
              iter1171.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeysRecords_args = function(args) {
    this.keys = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectKeysRecords_args.prototype = {};
ConcourseService_selectKeysRecords_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size1172 = 0;
          var _rtmp31176;
          this.keys = [];
          var _etype1175 = 0;
          _rtmp31176 = input.readListBegin();
          _etype1175 = _rtmp31176.etype;
          _size1172 = _rtmp31176.size;
          for (var _i1177 = 0; _i1177 < _size1172; ++_i1177)
          {
            var elem1178 = null;
            elem1178 = input.readString();
            this.keys.push(elem1178);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size1179 = 0;
          var _rtmp31183;
          this.records = [];
          var _etype1182 = 0;
          _rtmp31183 = input.readListBegin();
          _etype1182 = _rtmp31183.etype;
          _size1179 = _rtmp31183.size;
          for (var _i1184 = 0; _i1184 < _size1179; ++_i1184)
          {
            var elem1185 = null;
            elem1185 = input.readI64();
            this.records.push(elem1185);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeysRecords_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeysRecords_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter1186 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter1186))
        {
          iter1186 = this.keys[iter1186];
          output.writeString(iter1186);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter1187 in this.records)
      {
        if (this.records.hasOwnProperty(iter1187))
        {
          iter1187 = this.records[iter1187];
          output.writeI64(iter1187);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeysRecords_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_selectKeysRecords_result.prototype = {};
ConcourseService_selectKeysRecords_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1188 = 0;
          var _rtmp31192;
          this.success = {};
          var _ktype1189 = 0;
          var _vtype1190 = 0;
          _rtmp31192 = input.readMapBegin();
          _ktype1189 = _rtmp31192.ktype;
          _vtype1190 = _rtmp31192.vtype;
          _size1188 = _rtmp31192.size;
          for (var _i1193 = 0; _i1193 < _size1188; ++_i1193)
          {
            var key1194 = null;
            var val1195 = null;
            key1194 = input.readI64();
            var _size1196 = 0;
            var _rtmp31200;
            val1195 = {};
            var _ktype1197 = 0;
            var _vtype1198 = 0;
            _rtmp31200 = input.readMapBegin();
            _ktype1197 = _rtmp31200.ktype;
            _vtype1198 = _rtmp31200.vtype;
            _size1196 = _rtmp31200.size;
            for (var _i1201 = 0; _i1201 < _size1196; ++_i1201)
            {
              var key1202 = null;
              var val1203 = null;
              key1202 = input.readString();
              var _size1204 = 0;
              var _rtmp31208;
              val1203 = [];
              var _etype1207 = 0;
              _rtmp31208 = input.readSetBegin();
              _etype1207 = _rtmp31208.etype;
              _size1204 = _rtmp31208.size;
              for (var _i1209 = 0; _i1209 < _size1204; ++_i1209)
              {
                var elem1210 = null;
                elem1210 = new data_ttypes.TObject();
                elem1210.read(input);
                val1203.push(elem1210);
              }
              input.readSetEnd();
              val1195[key1202] = val1203;
            }
            input.readMapEnd();
            this.success[key1194] = val1195;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeysRecords_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeysRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter1211 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1211))
        {
          var viter1212 = this.success[kiter1211];
          output.writeI64(kiter1211);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1212));
          for (var kiter1213 in viter1212)
          {
            if (viter1212.hasOwnProperty(kiter1213))
            {
              var viter1214 = viter1212[kiter1213];
              output.writeString(kiter1213);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1214.length);
              for (var iter1215 in viter1214)
              {
                if (viter1214.hasOwnProperty(iter1215))
                {
                  iter1215 = viter1214[iter1215];
                  iter1215.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeyRecords_args = function(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectKeyRecords_args.prototype = {};
ConcourseService_selectKeyRecords_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size1216 = 0;
          var _rtmp31220;
          this.records = [];
          var _etype1219 = 0;
          _rtmp31220 = input.readListBegin();
          _etype1219 = _rtmp31220.etype;
          _size1216 = _rtmp31220.size;
          for (var _i1221 = 0; _i1221 < _size1216; ++_i1221)
          {
            var elem1222 = null;
            elem1222 = input.readI64();
            this.records.push(elem1222);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeyRecords_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter1223 in this.records)
      {
        if (this.records.hasOwnProperty(iter1223))
        {
          iter1223 = this.records[iter1223];
          output.writeI64(iter1223);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeyRecords_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_selectKeyRecords_result.prototype = {};
ConcourseService_selectKeyRecords_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1224 = 0;
          var _rtmp31228;
          this.success = {};
          var _ktype1225 = 0;
          var _vtype1226 = 0;
          _rtmp31228 = input.readMapBegin();
          _ktype1225 = _rtmp31228.ktype;
          _vtype1226 = _rtmp31228.vtype;
          _size1224 = _rtmp31228.size;
          for (var _i1229 = 0; _i1229 < _size1224; ++_i1229)
          {
            var key1230 = null;
            var val1231 = null;
            key1230 = input.readI64();
            var _size1232 = 0;
            var _rtmp31236;
            val1231 = [];
            var _etype1235 = 0;
            _rtmp31236 = input.readSetBegin();
            _etype1235 = _rtmp31236.etype;
            _size1232 = _rtmp31236.size;
            for (var _i1237 = 0; _i1237 < _size1232; ++_i1237)
            {
              var elem1238 = null;
              elem1238 = new data_ttypes.TObject();
              elem1238.read(input);
              val1231.push(elem1238);
            }
            input.readSetEnd();
            this.success[key1230] = val1231;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeyRecords_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeyRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter1239 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1239))
        {
          var viter1240 = this.success[kiter1239];
          output.writeI64(kiter1239);
          output.writeSetBegin(Thrift.Type.STRUCT, viter1240.length);
          for (var iter1241 in viter1240)
          {
            if (viter1240.hasOwnProperty(iter1241))
            {
              iter1241 = viter1240[iter1241];
              iter1241.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeyRecordsTime_args = function(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectKeyRecordsTime_args.prototype = {};
ConcourseService_selectKeyRecordsTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size1242 = 0;
          var _rtmp31246;
          this.records = [];
          var _etype1245 = 0;
          _rtmp31246 = input.readListBegin();
          _etype1245 = _rtmp31246.etype;
          _size1242 = _rtmp31246.size;
          for (var _i1247 = 0; _i1247 < _size1242; ++_i1247)
          {
            var elem1248 = null;
            elem1248 = input.readI64();
            this.records.push(elem1248);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeyRecordsTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter1249 in this.records)
      {
        if (this.records.hasOwnProperty(iter1249))
        {
          iter1249 = this.records[iter1249];
          output.writeI64(iter1249);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeyRecordsTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_selectKeyRecordsTime_result.prototype = {};
ConcourseService_selectKeyRecordsTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1250 = 0;
          var _rtmp31254;
          this.success = {};
          var _ktype1251 = 0;
          var _vtype1252 = 0;
          _rtmp31254 = input.readMapBegin();
          _ktype1251 = _rtmp31254.ktype;
          _vtype1252 = _rtmp31254.vtype;
          _size1250 = _rtmp31254.size;
          for (var _i1255 = 0; _i1255 < _size1250; ++_i1255)
          {
            var key1256 = null;
            var val1257 = null;
            key1256 = input.readI64();
            var _size1258 = 0;
            var _rtmp31262;
            val1257 = [];
            var _etype1261 = 0;
            _rtmp31262 = input.readSetBegin();
            _etype1261 = _rtmp31262.etype;
            _size1258 = _rtmp31262.size;
            for (var _i1263 = 0; _i1263 < _size1258; ++_i1263)
            {
              var elem1264 = null;
              elem1264 = new data_ttypes.TObject();
              elem1264.read(input);
              val1257.push(elem1264);
            }
            input.readSetEnd();
            this.success[key1256] = val1257;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeyRecordsTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeyRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter1265 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1265))
        {
          var viter1266 = this.success[kiter1265];
          output.writeI64(kiter1265);
          output.writeSetBegin(Thrift.Type.STRUCT, viter1266.length);
          for (var iter1267 in viter1266)
          {
            if (viter1266.hasOwnProperty(iter1267))
            {
              iter1267 = viter1266[iter1267];
              iter1267.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeyRecordsTimestr_args = function(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectKeyRecordsTimestr_args.prototype = {};
ConcourseService_selectKeyRecordsTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size1268 = 0;
          var _rtmp31272;
          this.records = [];
          var _etype1271 = 0;
          _rtmp31272 = input.readListBegin();
          _etype1271 = _rtmp31272.etype;
          _size1268 = _rtmp31272.size;
          for (var _i1273 = 0; _i1273 < _size1268; ++_i1273)
          {
            var elem1274 = null;
            elem1274 = input.readI64();
            this.records.push(elem1274);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeyRecordsTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter1275 in this.records)
      {
        if (this.records.hasOwnProperty(iter1275))
        {
          iter1275 = this.records[iter1275];
          output.writeI64(iter1275);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeyRecordsTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_selectKeyRecordsTimestr_result.prototype = {};
ConcourseService_selectKeyRecordsTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1276 = 0;
          var _rtmp31280;
          this.success = {};
          var _ktype1277 = 0;
          var _vtype1278 = 0;
          _rtmp31280 = input.readMapBegin();
          _ktype1277 = _rtmp31280.ktype;
          _vtype1278 = _rtmp31280.vtype;
          _size1276 = _rtmp31280.size;
          for (var _i1281 = 0; _i1281 < _size1276; ++_i1281)
          {
            var key1282 = null;
            var val1283 = null;
            key1282 = input.readI64();
            var _size1284 = 0;
            var _rtmp31288;
            val1283 = [];
            var _etype1287 = 0;
            _rtmp31288 = input.readSetBegin();
            _etype1287 = _rtmp31288.etype;
            _size1284 = _rtmp31288.size;
            for (var _i1289 = 0; _i1289 < _size1284; ++_i1289)
            {
              var elem1290 = null;
              elem1290 = new data_ttypes.TObject();
              elem1290.read(input);
              val1283.push(elem1290);
            }
            input.readSetEnd();
            this.success[key1282] = val1283;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeyRecordsTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeyRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter1291 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1291))
        {
          var viter1292 = this.success[kiter1291];
          output.writeI64(kiter1291);
          output.writeSetBegin(Thrift.Type.STRUCT, viter1292.length);
          for (var iter1293 in viter1292)
          {
            if (viter1292.hasOwnProperty(iter1293))
            {
              iter1293 = viter1292[iter1293];
              iter1293.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeysRecordsTime_args = function(args) {
    this.keys = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectKeysRecordsTime_args.prototype = {};
ConcourseService_selectKeysRecordsTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size1294 = 0;
          var _rtmp31298;
          this.keys = [];
          var _etype1297 = 0;
          _rtmp31298 = input.readListBegin();
          _etype1297 = _rtmp31298.etype;
          _size1294 = _rtmp31298.size;
          for (var _i1299 = 0; _i1299 < _size1294; ++_i1299)
          {
            var elem1300 = null;
            elem1300 = input.readString();
            this.keys.push(elem1300);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size1301 = 0;
          var _rtmp31305;
          this.records = [];
          var _etype1304 = 0;
          _rtmp31305 = input.readListBegin();
          _etype1304 = _rtmp31305.etype;
          _size1301 = _rtmp31305.size;
          for (var _i1306 = 0; _i1306 < _size1301; ++_i1306)
          {
            var elem1307 = null;
            elem1307 = input.readI64();
            this.records.push(elem1307);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeysRecordsTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeysRecordsTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter1308 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter1308))
        {
          iter1308 = this.keys[iter1308];
          output.writeString(iter1308);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter1309 in this.records)
      {
        if (this.records.hasOwnProperty(iter1309))
        {
          iter1309 = this.records[iter1309];
          output.writeI64(iter1309);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeysRecordsTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_selectKeysRecordsTime_result.prototype = {};
ConcourseService_selectKeysRecordsTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1310 = 0;
          var _rtmp31314;
          this.success = {};
          var _ktype1311 = 0;
          var _vtype1312 = 0;
          _rtmp31314 = input.readMapBegin();
          _ktype1311 = _rtmp31314.ktype;
          _vtype1312 = _rtmp31314.vtype;
          _size1310 = _rtmp31314.size;
          for (var _i1315 = 0; _i1315 < _size1310; ++_i1315)
          {
            var key1316 = null;
            var val1317 = null;
            key1316 = input.readI64();
            var _size1318 = 0;
            var _rtmp31322;
            val1317 = {};
            var _ktype1319 = 0;
            var _vtype1320 = 0;
            _rtmp31322 = input.readMapBegin();
            _ktype1319 = _rtmp31322.ktype;
            _vtype1320 = _rtmp31322.vtype;
            _size1318 = _rtmp31322.size;
            for (var _i1323 = 0; _i1323 < _size1318; ++_i1323)
            {
              var key1324 = null;
              var val1325 = null;
              key1324 = input.readString();
              var _size1326 = 0;
              var _rtmp31330;
              val1325 = [];
              var _etype1329 = 0;
              _rtmp31330 = input.readSetBegin();
              _etype1329 = _rtmp31330.etype;
              _size1326 = _rtmp31330.size;
              for (var _i1331 = 0; _i1331 < _size1326; ++_i1331)
              {
                var elem1332 = null;
                elem1332 = new data_ttypes.TObject();
                elem1332.read(input);
                val1325.push(elem1332);
              }
              input.readSetEnd();
              val1317[key1324] = val1325;
            }
            input.readMapEnd();
            this.success[key1316] = val1317;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeysRecordsTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeysRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter1333 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1333))
        {
          var viter1334 = this.success[kiter1333];
          output.writeI64(kiter1333);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1334));
          for (var kiter1335 in viter1334)
          {
            if (viter1334.hasOwnProperty(kiter1335))
            {
              var viter1336 = viter1334[kiter1335];
              output.writeString(kiter1335);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1336.length);
              for (var iter1337 in viter1336)
              {
                if (viter1336.hasOwnProperty(iter1337))
                {
                  iter1337 = viter1336[iter1337];
                  iter1337.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeysRecordsTimestr_args = function(args) {
    this.keys = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectKeysRecordsTimestr_args.prototype = {};
ConcourseService_selectKeysRecordsTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size1338 = 0;
          var _rtmp31342;
          this.keys = [];
          var _etype1341 = 0;
          _rtmp31342 = input.readListBegin();
          _etype1341 = _rtmp31342.etype;
          _size1338 = _rtmp31342.size;
          for (var _i1343 = 0; _i1343 < _size1338; ++_i1343)
          {
            var elem1344 = null;
            elem1344 = input.readString();
            this.keys.push(elem1344);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size1345 = 0;
          var _rtmp31349;
          this.records = [];
          var _etype1348 = 0;
          _rtmp31349 = input.readListBegin();
          _etype1348 = _rtmp31349.etype;
          _size1345 = _rtmp31349.size;
          for (var _i1350 = 0; _i1350 < _size1345; ++_i1350)
          {
            var elem1351 = null;
            elem1351 = input.readI64();
            this.records.push(elem1351);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeysRecordsTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeysRecordsTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter1352 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter1352))
        {
          iter1352 = this.keys[iter1352];
          output.writeString(iter1352);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter1353 in this.records)
      {
        if (this.records.hasOwnProperty(iter1353))
        {
          iter1353 = this.records[iter1353];
          output.writeI64(iter1353);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeysRecordsTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_selectKeysRecordsTimestr_result.prototype = {};
ConcourseService_selectKeysRecordsTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1354 = 0;
          var _rtmp31358;
          this.success = {};
          var _ktype1355 = 0;
          var _vtype1356 = 0;
          _rtmp31358 = input.readMapBegin();
          _ktype1355 = _rtmp31358.ktype;
          _vtype1356 = _rtmp31358.vtype;
          _size1354 = _rtmp31358.size;
          for (var _i1359 = 0; _i1359 < _size1354; ++_i1359)
          {
            var key1360 = null;
            var val1361 = null;
            key1360 = input.readI64();
            var _size1362 = 0;
            var _rtmp31366;
            val1361 = {};
            var _ktype1363 = 0;
            var _vtype1364 = 0;
            _rtmp31366 = input.readMapBegin();
            _ktype1363 = _rtmp31366.ktype;
            _vtype1364 = _rtmp31366.vtype;
            _size1362 = _rtmp31366.size;
            for (var _i1367 = 0; _i1367 < _size1362; ++_i1367)
            {
              var key1368 = null;
              var val1369 = null;
              key1368 = input.readString();
              var _size1370 = 0;
              var _rtmp31374;
              val1369 = [];
              var _etype1373 = 0;
              _rtmp31374 = input.readSetBegin();
              _etype1373 = _rtmp31374.etype;
              _size1370 = _rtmp31374.size;
              for (var _i1375 = 0; _i1375 < _size1370; ++_i1375)
              {
                var elem1376 = null;
                elem1376 = new data_ttypes.TObject();
                elem1376.read(input);
                val1369.push(elem1376);
              }
              input.readSetEnd();
              val1361[key1368] = val1369;
            }
            input.readMapEnd();
            this.success[key1360] = val1361;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeysRecordsTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeysRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter1377 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1377))
        {
          var viter1378 = this.success[kiter1377];
          output.writeI64(kiter1377);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1378));
          for (var kiter1379 in viter1378)
          {
            if (viter1378.hasOwnProperty(kiter1379))
            {
              var viter1380 = viter1378[kiter1379];
              output.writeString(kiter1379);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1380.length);
              for (var iter1381 in viter1380)
              {
                if (viter1380.hasOwnProperty(iter1381))
                {
                  iter1381 = viter1380[iter1381];
                  iter1381.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectCriteria_args = function(args) {
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectCriteria_args.prototype = {};
ConcourseService_selectCriteria_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectCriteria_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectCriteria_args');
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 1);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectCriteria_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_selectCriteria_result.prototype = {};
ConcourseService_selectCriteria_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1382 = 0;
          var _rtmp31386;
          this.success = {};
          var _ktype1383 = 0;
          var _vtype1384 = 0;
          _rtmp31386 = input.readMapBegin();
          _ktype1383 = _rtmp31386.ktype;
          _vtype1384 = _rtmp31386.vtype;
          _size1382 = _rtmp31386.size;
          for (var _i1387 = 0; _i1387 < _size1382; ++_i1387)
          {
            var key1388 = null;
            var val1389 = null;
            key1388 = input.readI64();
            var _size1390 = 0;
            var _rtmp31394;
            val1389 = {};
            var _ktype1391 = 0;
            var _vtype1392 = 0;
            _rtmp31394 = input.readMapBegin();
            _ktype1391 = _rtmp31394.ktype;
            _vtype1392 = _rtmp31394.vtype;
            _size1390 = _rtmp31394.size;
            for (var _i1395 = 0; _i1395 < _size1390; ++_i1395)
            {
              var key1396 = null;
              var val1397 = null;
              key1396 = input.readString();
              var _size1398 = 0;
              var _rtmp31402;
              val1397 = [];
              var _etype1401 = 0;
              _rtmp31402 = input.readSetBegin();
              _etype1401 = _rtmp31402.etype;
              _size1398 = _rtmp31402.size;
              for (var _i1403 = 0; _i1403 < _size1398; ++_i1403)
              {
                var elem1404 = null;
                elem1404 = new data_ttypes.TObject();
                elem1404.read(input);
                val1397.push(elem1404);
              }
              input.readSetEnd();
              val1389[key1396] = val1397;
            }
            input.readMapEnd();
            this.success[key1388] = val1389;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectCriteria_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter1405 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1405))
        {
          var viter1406 = this.success[kiter1405];
          output.writeI64(kiter1405);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1406));
          for (var kiter1407 in viter1406)
          {
            if (viter1406.hasOwnProperty(kiter1407))
            {
              var viter1408 = viter1406[kiter1407];
              output.writeString(kiter1407);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1408.length);
              for (var iter1409 in viter1408)
              {
                if (viter1408.hasOwnProperty(iter1409))
                {
                  iter1409 = viter1408[iter1409];
                  iter1409.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectCcl_args = function(args) {
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectCcl_args.prototype = {};
ConcourseService_selectCcl_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectCcl_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectCcl_args');
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 1);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectCcl_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_selectCcl_result.prototype = {};
ConcourseService_selectCcl_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1410 = 0;
          var _rtmp31414;
          this.success = {};
          var _ktype1411 = 0;
          var _vtype1412 = 0;
          _rtmp31414 = input.readMapBegin();
          _ktype1411 = _rtmp31414.ktype;
          _vtype1412 = _rtmp31414.vtype;
          _size1410 = _rtmp31414.size;
          for (var _i1415 = 0; _i1415 < _size1410; ++_i1415)
          {
            var key1416 = null;
            var val1417 = null;
            key1416 = input.readI64();
            var _size1418 = 0;
            var _rtmp31422;
            val1417 = {};
            var _ktype1419 = 0;
            var _vtype1420 = 0;
            _rtmp31422 = input.readMapBegin();
            _ktype1419 = _rtmp31422.ktype;
            _vtype1420 = _rtmp31422.vtype;
            _size1418 = _rtmp31422.size;
            for (var _i1423 = 0; _i1423 < _size1418; ++_i1423)
            {
              var key1424 = null;
              var val1425 = null;
              key1424 = input.readString();
              var _size1426 = 0;
              var _rtmp31430;
              val1425 = [];
              var _etype1429 = 0;
              _rtmp31430 = input.readSetBegin();
              _etype1429 = _rtmp31430.etype;
              _size1426 = _rtmp31430.size;
              for (var _i1431 = 0; _i1431 < _size1426; ++_i1431)
              {
                var elem1432 = null;
                elem1432 = new data_ttypes.TObject();
                elem1432.read(input);
                val1425.push(elem1432);
              }
              input.readSetEnd();
              val1417[key1424] = val1425;
            }
            input.readMapEnd();
            this.success[key1416] = val1417;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectCcl_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter1433 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1433))
        {
          var viter1434 = this.success[kiter1433];
          output.writeI64(kiter1433);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1434));
          for (var kiter1435 in viter1434)
          {
            if (viter1434.hasOwnProperty(kiter1435))
            {
              var viter1436 = viter1434[kiter1435];
              output.writeString(kiter1435);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1436.length);
              for (var iter1437 in viter1436)
              {
                if (viter1436.hasOwnProperty(iter1437))
                {
                  iter1437 = viter1436[iter1437];
                  iter1437.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectCriteriaTime_args = function(args) {
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectCriteriaTime_args.prototype = {};
ConcourseService_selectCriteriaTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectCriteriaTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectCriteriaTime_args');
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 1);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectCriteriaTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_selectCriteriaTime_result.prototype = {};
ConcourseService_selectCriteriaTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1438 = 0;
          var _rtmp31442;
          this.success = {};
          var _ktype1439 = 0;
          var _vtype1440 = 0;
          _rtmp31442 = input.readMapBegin();
          _ktype1439 = _rtmp31442.ktype;
          _vtype1440 = _rtmp31442.vtype;
          _size1438 = _rtmp31442.size;
          for (var _i1443 = 0; _i1443 < _size1438; ++_i1443)
          {
            var key1444 = null;
            var val1445 = null;
            key1444 = input.readI64();
            var _size1446 = 0;
            var _rtmp31450;
            val1445 = {};
            var _ktype1447 = 0;
            var _vtype1448 = 0;
            _rtmp31450 = input.readMapBegin();
            _ktype1447 = _rtmp31450.ktype;
            _vtype1448 = _rtmp31450.vtype;
            _size1446 = _rtmp31450.size;
            for (var _i1451 = 0; _i1451 < _size1446; ++_i1451)
            {
              var key1452 = null;
              var val1453 = null;
              key1452 = input.readString();
              var _size1454 = 0;
              var _rtmp31458;
              val1453 = [];
              var _etype1457 = 0;
              _rtmp31458 = input.readSetBegin();
              _etype1457 = _rtmp31458.etype;
              _size1454 = _rtmp31458.size;
              for (var _i1459 = 0; _i1459 < _size1454; ++_i1459)
              {
                var elem1460 = null;
                elem1460 = new data_ttypes.TObject();
                elem1460.read(input);
                val1453.push(elem1460);
              }
              input.readSetEnd();
              val1445[key1452] = val1453;
            }
            input.readMapEnd();
            this.success[key1444] = val1445;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectCriteriaTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter1461 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1461))
        {
          var viter1462 = this.success[kiter1461];
          output.writeI64(kiter1461);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1462));
          for (var kiter1463 in viter1462)
          {
            if (viter1462.hasOwnProperty(kiter1463))
            {
              var viter1464 = viter1462[kiter1463];
              output.writeString(kiter1463);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1464.length);
              for (var iter1465 in viter1464)
              {
                if (viter1464.hasOwnProperty(iter1465))
                {
                  iter1465 = viter1464[iter1465];
                  iter1465.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectCriteriaTimestr_args = function(args) {
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectCriteriaTimestr_args.prototype = {};
ConcourseService_selectCriteriaTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectCriteriaTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectCriteriaTimestr_args');
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 1);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectCriteriaTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_selectCriteriaTimestr_result.prototype = {};
ConcourseService_selectCriteriaTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1466 = 0;
          var _rtmp31470;
          this.success = {};
          var _ktype1467 = 0;
          var _vtype1468 = 0;
          _rtmp31470 = input.readMapBegin();
          _ktype1467 = _rtmp31470.ktype;
          _vtype1468 = _rtmp31470.vtype;
          _size1466 = _rtmp31470.size;
          for (var _i1471 = 0; _i1471 < _size1466; ++_i1471)
          {
            var key1472 = null;
            var val1473 = null;
            key1472 = input.readI64();
            var _size1474 = 0;
            var _rtmp31478;
            val1473 = {};
            var _ktype1475 = 0;
            var _vtype1476 = 0;
            _rtmp31478 = input.readMapBegin();
            _ktype1475 = _rtmp31478.ktype;
            _vtype1476 = _rtmp31478.vtype;
            _size1474 = _rtmp31478.size;
            for (var _i1479 = 0; _i1479 < _size1474; ++_i1479)
            {
              var key1480 = null;
              var val1481 = null;
              key1480 = input.readString();
              var _size1482 = 0;
              var _rtmp31486;
              val1481 = [];
              var _etype1485 = 0;
              _rtmp31486 = input.readSetBegin();
              _etype1485 = _rtmp31486.etype;
              _size1482 = _rtmp31486.size;
              for (var _i1487 = 0; _i1487 < _size1482; ++_i1487)
              {
                var elem1488 = null;
                elem1488 = new data_ttypes.TObject();
                elem1488.read(input);
                val1481.push(elem1488);
              }
              input.readSetEnd();
              val1473[key1480] = val1481;
            }
            input.readMapEnd();
            this.success[key1472] = val1473;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectCriteriaTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter1489 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1489))
        {
          var viter1490 = this.success[kiter1489];
          output.writeI64(kiter1489);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1490));
          for (var kiter1491 in viter1490)
          {
            if (viter1490.hasOwnProperty(kiter1491))
            {
              var viter1492 = viter1490[kiter1491];
              output.writeString(kiter1491);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1492.length);
              for (var iter1493 in viter1492)
              {
                if (viter1492.hasOwnProperty(iter1493))
                {
                  iter1493 = viter1492[iter1493];
                  iter1493.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectCclTime_args = function(args) {
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectCclTime_args.prototype = {};
ConcourseService_selectCclTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectCclTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectCclTime_args');
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 1);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectCclTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_selectCclTime_result.prototype = {};
ConcourseService_selectCclTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1494 = 0;
          var _rtmp31498;
          this.success = {};
          var _ktype1495 = 0;
          var _vtype1496 = 0;
          _rtmp31498 = input.readMapBegin();
          _ktype1495 = _rtmp31498.ktype;
          _vtype1496 = _rtmp31498.vtype;
          _size1494 = _rtmp31498.size;
          for (var _i1499 = 0; _i1499 < _size1494; ++_i1499)
          {
            var key1500 = null;
            var val1501 = null;
            key1500 = input.readI64();
            var _size1502 = 0;
            var _rtmp31506;
            val1501 = {};
            var _ktype1503 = 0;
            var _vtype1504 = 0;
            _rtmp31506 = input.readMapBegin();
            _ktype1503 = _rtmp31506.ktype;
            _vtype1504 = _rtmp31506.vtype;
            _size1502 = _rtmp31506.size;
            for (var _i1507 = 0; _i1507 < _size1502; ++_i1507)
            {
              var key1508 = null;
              var val1509 = null;
              key1508 = input.readString();
              var _size1510 = 0;
              var _rtmp31514;
              val1509 = [];
              var _etype1513 = 0;
              _rtmp31514 = input.readSetBegin();
              _etype1513 = _rtmp31514.etype;
              _size1510 = _rtmp31514.size;
              for (var _i1515 = 0; _i1515 < _size1510; ++_i1515)
              {
                var elem1516 = null;
                elem1516 = new data_ttypes.TObject();
                elem1516.read(input);
                val1509.push(elem1516);
              }
              input.readSetEnd();
              val1501[key1508] = val1509;
            }
            input.readMapEnd();
            this.success[key1500] = val1501;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectCclTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter1517 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1517))
        {
          var viter1518 = this.success[kiter1517];
          output.writeI64(kiter1517);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1518));
          for (var kiter1519 in viter1518)
          {
            if (viter1518.hasOwnProperty(kiter1519))
            {
              var viter1520 = viter1518[kiter1519];
              output.writeString(kiter1519);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1520.length);
              for (var iter1521 in viter1520)
              {
                if (viter1520.hasOwnProperty(iter1521))
                {
                  iter1521 = viter1520[iter1521];
                  iter1521.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectCclTimestr_args = function(args) {
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectCclTimestr_args.prototype = {};
ConcourseService_selectCclTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectCclTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectCclTimestr_args');
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 1);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectCclTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_selectCclTimestr_result.prototype = {};
ConcourseService_selectCclTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1522 = 0;
          var _rtmp31526;
          this.success = {};
          var _ktype1523 = 0;
          var _vtype1524 = 0;
          _rtmp31526 = input.readMapBegin();
          _ktype1523 = _rtmp31526.ktype;
          _vtype1524 = _rtmp31526.vtype;
          _size1522 = _rtmp31526.size;
          for (var _i1527 = 0; _i1527 < _size1522; ++_i1527)
          {
            var key1528 = null;
            var val1529 = null;
            key1528 = input.readI64();
            var _size1530 = 0;
            var _rtmp31534;
            val1529 = {};
            var _ktype1531 = 0;
            var _vtype1532 = 0;
            _rtmp31534 = input.readMapBegin();
            _ktype1531 = _rtmp31534.ktype;
            _vtype1532 = _rtmp31534.vtype;
            _size1530 = _rtmp31534.size;
            for (var _i1535 = 0; _i1535 < _size1530; ++_i1535)
            {
              var key1536 = null;
              var val1537 = null;
              key1536 = input.readString();
              var _size1538 = 0;
              var _rtmp31542;
              val1537 = [];
              var _etype1541 = 0;
              _rtmp31542 = input.readSetBegin();
              _etype1541 = _rtmp31542.etype;
              _size1538 = _rtmp31542.size;
              for (var _i1543 = 0; _i1543 < _size1538; ++_i1543)
              {
                var elem1544 = null;
                elem1544 = new data_ttypes.TObject();
                elem1544.read(input);
                val1537.push(elem1544);
              }
              input.readSetEnd();
              val1529[key1536] = val1537;
            }
            input.readMapEnd();
            this.success[key1528] = val1529;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectCclTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter1545 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1545))
        {
          var viter1546 = this.success[kiter1545];
          output.writeI64(kiter1545);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1546));
          for (var kiter1547 in viter1546)
          {
            if (viter1546.hasOwnProperty(kiter1547))
            {
              var viter1548 = viter1546[kiter1547];
              output.writeString(kiter1547);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1548.length);
              for (var iter1549 in viter1548)
              {
                if (viter1548.hasOwnProperty(iter1549))
                {
                  iter1549 = viter1548[iter1549];
                  iter1549.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeyCriteria_args = function(args) {
    this.key = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectKeyCriteria_args.prototype = {};
ConcourseService_selectKeyCriteria_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeyCriteria_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeyCriteria_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeyCriteria_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_selectKeyCriteria_result.prototype = {};
ConcourseService_selectKeyCriteria_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1550 = 0;
          var _rtmp31554;
          this.success = {};
          var _ktype1551 = 0;
          var _vtype1552 = 0;
          _rtmp31554 = input.readMapBegin();
          _ktype1551 = _rtmp31554.ktype;
          _vtype1552 = _rtmp31554.vtype;
          _size1550 = _rtmp31554.size;
          for (var _i1555 = 0; _i1555 < _size1550; ++_i1555)
          {
            var key1556 = null;
            var val1557 = null;
            key1556 = input.readI64();
            var _size1558 = 0;
            var _rtmp31562;
            val1557 = [];
            var _etype1561 = 0;
            _rtmp31562 = input.readSetBegin();
            _etype1561 = _rtmp31562.etype;
            _size1558 = _rtmp31562.size;
            for (var _i1563 = 0; _i1563 < _size1558; ++_i1563)
            {
              var elem1564 = null;
              elem1564 = new data_ttypes.TObject();
              elem1564.read(input);
              val1557.push(elem1564);
            }
            input.readSetEnd();
            this.success[key1556] = val1557;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeyCriteria_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeyCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter1565 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1565))
        {
          var viter1566 = this.success[kiter1565];
          output.writeI64(kiter1565);
          output.writeSetBegin(Thrift.Type.STRUCT, viter1566.length);
          for (var iter1567 in viter1566)
          {
            if (viter1566.hasOwnProperty(iter1567))
            {
              iter1567 = viter1566[iter1567];
              iter1567.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeyCcl_args = function(args) {
    this.key = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectKeyCcl_args.prototype = {};
ConcourseService_selectKeyCcl_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeyCcl_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeyCcl_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeyCcl_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_selectKeyCcl_result.prototype = {};
ConcourseService_selectKeyCcl_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1568 = 0;
          var _rtmp31572;
          this.success = {};
          var _ktype1569 = 0;
          var _vtype1570 = 0;
          _rtmp31572 = input.readMapBegin();
          _ktype1569 = _rtmp31572.ktype;
          _vtype1570 = _rtmp31572.vtype;
          _size1568 = _rtmp31572.size;
          for (var _i1573 = 0; _i1573 < _size1568; ++_i1573)
          {
            var key1574 = null;
            var val1575 = null;
            key1574 = input.readI64();
            var _size1576 = 0;
            var _rtmp31580;
            val1575 = [];
            var _etype1579 = 0;
            _rtmp31580 = input.readSetBegin();
            _etype1579 = _rtmp31580.etype;
            _size1576 = _rtmp31580.size;
            for (var _i1581 = 0; _i1581 < _size1576; ++_i1581)
            {
              var elem1582 = null;
              elem1582 = new data_ttypes.TObject();
              elem1582.read(input);
              val1575.push(elem1582);
            }
            input.readSetEnd();
            this.success[key1574] = val1575;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeyCcl_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeyCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter1583 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1583))
        {
          var viter1584 = this.success[kiter1583];
          output.writeI64(kiter1583);
          output.writeSetBegin(Thrift.Type.STRUCT, viter1584.length);
          for (var iter1585 in viter1584)
          {
            if (viter1584.hasOwnProperty(iter1585))
            {
              iter1585 = viter1584[iter1585];
              iter1585.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeyCriteriaTime_args = function(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectKeyCriteriaTime_args.prototype = {};
ConcourseService_selectKeyCriteriaTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeyCriteriaTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeyCriteriaTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeyCriteriaTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_selectKeyCriteriaTime_result.prototype = {};
ConcourseService_selectKeyCriteriaTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1586 = 0;
          var _rtmp31590;
          this.success = {};
          var _ktype1587 = 0;
          var _vtype1588 = 0;
          _rtmp31590 = input.readMapBegin();
          _ktype1587 = _rtmp31590.ktype;
          _vtype1588 = _rtmp31590.vtype;
          _size1586 = _rtmp31590.size;
          for (var _i1591 = 0; _i1591 < _size1586; ++_i1591)
          {
            var key1592 = null;
            var val1593 = null;
            key1592 = input.readI64();
            var _size1594 = 0;
            var _rtmp31598;
            val1593 = [];
            var _etype1597 = 0;
            _rtmp31598 = input.readSetBegin();
            _etype1597 = _rtmp31598.etype;
            _size1594 = _rtmp31598.size;
            for (var _i1599 = 0; _i1599 < _size1594; ++_i1599)
            {
              var elem1600 = null;
              elem1600 = new data_ttypes.TObject();
              elem1600.read(input);
              val1593.push(elem1600);
            }
            input.readSetEnd();
            this.success[key1592] = val1593;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeyCriteriaTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeyCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter1601 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1601))
        {
          var viter1602 = this.success[kiter1601];
          output.writeI64(kiter1601);
          output.writeSetBegin(Thrift.Type.STRUCT, viter1602.length);
          for (var iter1603 in viter1602)
          {
            if (viter1602.hasOwnProperty(iter1603))
            {
              iter1603 = viter1602[iter1603];
              iter1603.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeyCriteriaTimestr_args = function(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectKeyCriteriaTimestr_args.prototype = {};
ConcourseService_selectKeyCriteriaTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeyCriteriaTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeyCriteriaTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeyCriteriaTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_selectKeyCriteriaTimestr_result.prototype = {};
ConcourseService_selectKeyCriteriaTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1604 = 0;
          var _rtmp31608;
          this.success = {};
          var _ktype1605 = 0;
          var _vtype1606 = 0;
          _rtmp31608 = input.readMapBegin();
          _ktype1605 = _rtmp31608.ktype;
          _vtype1606 = _rtmp31608.vtype;
          _size1604 = _rtmp31608.size;
          for (var _i1609 = 0; _i1609 < _size1604; ++_i1609)
          {
            var key1610 = null;
            var val1611 = null;
            key1610 = input.readI64();
            var _size1612 = 0;
            var _rtmp31616;
            val1611 = [];
            var _etype1615 = 0;
            _rtmp31616 = input.readSetBegin();
            _etype1615 = _rtmp31616.etype;
            _size1612 = _rtmp31616.size;
            for (var _i1617 = 0; _i1617 < _size1612; ++_i1617)
            {
              var elem1618 = null;
              elem1618 = new data_ttypes.TObject();
              elem1618.read(input);
              val1611.push(elem1618);
            }
            input.readSetEnd();
            this.success[key1610] = val1611;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeyCriteriaTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeyCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter1619 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1619))
        {
          var viter1620 = this.success[kiter1619];
          output.writeI64(kiter1619);
          output.writeSetBegin(Thrift.Type.STRUCT, viter1620.length);
          for (var iter1621 in viter1620)
          {
            if (viter1620.hasOwnProperty(iter1621))
            {
              iter1621 = viter1620[iter1621];
              iter1621.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeyCclTime_args = function(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectKeyCclTime_args.prototype = {};
ConcourseService_selectKeyCclTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeyCclTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeyCclTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeyCclTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_selectKeyCclTime_result.prototype = {};
ConcourseService_selectKeyCclTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1622 = 0;
          var _rtmp31626;
          this.success = {};
          var _ktype1623 = 0;
          var _vtype1624 = 0;
          _rtmp31626 = input.readMapBegin();
          _ktype1623 = _rtmp31626.ktype;
          _vtype1624 = _rtmp31626.vtype;
          _size1622 = _rtmp31626.size;
          for (var _i1627 = 0; _i1627 < _size1622; ++_i1627)
          {
            var key1628 = null;
            var val1629 = null;
            key1628 = input.readI64();
            var _size1630 = 0;
            var _rtmp31634;
            val1629 = [];
            var _etype1633 = 0;
            _rtmp31634 = input.readSetBegin();
            _etype1633 = _rtmp31634.etype;
            _size1630 = _rtmp31634.size;
            for (var _i1635 = 0; _i1635 < _size1630; ++_i1635)
            {
              var elem1636 = null;
              elem1636 = new data_ttypes.TObject();
              elem1636.read(input);
              val1629.push(elem1636);
            }
            input.readSetEnd();
            this.success[key1628] = val1629;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeyCclTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeyCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter1637 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1637))
        {
          var viter1638 = this.success[kiter1637];
          output.writeI64(kiter1637);
          output.writeSetBegin(Thrift.Type.STRUCT, viter1638.length);
          for (var iter1639 in viter1638)
          {
            if (viter1638.hasOwnProperty(iter1639))
            {
              iter1639 = viter1638[iter1639];
              iter1639.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeyCclTimestr_args = function(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectKeyCclTimestr_args.prototype = {};
ConcourseService_selectKeyCclTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeyCclTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeyCclTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeyCclTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_selectKeyCclTimestr_result.prototype = {};
ConcourseService_selectKeyCclTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1640 = 0;
          var _rtmp31644;
          this.success = {};
          var _ktype1641 = 0;
          var _vtype1642 = 0;
          _rtmp31644 = input.readMapBegin();
          _ktype1641 = _rtmp31644.ktype;
          _vtype1642 = _rtmp31644.vtype;
          _size1640 = _rtmp31644.size;
          for (var _i1645 = 0; _i1645 < _size1640; ++_i1645)
          {
            var key1646 = null;
            var val1647 = null;
            key1646 = input.readI64();
            var _size1648 = 0;
            var _rtmp31652;
            val1647 = [];
            var _etype1651 = 0;
            _rtmp31652 = input.readSetBegin();
            _etype1651 = _rtmp31652.etype;
            _size1648 = _rtmp31652.size;
            for (var _i1653 = 0; _i1653 < _size1648; ++_i1653)
            {
              var elem1654 = null;
              elem1654 = new data_ttypes.TObject();
              elem1654.read(input);
              val1647.push(elem1654);
            }
            input.readSetEnd();
            this.success[key1646] = val1647;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeyCclTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeyCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter1655 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1655))
        {
          var viter1656 = this.success[kiter1655];
          output.writeI64(kiter1655);
          output.writeSetBegin(Thrift.Type.STRUCT, viter1656.length);
          for (var iter1657 in viter1656)
          {
            if (viter1656.hasOwnProperty(iter1657))
            {
              iter1657 = viter1656[iter1657];
              iter1657.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeysCriteria_args = function(args) {
    this.keys = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectKeysCriteria_args.prototype = {};
ConcourseService_selectKeysCriteria_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size1658 = 0;
          var _rtmp31662;
          this.keys = [];
          var _etype1661 = 0;
          _rtmp31662 = input.readListBegin();
          _etype1661 = _rtmp31662.etype;
          _size1658 = _rtmp31662.size;
          for (var _i1663 = 0; _i1663 < _size1658; ++_i1663)
          {
            var elem1664 = null;
            elem1664 = input.readString();
            this.keys.push(elem1664);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeysCriteria_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeysCriteria_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter1665 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter1665))
        {
          iter1665 = this.keys[iter1665];
          output.writeString(iter1665);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeysCriteria_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_selectKeysCriteria_result.prototype = {};
ConcourseService_selectKeysCriteria_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1666 = 0;
          var _rtmp31670;
          this.success = {};
          var _ktype1667 = 0;
          var _vtype1668 = 0;
          _rtmp31670 = input.readMapBegin();
          _ktype1667 = _rtmp31670.ktype;
          _vtype1668 = _rtmp31670.vtype;
          _size1666 = _rtmp31670.size;
          for (var _i1671 = 0; _i1671 < _size1666; ++_i1671)
          {
            var key1672 = null;
            var val1673 = null;
            key1672 = input.readI64();
            var _size1674 = 0;
            var _rtmp31678;
            val1673 = {};
            var _ktype1675 = 0;
            var _vtype1676 = 0;
            _rtmp31678 = input.readMapBegin();
            _ktype1675 = _rtmp31678.ktype;
            _vtype1676 = _rtmp31678.vtype;
            _size1674 = _rtmp31678.size;
            for (var _i1679 = 0; _i1679 < _size1674; ++_i1679)
            {
              var key1680 = null;
              var val1681 = null;
              key1680 = input.readString();
              var _size1682 = 0;
              var _rtmp31686;
              val1681 = [];
              var _etype1685 = 0;
              _rtmp31686 = input.readSetBegin();
              _etype1685 = _rtmp31686.etype;
              _size1682 = _rtmp31686.size;
              for (var _i1687 = 0; _i1687 < _size1682; ++_i1687)
              {
                var elem1688 = null;
                elem1688 = new data_ttypes.TObject();
                elem1688.read(input);
                val1681.push(elem1688);
              }
              input.readSetEnd();
              val1673[key1680] = val1681;
            }
            input.readMapEnd();
            this.success[key1672] = val1673;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeysCriteria_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeysCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter1689 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1689))
        {
          var viter1690 = this.success[kiter1689];
          output.writeI64(kiter1689);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1690));
          for (var kiter1691 in viter1690)
          {
            if (viter1690.hasOwnProperty(kiter1691))
            {
              var viter1692 = viter1690[kiter1691];
              output.writeString(kiter1691);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1692.length);
              for (var iter1693 in viter1692)
              {
                if (viter1692.hasOwnProperty(iter1693))
                {
                  iter1693 = viter1692[iter1693];
                  iter1693.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeysCcl_args = function(args) {
    this.keys = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectKeysCcl_args.prototype = {};
ConcourseService_selectKeysCcl_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size1694 = 0;
          var _rtmp31698;
          this.keys = [];
          var _etype1697 = 0;
          _rtmp31698 = input.readListBegin();
          _etype1697 = _rtmp31698.etype;
          _size1694 = _rtmp31698.size;
          for (var _i1699 = 0; _i1699 < _size1694; ++_i1699)
          {
            var elem1700 = null;
            elem1700 = input.readString();
            this.keys.push(elem1700);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeysCcl_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeysCcl_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter1701 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter1701))
        {
          iter1701 = this.keys[iter1701];
          output.writeString(iter1701);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeysCcl_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_selectKeysCcl_result.prototype = {};
ConcourseService_selectKeysCcl_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1702 = 0;
          var _rtmp31706;
          this.success = {};
          var _ktype1703 = 0;
          var _vtype1704 = 0;
          _rtmp31706 = input.readMapBegin();
          _ktype1703 = _rtmp31706.ktype;
          _vtype1704 = _rtmp31706.vtype;
          _size1702 = _rtmp31706.size;
          for (var _i1707 = 0; _i1707 < _size1702; ++_i1707)
          {
            var key1708 = null;
            var val1709 = null;
            key1708 = input.readI64();
            var _size1710 = 0;
            var _rtmp31714;
            val1709 = {};
            var _ktype1711 = 0;
            var _vtype1712 = 0;
            _rtmp31714 = input.readMapBegin();
            _ktype1711 = _rtmp31714.ktype;
            _vtype1712 = _rtmp31714.vtype;
            _size1710 = _rtmp31714.size;
            for (var _i1715 = 0; _i1715 < _size1710; ++_i1715)
            {
              var key1716 = null;
              var val1717 = null;
              key1716 = input.readString();
              var _size1718 = 0;
              var _rtmp31722;
              val1717 = [];
              var _etype1721 = 0;
              _rtmp31722 = input.readSetBegin();
              _etype1721 = _rtmp31722.etype;
              _size1718 = _rtmp31722.size;
              for (var _i1723 = 0; _i1723 < _size1718; ++_i1723)
              {
                var elem1724 = null;
                elem1724 = new data_ttypes.TObject();
                elem1724.read(input);
                val1717.push(elem1724);
              }
              input.readSetEnd();
              val1709[key1716] = val1717;
            }
            input.readMapEnd();
            this.success[key1708] = val1709;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeysCcl_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeysCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter1725 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1725))
        {
          var viter1726 = this.success[kiter1725];
          output.writeI64(kiter1725);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1726));
          for (var kiter1727 in viter1726)
          {
            if (viter1726.hasOwnProperty(kiter1727))
            {
              var viter1728 = viter1726[kiter1727];
              output.writeString(kiter1727);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1728.length);
              for (var iter1729 in viter1728)
              {
                if (viter1728.hasOwnProperty(iter1729))
                {
                  iter1729 = viter1728[iter1729];
                  iter1729.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeysCriteriaTime_args = function(args) {
    this.keys = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectKeysCriteriaTime_args.prototype = {};
ConcourseService_selectKeysCriteriaTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size1730 = 0;
          var _rtmp31734;
          this.keys = [];
          var _etype1733 = 0;
          _rtmp31734 = input.readListBegin();
          _etype1733 = _rtmp31734.etype;
          _size1730 = _rtmp31734.size;
          for (var _i1735 = 0; _i1735 < _size1730; ++_i1735)
          {
            var elem1736 = null;
            elem1736 = input.readString();
            this.keys.push(elem1736);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeysCriteriaTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeysCriteriaTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter1737 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter1737))
        {
          iter1737 = this.keys[iter1737];
          output.writeString(iter1737);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeysCriteriaTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_selectKeysCriteriaTime_result.prototype = {};
ConcourseService_selectKeysCriteriaTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1738 = 0;
          var _rtmp31742;
          this.success = {};
          var _ktype1739 = 0;
          var _vtype1740 = 0;
          _rtmp31742 = input.readMapBegin();
          _ktype1739 = _rtmp31742.ktype;
          _vtype1740 = _rtmp31742.vtype;
          _size1738 = _rtmp31742.size;
          for (var _i1743 = 0; _i1743 < _size1738; ++_i1743)
          {
            var key1744 = null;
            var val1745 = null;
            key1744 = input.readI64();
            var _size1746 = 0;
            var _rtmp31750;
            val1745 = {};
            var _ktype1747 = 0;
            var _vtype1748 = 0;
            _rtmp31750 = input.readMapBegin();
            _ktype1747 = _rtmp31750.ktype;
            _vtype1748 = _rtmp31750.vtype;
            _size1746 = _rtmp31750.size;
            for (var _i1751 = 0; _i1751 < _size1746; ++_i1751)
            {
              var key1752 = null;
              var val1753 = null;
              key1752 = input.readString();
              var _size1754 = 0;
              var _rtmp31758;
              val1753 = [];
              var _etype1757 = 0;
              _rtmp31758 = input.readSetBegin();
              _etype1757 = _rtmp31758.etype;
              _size1754 = _rtmp31758.size;
              for (var _i1759 = 0; _i1759 < _size1754; ++_i1759)
              {
                var elem1760 = null;
                elem1760 = new data_ttypes.TObject();
                elem1760.read(input);
                val1753.push(elem1760);
              }
              input.readSetEnd();
              val1745[key1752] = val1753;
            }
            input.readMapEnd();
            this.success[key1744] = val1745;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeysCriteriaTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeysCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter1761 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1761))
        {
          var viter1762 = this.success[kiter1761];
          output.writeI64(kiter1761);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1762));
          for (var kiter1763 in viter1762)
          {
            if (viter1762.hasOwnProperty(kiter1763))
            {
              var viter1764 = viter1762[kiter1763];
              output.writeString(kiter1763);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1764.length);
              for (var iter1765 in viter1764)
              {
                if (viter1764.hasOwnProperty(iter1765))
                {
                  iter1765 = viter1764[iter1765];
                  iter1765.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeysCriteriaTimestr_args = function(args) {
    this.keys = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectKeysCriteriaTimestr_args.prototype = {};
ConcourseService_selectKeysCriteriaTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size1766 = 0;
          var _rtmp31770;
          this.keys = [];
          var _etype1769 = 0;
          _rtmp31770 = input.readListBegin();
          _etype1769 = _rtmp31770.etype;
          _size1766 = _rtmp31770.size;
          for (var _i1771 = 0; _i1771 < _size1766; ++_i1771)
          {
            var elem1772 = null;
            elem1772 = input.readString();
            this.keys.push(elem1772);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeysCriteriaTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeysCriteriaTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter1773 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter1773))
        {
          iter1773 = this.keys[iter1773];
          output.writeString(iter1773);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeysCriteriaTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_selectKeysCriteriaTimestr_result.prototype = {};
ConcourseService_selectKeysCriteriaTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1774 = 0;
          var _rtmp31778;
          this.success = {};
          var _ktype1775 = 0;
          var _vtype1776 = 0;
          _rtmp31778 = input.readMapBegin();
          _ktype1775 = _rtmp31778.ktype;
          _vtype1776 = _rtmp31778.vtype;
          _size1774 = _rtmp31778.size;
          for (var _i1779 = 0; _i1779 < _size1774; ++_i1779)
          {
            var key1780 = null;
            var val1781 = null;
            key1780 = input.readI64();
            var _size1782 = 0;
            var _rtmp31786;
            val1781 = {};
            var _ktype1783 = 0;
            var _vtype1784 = 0;
            _rtmp31786 = input.readMapBegin();
            _ktype1783 = _rtmp31786.ktype;
            _vtype1784 = _rtmp31786.vtype;
            _size1782 = _rtmp31786.size;
            for (var _i1787 = 0; _i1787 < _size1782; ++_i1787)
            {
              var key1788 = null;
              var val1789 = null;
              key1788 = input.readString();
              var _size1790 = 0;
              var _rtmp31794;
              val1789 = [];
              var _etype1793 = 0;
              _rtmp31794 = input.readSetBegin();
              _etype1793 = _rtmp31794.etype;
              _size1790 = _rtmp31794.size;
              for (var _i1795 = 0; _i1795 < _size1790; ++_i1795)
              {
                var elem1796 = null;
                elem1796 = new data_ttypes.TObject();
                elem1796.read(input);
                val1789.push(elem1796);
              }
              input.readSetEnd();
              val1781[key1788] = val1789;
            }
            input.readMapEnd();
            this.success[key1780] = val1781;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeysCriteriaTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeysCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter1797 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1797))
        {
          var viter1798 = this.success[kiter1797];
          output.writeI64(kiter1797);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1798));
          for (var kiter1799 in viter1798)
          {
            if (viter1798.hasOwnProperty(kiter1799))
            {
              var viter1800 = viter1798[kiter1799];
              output.writeString(kiter1799);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1800.length);
              for (var iter1801 in viter1800)
              {
                if (viter1800.hasOwnProperty(iter1801))
                {
                  iter1801 = viter1800[iter1801];
                  iter1801.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeysCclTime_args = function(args) {
    this.keys = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectKeysCclTime_args.prototype = {};
ConcourseService_selectKeysCclTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size1802 = 0;
          var _rtmp31806;
          this.keys = [];
          var _etype1805 = 0;
          _rtmp31806 = input.readListBegin();
          _etype1805 = _rtmp31806.etype;
          _size1802 = _rtmp31806.size;
          for (var _i1807 = 0; _i1807 < _size1802; ++_i1807)
          {
            var elem1808 = null;
            elem1808 = input.readString();
            this.keys.push(elem1808);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeysCclTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeysCclTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter1809 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter1809))
        {
          iter1809 = this.keys[iter1809];
          output.writeString(iter1809);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeysCclTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_selectKeysCclTime_result.prototype = {};
ConcourseService_selectKeysCclTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1810 = 0;
          var _rtmp31814;
          this.success = {};
          var _ktype1811 = 0;
          var _vtype1812 = 0;
          _rtmp31814 = input.readMapBegin();
          _ktype1811 = _rtmp31814.ktype;
          _vtype1812 = _rtmp31814.vtype;
          _size1810 = _rtmp31814.size;
          for (var _i1815 = 0; _i1815 < _size1810; ++_i1815)
          {
            var key1816 = null;
            var val1817 = null;
            key1816 = input.readI64();
            var _size1818 = 0;
            var _rtmp31822;
            val1817 = {};
            var _ktype1819 = 0;
            var _vtype1820 = 0;
            _rtmp31822 = input.readMapBegin();
            _ktype1819 = _rtmp31822.ktype;
            _vtype1820 = _rtmp31822.vtype;
            _size1818 = _rtmp31822.size;
            for (var _i1823 = 0; _i1823 < _size1818; ++_i1823)
            {
              var key1824 = null;
              var val1825 = null;
              key1824 = input.readString();
              var _size1826 = 0;
              var _rtmp31830;
              val1825 = [];
              var _etype1829 = 0;
              _rtmp31830 = input.readSetBegin();
              _etype1829 = _rtmp31830.etype;
              _size1826 = _rtmp31830.size;
              for (var _i1831 = 0; _i1831 < _size1826; ++_i1831)
              {
                var elem1832 = null;
                elem1832 = new data_ttypes.TObject();
                elem1832.read(input);
                val1825.push(elem1832);
              }
              input.readSetEnd();
              val1817[key1824] = val1825;
            }
            input.readMapEnd();
            this.success[key1816] = val1817;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeysCclTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeysCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter1833 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1833))
        {
          var viter1834 = this.success[kiter1833];
          output.writeI64(kiter1833);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1834));
          for (var kiter1835 in viter1834)
          {
            if (viter1834.hasOwnProperty(kiter1835))
            {
              var viter1836 = viter1834[kiter1835];
              output.writeString(kiter1835);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1836.length);
              for (var iter1837 in viter1836)
              {
                if (viter1836.hasOwnProperty(iter1837))
                {
                  iter1837 = viter1836[iter1837];
                  iter1837.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeysCclTimestr_args = function(args) {
    this.keys = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_selectKeysCclTimestr_args.prototype = {};
ConcourseService_selectKeysCclTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size1838 = 0;
          var _rtmp31842;
          this.keys = [];
          var _etype1841 = 0;
          _rtmp31842 = input.readListBegin();
          _etype1841 = _rtmp31842.etype;
          _size1838 = _rtmp31842.size;
          for (var _i1843 = 0; _i1843 < _size1838; ++_i1843)
          {
            var elem1844 = null;
            elem1844 = input.readString();
            this.keys.push(elem1844);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeysCclTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeysCclTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter1845 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter1845))
        {
          iter1845 = this.keys[iter1845];
          output.writeString(iter1845);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_selectKeysCclTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_selectKeysCclTimestr_result.prototype = {};
ConcourseService_selectKeysCclTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1846 = 0;
          var _rtmp31850;
          this.success = {};
          var _ktype1847 = 0;
          var _vtype1848 = 0;
          _rtmp31850 = input.readMapBegin();
          _ktype1847 = _rtmp31850.ktype;
          _vtype1848 = _rtmp31850.vtype;
          _size1846 = _rtmp31850.size;
          for (var _i1851 = 0; _i1851 < _size1846; ++_i1851)
          {
            var key1852 = null;
            var val1853 = null;
            key1852 = input.readI64();
            var _size1854 = 0;
            var _rtmp31858;
            val1853 = {};
            var _ktype1855 = 0;
            var _vtype1856 = 0;
            _rtmp31858 = input.readMapBegin();
            _ktype1855 = _rtmp31858.ktype;
            _vtype1856 = _rtmp31858.vtype;
            _size1854 = _rtmp31858.size;
            for (var _i1859 = 0; _i1859 < _size1854; ++_i1859)
            {
              var key1860 = null;
              var val1861 = null;
              key1860 = input.readString();
              var _size1862 = 0;
              var _rtmp31866;
              val1861 = [];
              var _etype1865 = 0;
              _rtmp31866 = input.readSetBegin();
              _etype1865 = _rtmp31866.etype;
              _size1862 = _rtmp31866.size;
              for (var _i1867 = 0; _i1867 < _size1862; ++_i1867)
              {
                var elem1868 = null;
                elem1868 = new data_ttypes.TObject();
                elem1868.read(input);
                val1861.push(elem1868);
              }
              input.readSetEnd();
              val1853[key1860] = val1861;
            }
            input.readMapEnd();
            this.success[key1852] = val1853;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_selectKeysCclTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_selectKeysCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter1869 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1869))
        {
          var viter1870 = this.success[kiter1869];
          output.writeI64(kiter1869);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter1870));
          for (var kiter1871 in viter1870)
          {
            if (viter1870.hasOwnProperty(kiter1871))
            {
              var viter1872 = viter1870[kiter1871];
              output.writeString(kiter1871);
              output.writeSetBegin(Thrift.Type.STRUCT, viter1872.length);
              for (var iter1873 in viter1872)
              {
                if (viter1872.hasOwnProperty(iter1873))
                {
                  iter1873 = viter1872[iter1873];
                  iter1873.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeyRecord_args = function(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getKeyRecord_args.prototype = {};
ConcourseService_getKeyRecord_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeyRecord_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeyRecord_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_getKeyRecord_result.prototype = {};
ConcourseService_getKeyRecord_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeyRecord_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeyRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeyRecordTime_args = function(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getKeyRecordTime_args.prototype = {};
ConcourseService_getKeyRecordTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeyRecordTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeyRecordTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_getKeyRecordTime_result.prototype = {};
ConcourseService_getKeyRecordTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeyRecordTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeyRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeyRecordTimestr_args = function(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getKeyRecordTimestr_args.prototype = {};
ConcourseService_getKeyRecordTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeyRecordTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeyRecordTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_getKeyRecordTimestr_result.prototype = {};
ConcourseService_getKeyRecordTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeyRecordTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeyRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeysRecord_args = function(args) {
    this.keys = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getKeysRecord_args.prototype = {};
ConcourseService_getKeysRecord_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size1874 = 0;
          var _rtmp31878;
          this.keys = [];
          var _etype1877 = 0;
          _rtmp31878 = input.readListBegin();
          _etype1877 = _rtmp31878.etype;
          _size1874 = _rtmp31878.size;
          for (var _i1879 = 0; _i1879 < _size1874; ++_i1879)
          {
            var elem1880 = null;
            elem1880 = input.readString();
            this.keys.push(elem1880);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeysRecord_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeysRecord_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter1881 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter1881))
        {
          iter1881 = this.keys[iter1881];
          output.writeString(iter1881);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeysRecord_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_getKeysRecord_result.prototype = {};
ConcourseService_getKeysRecord_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1882 = 0;
          var _rtmp31886;
          this.success = {};
          var _ktype1883 = 0;
          var _vtype1884 = 0;
          _rtmp31886 = input.readMapBegin();
          _ktype1883 = _rtmp31886.ktype;
          _vtype1884 = _rtmp31886.vtype;
          _size1882 = _rtmp31886.size;
          for (var _i1887 = 0; _i1887 < _size1882; ++_i1887)
          {
            var key1888 = null;
            var val1889 = null;
            key1888 = input.readString();
            val1889 = new data_ttypes.TObject();
            val1889.read(input);
            this.success[key1888] = val1889;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeysRecord_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeysRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (var kiter1890 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1890))
        {
          var viter1891 = this.success[kiter1890];
          output.writeString(kiter1890);
          viter1891.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeysRecordTime_args = function(args) {
    this.keys = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getKeysRecordTime_args.prototype = {};
ConcourseService_getKeysRecordTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size1892 = 0;
          var _rtmp31896;
          this.keys = [];
          var _etype1895 = 0;
          _rtmp31896 = input.readListBegin();
          _etype1895 = _rtmp31896.etype;
          _size1892 = _rtmp31896.size;
          for (var _i1897 = 0; _i1897 < _size1892; ++_i1897)
          {
            var elem1898 = null;
            elem1898 = input.readString();
            this.keys.push(elem1898);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeysRecordTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeysRecordTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter1899 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter1899))
        {
          iter1899 = this.keys[iter1899];
          output.writeString(iter1899);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeysRecordTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_getKeysRecordTime_result.prototype = {};
ConcourseService_getKeysRecordTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1900 = 0;
          var _rtmp31904;
          this.success = {};
          var _ktype1901 = 0;
          var _vtype1902 = 0;
          _rtmp31904 = input.readMapBegin();
          _ktype1901 = _rtmp31904.ktype;
          _vtype1902 = _rtmp31904.vtype;
          _size1900 = _rtmp31904.size;
          for (var _i1905 = 0; _i1905 < _size1900; ++_i1905)
          {
            var key1906 = null;
            var val1907 = null;
            key1906 = input.readString();
            val1907 = new data_ttypes.TObject();
            val1907.read(input);
            this.success[key1906] = val1907;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeysRecordTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeysRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (var kiter1908 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1908))
        {
          var viter1909 = this.success[kiter1908];
          output.writeString(kiter1908);
          viter1909.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeysRecordTimestr_args = function(args) {
    this.keys = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getKeysRecordTimestr_args.prototype = {};
ConcourseService_getKeysRecordTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size1910 = 0;
          var _rtmp31914;
          this.keys = [];
          var _etype1913 = 0;
          _rtmp31914 = input.readListBegin();
          _etype1913 = _rtmp31914.etype;
          _size1910 = _rtmp31914.size;
          for (var _i1915 = 0; _i1915 < _size1910; ++_i1915)
          {
            var elem1916 = null;
            elem1916 = input.readString();
            this.keys.push(elem1916);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeysRecordTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeysRecordTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter1917 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter1917))
        {
          iter1917 = this.keys[iter1917];
          output.writeString(iter1917);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeysRecordTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_getKeysRecordTimestr_result.prototype = {};
ConcourseService_getKeysRecordTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1918 = 0;
          var _rtmp31922;
          this.success = {};
          var _ktype1919 = 0;
          var _vtype1920 = 0;
          _rtmp31922 = input.readMapBegin();
          _ktype1919 = _rtmp31922.ktype;
          _vtype1920 = _rtmp31922.vtype;
          _size1918 = _rtmp31922.size;
          for (var _i1923 = 0; _i1923 < _size1918; ++_i1923)
          {
            var key1924 = null;
            var val1925 = null;
            key1924 = input.readString();
            val1925 = new data_ttypes.TObject();
            val1925.read(input);
            this.success[key1924] = val1925;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeysRecordTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeysRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (var kiter1926 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1926))
        {
          var viter1927 = this.success[kiter1926];
          output.writeString(kiter1926);
          viter1927.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeysRecords_args = function(args) {
    this.keys = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getKeysRecords_args.prototype = {};
ConcourseService_getKeysRecords_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size1928 = 0;
          var _rtmp31932;
          this.keys = [];
          var _etype1931 = 0;
          _rtmp31932 = input.readListBegin();
          _etype1931 = _rtmp31932.etype;
          _size1928 = _rtmp31932.size;
          for (var _i1933 = 0; _i1933 < _size1928; ++_i1933)
          {
            var elem1934 = null;
            elem1934 = input.readString();
            this.keys.push(elem1934);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size1935 = 0;
          var _rtmp31939;
          this.records = [];
          var _etype1938 = 0;
          _rtmp31939 = input.readListBegin();
          _etype1938 = _rtmp31939.etype;
          _size1935 = _rtmp31939.size;
          for (var _i1940 = 0; _i1940 < _size1935; ++_i1940)
          {
            var elem1941 = null;
            elem1941 = input.readI64();
            this.records.push(elem1941);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeysRecords_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeysRecords_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter1942 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter1942))
        {
          iter1942 = this.keys[iter1942];
          output.writeString(iter1942);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter1943 in this.records)
      {
        if (this.records.hasOwnProperty(iter1943))
        {
          iter1943 = this.records[iter1943];
          output.writeI64(iter1943);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeysRecords_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_getKeysRecords_result.prototype = {};
ConcourseService_getKeysRecords_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1944 = 0;
          var _rtmp31948;
          this.success = {};
          var _ktype1945 = 0;
          var _vtype1946 = 0;
          _rtmp31948 = input.readMapBegin();
          _ktype1945 = _rtmp31948.ktype;
          _vtype1946 = _rtmp31948.vtype;
          _size1944 = _rtmp31948.size;
          for (var _i1949 = 0; _i1949 < _size1944; ++_i1949)
          {
            var key1950 = null;
            var val1951 = null;
            key1950 = input.readI64();
            var _size1952 = 0;
            var _rtmp31956;
            val1951 = {};
            var _ktype1953 = 0;
            var _vtype1954 = 0;
            _rtmp31956 = input.readMapBegin();
            _ktype1953 = _rtmp31956.ktype;
            _vtype1954 = _rtmp31956.vtype;
            _size1952 = _rtmp31956.size;
            for (var _i1957 = 0; _i1957 < _size1952; ++_i1957)
            {
              var key1958 = null;
              var val1959 = null;
              key1958 = input.readString();
              val1959 = new data_ttypes.TObject();
              val1959.read(input);
              val1951[key1958] = val1959;
            }
            input.readMapEnd();
            this.success[key1950] = val1951;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeysRecords_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeysRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter1960 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1960))
        {
          var viter1961 = this.success[kiter1960];
          output.writeI64(kiter1960);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter1961));
          for (var kiter1962 in viter1961)
          {
            if (viter1961.hasOwnProperty(kiter1962))
            {
              var viter1963 = viter1961[kiter1962];
              output.writeString(kiter1962);
              viter1963.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeyRecords_args = function(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getKeyRecords_args.prototype = {};
ConcourseService_getKeyRecords_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size1964 = 0;
          var _rtmp31968;
          this.records = [];
          var _etype1967 = 0;
          _rtmp31968 = input.readListBegin();
          _etype1967 = _rtmp31968.etype;
          _size1964 = _rtmp31968.size;
          for (var _i1969 = 0; _i1969 < _size1964; ++_i1969)
          {
            var elem1970 = null;
            elem1970 = input.readI64();
            this.records.push(elem1970);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeyRecords_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter1971 in this.records)
      {
        if (this.records.hasOwnProperty(iter1971))
        {
          iter1971 = this.records[iter1971];
          output.writeI64(iter1971);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeyRecords_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_getKeyRecords_result.prototype = {};
ConcourseService_getKeyRecords_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1972 = 0;
          var _rtmp31976;
          this.success = {};
          var _ktype1973 = 0;
          var _vtype1974 = 0;
          _rtmp31976 = input.readMapBegin();
          _ktype1973 = _rtmp31976.ktype;
          _vtype1974 = _rtmp31976.vtype;
          _size1972 = _rtmp31976.size;
          for (var _i1977 = 0; _i1977 < _size1972; ++_i1977)
          {
            var key1978 = null;
            var val1979 = null;
            key1978 = input.readI64();
            val1979 = new data_ttypes.TObject();
            val1979.read(input);
            this.success[key1978] = val1979;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeyRecords_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeyRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (var kiter1980 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1980))
        {
          var viter1981 = this.success[kiter1980];
          output.writeI64(kiter1980);
          viter1981.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeyRecordsTime_args = function(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getKeyRecordsTime_args.prototype = {};
ConcourseService_getKeyRecordsTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size1982 = 0;
          var _rtmp31986;
          this.records = [];
          var _etype1985 = 0;
          _rtmp31986 = input.readListBegin();
          _etype1985 = _rtmp31986.etype;
          _size1982 = _rtmp31986.size;
          for (var _i1987 = 0; _i1987 < _size1982; ++_i1987)
          {
            var elem1988 = null;
            elem1988 = input.readI64();
            this.records.push(elem1988);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeyRecordsTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter1989 in this.records)
      {
        if (this.records.hasOwnProperty(iter1989))
        {
          iter1989 = this.records[iter1989];
          output.writeI64(iter1989);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeyRecordsTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_getKeyRecordsTime_result.prototype = {};
ConcourseService_getKeyRecordsTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size1990 = 0;
          var _rtmp31994;
          this.success = {};
          var _ktype1991 = 0;
          var _vtype1992 = 0;
          _rtmp31994 = input.readMapBegin();
          _ktype1991 = _rtmp31994.ktype;
          _vtype1992 = _rtmp31994.vtype;
          _size1990 = _rtmp31994.size;
          for (var _i1995 = 0; _i1995 < _size1990; ++_i1995)
          {
            var key1996 = null;
            var val1997 = null;
            key1996 = input.readI64();
            val1997 = new data_ttypes.TObject();
            val1997.read(input);
            this.success[key1996] = val1997;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeyRecordsTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeyRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (var kiter1998 in this.success)
      {
        if (this.success.hasOwnProperty(kiter1998))
        {
          var viter1999 = this.success[kiter1998];
          output.writeI64(kiter1998);
          viter1999.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeyRecordsTimestr_args = function(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getKeyRecordsTimestr_args.prototype = {};
ConcourseService_getKeyRecordsTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size2000 = 0;
          var _rtmp32004;
          this.records = [];
          var _etype2003 = 0;
          _rtmp32004 = input.readListBegin();
          _etype2003 = _rtmp32004.etype;
          _size2000 = _rtmp32004.size;
          for (var _i2005 = 0; _i2005 < _size2000; ++_i2005)
          {
            var elem2006 = null;
            elem2006 = input.readI64();
            this.records.push(elem2006);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeyRecordsTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2007 in this.records)
      {
        if (this.records.hasOwnProperty(iter2007))
        {
          iter2007 = this.records[iter2007];
          output.writeI64(iter2007);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeyRecordsTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_getKeyRecordsTimestr_result.prototype = {};
ConcourseService_getKeyRecordsTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2008 = 0;
          var _rtmp32012;
          this.success = {};
          var _ktype2009 = 0;
          var _vtype2010 = 0;
          _rtmp32012 = input.readMapBegin();
          _ktype2009 = _rtmp32012.ktype;
          _vtype2010 = _rtmp32012.vtype;
          _size2008 = _rtmp32012.size;
          for (var _i2013 = 0; _i2013 < _size2008; ++_i2013)
          {
            var key2014 = null;
            var val2015 = null;
            key2014 = input.readI64();
            val2015 = new data_ttypes.TObject();
            val2015.read(input);
            this.success[key2014] = val2015;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeyRecordsTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeyRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (var kiter2016 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2016))
        {
          var viter2017 = this.success[kiter2016];
          output.writeI64(kiter2016);
          viter2017.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeysRecordsTime_args = function(args) {
    this.keys = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getKeysRecordsTime_args.prototype = {};
ConcourseService_getKeysRecordsTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size2018 = 0;
          var _rtmp32022;
          this.keys = [];
          var _etype2021 = 0;
          _rtmp32022 = input.readListBegin();
          _etype2021 = _rtmp32022.etype;
          _size2018 = _rtmp32022.size;
          for (var _i2023 = 0; _i2023 < _size2018; ++_i2023)
          {
            var elem2024 = null;
            elem2024 = input.readString();
            this.keys.push(elem2024);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size2025 = 0;
          var _rtmp32029;
          this.records = [];
          var _etype2028 = 0;
          _rtmp32029 = input.readListBegin();
          _etype2028 = _rtmp32029.etype;
          _size2025 = _rtmp32029.size;
          for (var _i2030 = 0; _i2030 < _size2025; ++_i2030)
          {
            var elem2031 = null;
            elem2031 = input.readI64();
            this.records.push(elem2031);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeysRecordsTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeysRecordsTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter2032 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter2032))
        {
          iter2032 = this.keys[iter2032];
          output.writeString(iter2032);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2033 in this.records)
      {
        if (this.records.hasOwnProperty(iter2033))
        {
          iter2033 = this.records[iter2033];
          output.writeI64(iter2033);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeysRecordsTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_getKeysRecordsTime_result.prototype = {};
ConcourseService_getKeysRecordsTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2034 = 0;
          var _rtmp32038;
          this.success = {};
          var _ktype2035 = 0;
          var _vtype2036 = 0;
          _rtmp32038 = input.readMapBegin();
          _ktype2035 = _rtmp32038.ktype;
          _vtype2036 = _rtmp32038.vtype;
          _size2034 = _rtmp32038.size;
          for (var _i2039 = 0; _i2039 < _size2034; ++_i2039)
          {
            var key2040 = null;
            var val2041 = null;
            key2040 = input.readI64();
            var _size2042 = 0;
            var _rtmp32046;
            val2041 = {};
            var _ktype2043 = 0;
            var _vtype2044 = 0;
            _rtmp32046 = input.readMapBegin();
            _ktype2043 = _rtmp32046.ktype;
            _vtype2044 = _rtmp32046.vtype;
            _size2042 = _rtmp32046.size;
            for (var _i2047 = 0; _i2047 < _size2042; ++_i2047)
            {
              var key2048 = null;
              var val2049 = null;
              key2048 = input.readString();
              val2049 = new data_ttypes.TObject();
              val2049.read(input);
              val2041[key2048] = val2049;
            }
            input.readMapEnd();
            this.success[key2040] = val2041;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeysRecordsTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeysRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter2050 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2050))
        {
          var viter2051 = this.success[kiter2050];
          output.writeI64(kiter2050);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter2051));
          for (var kiter2052 in viter2051)
          {
            if (viter2051.hasOwnProperty(kiter2052))
            {
              var viter2053 = viter2051[kiter2052];
              output.writeString(kiter2052);
              viter2053.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeysRecordsTimestr_args = function(args) {
    this.keys = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getKeysRecordsTimestr_args.prototype = {};
ConcourseService_getKeysRecordsTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size2054 = 0;
          var _rtmp32058;
          this.keys = [];
          var _etype2057 = 0;
          _rtmp32058 = input.readListBegin();
          _etype2057 = _rtmp32058.etype;
          _size2054 = _rtmp32058.size;
          for (var _i2059 = 0; _i2059 < _size2054; ++_i2059)
          {
            var elem2060 = null;
            elem2060 = input.readString();
            this.keys.push(elem2060);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size2061 = 0;
          var _rtmp32065;
          this.records = [];
          var _etype2064 = 0;
          _rtmp32065 = input.readListBegin();
          _etype2064 = _rtmp32065.etype;
          _size2061 = _rtmp32065.size;
          for (var _i2066 = 0; _i2066 < _size2061; ++_i2066)
          {
            var elem2067 = null;
            elem2067 = input.readI64();
            this.records.push(elem2067);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeysRecordsTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeysRecordsTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter2068 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter2068))
        {
          iter2068 = this.keys[iter2068];
          output.writeString(iter2068);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2069 in this.records)
      {
        if (this.records.hasOwnProperty(iter2069))
        {
          iter2069 = this.records[iter2069];
          output.writeI64(iter2069);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeysRecordsTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_getKeysRecordsTimestr_result.prototype = {};
ConcourseService_getKeysRecordsTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2070 = 0;
          var _rtmp32074;
          this.success = {};
          var _ktype2071 = 0;
          var _vtype2072 = 0;
          _rtmp32074 = input.readMapBegin();
          _ktype2071 = _rtmp32074.ktype;
          _vtype2072 = _rtmp32074.vtype;
          _size2070 = _rtmp32074.size;
          for (var _i2075 = 0; _i2075 < _size2070; ++_i2075)
          {
            var key2076 = null;
            var val2077 = null;
            key2076 = input.readI64();
            var _size2078 = 0;
            var _rtmp32082;
            val2077 = {};
            var _ktype2079 = 0;
            var _vtype2080 = 0;
            _rtmp32082 = input.readMapBegin();
            _ktype2079 = _rtmp32082.ktype;
            _vtype2080 = _rtmp32082.vtype;
            _size2078 = _rtmp32082.size;
            for (var _i2083 = 0; _i2083 < _size2078; ++_i2083)
            {
              var key2084 = null;
              var val2085 = null;
              key2084 = input.readString();
              val2085 = new data_ttypes.TObject();
              val2085.read(input);
              val2077[key2084] = val2085;
            }
            input.readMapEnd();
            this.success[key2076] = val2077;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeysRecordsTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeysRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter2086 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2086))
        {
          var viter2087 = this.success[kiter2086];
          output.writeI64(kiter2086);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter2087));
          for (var kiter2088 in viter2087)
          {
            if (viter2087.hasOwnProperty(kiter2088))
            {
              var viter2089 = viter2087[kiter2088];
              output.writeString(kiter2088);
              viter2089.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeyCriteria_args = function(args) {
    this.key = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getKeyCriteria_args.prototype = {};
ConcourseService_getKeyCriteria_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeyCriteria_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeyCriteria_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeyCriteria_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_getKeyCriteria_result.prototype = {};
ConcourseService_getKeyCriteria_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2090 = 0;
          var _rtmp32094;
          this.success = {};
          var _ktype2091 = 0;
          var _vtype2092 = 0;
          _rtmp32094 = input.readMapBegin();
          _ktype2091 = _rtmp32094.ktype;
          _vtype2092 = _rtmp32094.vtype;
          _size2090 = _rtmp32094.size;
          for (var _i2095 = 0; _i2095 < _size2090; ++_i2095)
          {
            var key2096 = null;
            var val2097 = null;
            key2096 = input.readI64();
            val2097 = new data_ttypes.TObject();
            val2097.read(input);
            this.success[key2096] = val2097;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeyCriteria_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeyCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (var kiter2098 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2098))
        {
          var viter2099 = this.success[kiter2098];
          output.writeI64(kiter2098);
          viter2099.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getCriteria_args = function(args) {
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getCriteria_args.prototype = {};
ConcourseService_getCriteria_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getCriteria_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getCriteria_args');
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 1);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getCriteria_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_getCriteria_result.prototype = {};
ConcourseService_getCriteria_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2100 = 0;
          var _rtmp32104;
          this.success = {};
          var _ktype2101 = 0;
          var _vtype2102 = 0;
          _rtmp32104 = input.readMapBegin();
          _ktype2101 = _rtmp32104.ktype;
          _vtype2102 = _rtmp32104.vtype;
          _size2100 = _rtmp32104.size;
          for (var _i2105 = 0; _i2105 < _size2100; ++_i2105)
          {
            var key2106 = null;
            var val2107 = null;
            key2106 = input.readI64();
            var _size2108 = 0;
            var _rtmp32112;
            val2107 = {};
            var _ktype2109 = 0;
            var _vtype2110 = 0;
            _rtmp32112 = input.readMapBegin();
            _ktype2109 = _rtmp32112.ktype;
            _vtype2110 = _rtmp32112.vtype;
            _size2108 = _rtmp32112.size;
            for (var _i2113 = 0; _i2113 < _size2108; ++_i2113)
            {
              var key2114 = null;
              var val2115 = null;
              key2114 = input.readString();
              val2115 = new data_ttypes.TObject();
              val2115.read(input);
              val2107[key2114] = val2115;
            }
            input.readMapEnd();
            this.success[key2106] = val2107;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getCriteria_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter2116 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2116))
        {
          var viter2117 = this.success[kiter2116];
          output.writeI64(kiter2116);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter2117));
          for (var kiter2118 in viter2117)
          {
            if (viter2117.hasOwnProperty(kiter2118))
            {
              var viter2119 = viter2117[kiter2118];
              output.writeString(kiter2118);
              viter2119.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getCcl_args = function(args) {
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getCcl_args.prototype = {};
ConcourseService_getCcl_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getCcl_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getCcl_args');
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 1);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getCcl_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_getCcl_result.prototype = {};
ConcourseService_getCcl_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2120 = 0;
          var _rtmp32124;
          this.success = {};
          var _ktype2121 = 0;
          var _vtype2122 = 0;
          _rtmp32124 = input.readMapBegin();
          _ktype2121 = _rtmp32124.ktype;
          _vtype2122 = _rtmp32124.vtype;
          _size2120 = _rtmp32124.size;
          for (var _i2125 = 0; _i2125 < _size2120; ++_i2125)
          {
            var key2126 = null;
            var val2127 = null;
            key2126 = input.readI64();
            var _size2128 = 0;
            var _rtmp32132;
            val2127 = {};
            var _ktype2129 = 0;
            var _vtype2130 = 0;
            _rtmp32132 = input.readMapBegin();
            _ktype2129 = _rtmp32132.ktype;
            _vtype2130 = _rtmp32132.vtype;
            _size2128 = _rtmp32132.size;
            for (var _i2133 = 0; _i2133 < _size2128; ++_i2133)
            {
              var key2134 = null;
              var val2135 = null;
              key2134 = input.readString();
              val2135 = new data_ttypes.TObject();
              val2135.read(input);
              val2127[key2134] = val2135;
            }
            input.readMapEnd();
            this.success[key2126] = val2127;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getCcl_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter2136 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2136))
        {
          var viter2137 = this.success[kiter2136];
          output.writeI64(kiter2136);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter2137));
          for (var kiter2138 in viter2137)
          {
            if (viter2137.hasOwnProperty(kiter2138))
            {
              var viter2139 = viter2137[kiter2138];
              output.writeString(kiter2138);
              viter2139.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getCriteriaTime_args = function(args) {
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getCriteriaTime_args.prototype = {};
ConcourseService_getCriteriaTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getCriteriaTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getCriteriaTime_args');
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 1);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getCriteriaTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_getCriteriaTime_result.prototype = {};
ConcourseService_getCriteriaTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2140 = 0;
          var _rtmp32144;
          this.success = {};
          var _ktype2141 = 0;
          var _vtype2142 = 0;
          _rtmp32144 = input.readMapBegin();
          _ktype2141 = _rtmp32144.ktype;
          _vtype2142 = _rtmp32144.vtype;
          _size2140 = _rtmp32144.size;
          for (var _i2145 = 0; _i2145 < _size2140; ++_i2145)
          {
            var key2146 = null;
            var val2147 = null;
            key2146 = input.readI64();
            var _size2148 = 0;
            var _rtmp32152;
            val2147 = {};
            var _ktype2149 = 0;
            var _vtype2150 = 0;
            _rtmp32152 = input.readMapBegin();
            _ktype2149 = _rtmp32152.ktype;
            _vtype2150 = _rtmp32152.vtype;
            _size2148 = _rtmp32152.size;
            for (var _i2153 = 0; _i2153 < _size2148; ++_i2153)
            {
              var key2154 = null;
              var val2155 = null;
              key2154 = input.readString();
              val2155 = new data_ttypes.TObject();
              val2155.read(input);
              val2147[key2154] = val2155;
            }
            input.readMapEnd();
            this.success[key2146] = val2147;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getCriteriaTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter2156 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2156))
        {
          var viter2157 = this.success[kiter2156];
          output.writeI64(kiter2156);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter2157));
          for (var kiter2158 in viter2157)
          {
            if (viter2157.hasOwnProperty(kiter2158))
            {
              var viter2159 = viter2157[kiter2158];
              output.writeString(kiter2158);
              viter2159.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getCriteriaTimestr_args = function(args) {
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getCriteriaTimestr_args.prototype = {};
ConcourseService_getCriteriaTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getCriteriaTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getCriteriaTimestr_args');
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 1);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getCriteriaTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_getCriteriaTimestr_result.prototype = {};
ConcourseService_getCriteriaTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2160 = 0;
          var _rtmp32164;
          this.success = {};
          var _ktype2161 = 0;
          var _vtype2162 = 0;
          _rtmp32164 = input.readMapBegin();
          _ktype2161 = _rtmp32164.ktype;
          _vtype2162 = _rtmp32164.vtype;
          _size2160 = _rtmp32164.size;
          for (var _i2165 = 0; _i2165 < _size2160; ++_i2165)
          {
            var key2166 = null;
            var val2167 = null;
            key2166 = input.readI64();
            var _size2168 = 0;
            var _rtmp32172;
            val2167 = {};
            var _ktype2169 = 0;
            var _vtype2170 = 0;
            _rtmp32172 = input.readMapBegin();
            _ktype2169 = _rtmp32172.ktype;
            _vtype2170 = _rtmp32172.vtype;
            _size2168 = _rtmp32172.size;
            for (var _i2173 = 0; _i2173 < _size2168; ++_i2173)
            {
              var key2174 = null;
              var val2175 = null;
              key2174 = input.readString();
              val2175 = new data_ttypes.TObject();
              val2175.read(input);
              val2167[key2174] = val2175;
            }
            input.readMapEnd();
            this.success[key2166] = val2167;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getCriteriaTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter2176 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2176))
        {
          var viter2177 = this.success[kiter2176];
          output.writeI64(kiter2176);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter2177));
          for (var kiter2178 in viter2177)
          {
            if (viter2177.hasOwnProperty(kiter2178))
            {
              var viter2179 = viter2177[kiter2178];
              output.writeString(kiter2178);
              viter2179.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getCclTime_args = function(args) {
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getCclTime_args.prototype = {};
ConcourseService_getCclTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getCclTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getCclTime_args');
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 1);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getCclTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_getCclTime_result.prototype = {};
ConcourseService_getCclTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2180 = 0;
          var _rtmp32184;
          this.success = {};
          var _ktype2181 = 0;
          var _vtype2182 = 0;
          _rtmp32184 = input.readMapBegin();
          _ktype2181 = _rtmp32184.ktype;
          _vtype2182 = _rtmp32184.vtype;
          _size2180 = _rtmp32184.size;
          for (var _i2185 = 0; _i2185 < _size2180; ++_i2185)
          {
            var key2186 = null;
            var val2187 = null;
            key2186 = input.readI64();
            var _size2188 = 0;
            var _rtmp32192;
            val2187 = {};
            var _ktype2189 = 0;
            var _vtype2190 = 0;
            _rtmp32192 = input.readMapBegin();
            _ktype2189 = _rtmp32192.ktype;
            _vtype2190 = _rtmp32192.vtype;
            _size2188 = _rtmp32192.size;
            for (var _i2193 = 0; _i2193 < _size2188; ++_i2193)
            {
              var key2194 = null;
              var val2195 = null;
              key2194 = input.readString();
              val2195 = new data_ttypes.TObject();
              val2195.read(input);
              val2187[key2194] = val2195;
            }
            input.readMapEnd();
            this.success[key2186] = val2187;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getCclTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter2196 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2196))
        {
          var viter2197 = this.success[kiter2196];
          output.writeI64(kiter2196);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter2197));
          for (var kiter2198 in viter2197)
          {
            if (viter2197.hasOwnProperty(kiter2198))
            {
              var viter2199 = viter2197[kiter2198];
              output.writeString(kiter2198);
              viter2199.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getCclTimestr_args = function(args) {
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getCclTimestr_args.prototype = {};
ConcourseService_getCclTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getCclTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getCclTimestr_args');
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 1);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getCclTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_getCclTimestr_result.prototype = {};
ConcourseService_getCclTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2200 = 0;
          var _rtmp32204;
          this.success = {};
          var _ktype2201 = 0;
          var _vtype2202 = 0;
          _rtmp32204 = input.readMapBegin();
          _ktype2201 = _rtmp32204.ktype;
          _vtype2202 = _rtmp32204.vtype;
          _size2200 = _rtmp32204.size;
          for (var _i2205 = 0; _i2205 < _size2200; ++_i2205)
          {
            var key2206 = null;
            var val2207 = null;
            key2206 = input.readI64();
            var _size2208 = 0;
            var _rtmp32212;
            val2207 = {};
            var _ktype2209 = 0;
            var _vtype2210 = 0;
            _rtmp32212 = input.readMapBegin();
            _ktype2209 = _rtmp32212.ktype;
            _vtype2210 = _rtmp32212.vtype;
            _size2208 = _rtmp32212.size;
            for (var _i2213 = 0; _i2213 < _size2208; ++_i2213)
            {
              var key2214 = null;
              var val2215 = null;
              key2214 = input.readString();
              val2215 = new data_ttypes.TObject();
              val2215.read(input);
              val2207[key2214] = val2215;
            }
            input.readMapEnd();
            this.success[key2206] = val2207;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getCclTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter2216 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2216))
        {
          var viter2217 = this.success[kiter2216];
          output.writeI64(kiter2216);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter2217));
          for (var kiter2218 in viter2217)
          {
            if (viter2217.hasOwnProperty(kiter2218))
            {
              var viter2219 = viter2217[kiter2218];
              output.writeString(kiter2218);
              viter2219.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeyCcl_args = function(args) {
    this.key = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getKeyCcl_args.prototype = {};
ConcourseService_getKeyCcl_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeyCcl_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeyCcl_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeyCcl_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_getKeyCcl_result.prototype = {};
ConcourseService_getKeyCcl_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2220 = 0;
          var _rtmp32224;
          this.success = {};
          var _ktype2221 = 0;
          var _vtype2222 = 0;
          _rtmp32224 = input.readMapBegin();
          _ktype2221 = _rtmp32224.ktype;
          _vtype2222 = _rtmp32224.vtype;
          _size2220 = _rtmp32224.size;
          for (var _i2225 = 0; _i2225 < _size2220; ++_i2225)
          {
            var key2226 = null;
            var val2227 = null;
            key2226 = input.readI64();
            val2227 = new data_ttypes.TObject();
            val2227.read(input);
            this.success[key2226] = val2227;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeyCcl_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeyCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (var kiter2228 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2228))
        {
          var viter2229 = this.success[kiter2228];
          output.writeI64(kiter2228);
          viter2229.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeyCriteriaTime_args = function(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getKeyCriteriaTime_args.prototype = {};
ConcourseService_getKeyCriteriaTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeyCriteriaTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeyCriteriaTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeyCriteriaTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_getKeyCriteriaTime_result.prototype = {};
ConcourseService_getKeyCriteriaTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2230 = 0;
          var _rtmp32234;
          this.success = {};
          var _ktype2231 = 0;
          var _vtype2232 = 0;
          _rtmp32234 = input.readMapBegin();
          _ktype2231 = _rtmp32234.ktype;
          _vtype2232 = _rtmp32234.vtype;
          _size2230 = _rtmp32234.size;
          for (var _i2235 = 0; _i2235 < _size2230; ++_i2235)
          {
            var key2236 = null;
            var val2237 = null;
            key2236 = input.readI64();
            val2237 = new data_ttypes.TObject();
            val2237.read(input);
            this.success[key2236] = val2237;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeyCriteriaTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeyCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (var kiter2238 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2238))
        {
          var viter2239 = this.success[kiter2238];
          output.writeI64(kiter2238);
          viter2239.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeyCriteriaTimestr_args = function(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getKeyCriteriaTimestr_args.prototype = {};
ConcourseService_getKeyCriteriaTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeyCriteriaTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeyCriteriaTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeyCriteriaTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_getKeyCriteriaTimestr_result.prototype = {};
ConcourseService_getKeyCriteriaTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2240 = 0;
          var _rtmp32244;
          this.success = {};
          var _ktype2241 = 0;
          var _vtype2242 = 0;
          _rtmp32244 = input.readMapBegin();
          _ktype2241 = _rtmp32244.ktype;
          _vtype2242 = _rtmp32244.vtype;
          _size2240 = _rtmp32244.size;
          for (var _i2245 = 0; _i2245 < _size2240; ++_i2245)
          {
            var key2246 = null;
            var val2247 = null;
            key2246 = input.readI64();
            val2247 = new data_ttypes.TObject();
            val2247.read(input);
            this.success[key2246] = val2247;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeyCriteriaTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeyCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (var kiter2248 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2248))
        {
          var viter2249 = this.success[kiter2248];
          output.writeI64(kiter2248);
          viter2249.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeyCclTime_args = function(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getKeyCclTime_args.prototype = {};
ConcourseService_getKeyCclTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeyCclTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeyCclTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeyCclTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_getKeyCclTime_result.prototype = {};
ConcourseService_getKeyCclTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2250 = 0;
          var _rtmp32254;
          this.success = {};
          var _ktype2251 = 0;
          var _vtype2252 = 0;
          _rtmp32254 = input.readMapBegin();
          _ktype2251 = _rtmp32254.ktype;
          _vtype2252 = _rtmp32254.vtype;
          _size2250 = _rtmp32254.size;
          for (var _i2255 = 0; _i2255 < _size2250; ++_i2255)
          {
            var key2256 = null;
            var val2257 = null;
            key2256 = input.readI64();
            val2257 = new data_ttypes.TObject();
            val2257.read(input);
            this.success[key2256] = val2257;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeyCclTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeyCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (var kiter2258 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2258))
        {
          var viter2259 = this.success[kiter2258];
          output.writeI64(kiter2258);
          viter2259.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeyCclTimestr_args = function(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getKeyCclTimestr_args.prototype = {};
ConcourseService_getKeyCclTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeyCclTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeyCclTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeyCclTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_getKeyCclTimestr_result.prototype = {};
ConcourseService_getKeyCclTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2260 = 0;
          var _rtmp32264;
          this.success = {};
          var _ktype2261 = 0;
          var _vtype2262 = 0;
          _rtmp32264 = input.readMapBegin();
          _ktype2261 = _rtmp32264.ktype;
          _vtype2262 = _rtmp32264.vtype;
          _size2260 = _rtmp32264.size;
          for (var _i2265 = 0; _i2265 < _size2260; ++_i2265)
          {
            var key2266 = null;
            var val2267 = null;
            key2266 = input.readI64();
            val2267 = new data_ttypes.TObject();
            val2267.read(input);
            this.success[key2266] = val2267;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeyCclTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeyCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
      for (var kiter2268 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2268))
        {
          var viter2269 = this.success[kiter2268];
          output.writeI64(kiter2268);
          viter2269.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeysCriteria_args = function(args) {
    this.keys = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getKeysCriteria_args.prototype = {};
ConcourseService_getKeysCriteria_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size2270 = 0;
          var _rtmp32274;
          this.keys = [];
          var _etype2273 = 0;
          _rtmp32274 = input.readListBegin();
          _etype2273 = _rtmp32274.etype;
          _size2270 = _rtmp32274.size;
          for (var _i2275 = 0; _i2275 < _size2270; ++_i2275)
          {
            var elem2276 = null;
            elem2276 = input.readString();
            this.keys.push(elem2276);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeysCriteria_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeysCriteria_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter2277 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter2277))
        {
          iter2277 = this.keys[iter2277];
          output.writeString(iter2277);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeysCriteria_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_getKeysCriteria_result.prototype = {};
ConcourseService_getKeysCriteria_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2278 = 0;
          var _rtmp32282;
          this.success = {};
          var _ktype2279 = 0;
          var _vtype2280 = 0;
          _rtmp32282 = input.readMapBegin();
          _ktype2279 = _rtmp32282.ktype;
          _vtype2280 = _rtmp32282.vtype;
          _size2278 = _rtmp32282.size;
          for (var _i2283 = 0; _i2283 < _size2278; ++_i2283)
          {
            var key2284 = null;
            var val2285 = null;
            key2284 = input.readI64();
            var _size2286 = 0;
            var _rtmp32290;
            val2285 = {};
            var _ktype2287 = 0;
            var _vtype2288 = 0;
            _rtmp32290 = input.readMapBegin();
            _ktype2287 = _rtmp32290.ktype;
            _vtype2288 = _rtmp32290.vtype;
            _size2286 = _rtmp32290.size;
            for (var _i2291 = 0; _i2291 < _size2286; ++_i2291)
            {
              var key2292 = null;
              var val2293 = null;
              key2292 = input.readString();
              val2293 = new data_ttypes.TObject();
              val2293.read(input);
              val2285[key2292] = val2293;
            }
            input.readMapEnd();
            this.success[key2284] = val2285;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeysCriteria_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeysCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter2294 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2294))
        {
          var viter2295 = this.success[kiter2294];
          output.writeI64(kiter2294);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter2295));
          for (var kiter2296 in viter2295)
          {
            if (viter2295.hasOwnProperty(kiter2296))
            {
              var viter2297 = viter2295[kiter2296];
              output.writeString(kiter2296);
              viter2297.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeysCcl_args = function(args) {
    this.keys = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getKeysCcl_args.prototype = {};
ConcourseService_getKeysCcl_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size2298 = 0;
          var _rtmp32302;
          this.keys = [];
          var _etype2301 = 0;
          _rtmp32302 = input.readListBegin();
          _etype2301 = _rtmp32302.etype;
          _size2298 = _rtmp32302.size;
          for (var _i2303 = 0; _i2303 < _size2298; ++_i2303)
          {
            var elem2304 = null;
            elem2304 = input.readString();
            this.keys.push(elem2304);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeysCcl_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeysCcl_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter2305 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter2305))
        {
          iter2305 = this.keys[iter2305];
          output.writeString(iter2305);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeysCcl_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_getKeysCcl_result.prototype = {};
ConcourseService_getKeysCcl_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2306 = 0;
          var _rtmp32310;
          this.success = {};
          var _ktype2307 = 0;
          var _vtype2308 = 0;
          _rtmp32310 = input.readMapBegin();
          _ktype2307 = _rtmp32310.ktype;
          _vtype2308 = _rtmp32310.vtype;
          _size2306 = _rtmp32310.size;
          for (var _i2311 = 0; _i2311 < _size2306; ++_i2311)
          {
            var key2312 = null;
            var val2313 = null;
            key2312 = input.readI64();
            var _size2314 = 0;
            var _rtmp32318;
            val2313 = {};
            var _ktype2315 = 0;
            var _vtype2316 = 0;
            _rtmp32318 = input.readMapBegin();
            _ktype2315 = _rtmp32318.ktype;
            _vtype2316 = _rtmp32318.vtype;
            _size2314 = _rtmp32318.size;
            for (var _i2319 = 0; _i2319 < _size2314; ++_i2319)
            {
              var key2320 = null;
              var val2321 = null;
              key2320 = input.readString();
              val2321 = new data_ttypes.TObject();
              val2321.read(input);
              val2313[key2320] = val2321;
            }
            input.readMapEnd();
            this.success[key2312] = val2313;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeysCcl_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeysCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter2322 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2322))
        {
          var viter2323 = this.success[kiter2322];
          output.writeI64(kiter2322);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter2323));
          for (var kiter2324 in viter2323)
          {
            if (viter2323.hasOwnProperty(kiter2324))
            {
              var viter2325 = viter2323[kiter2324];
              output.writeString(kiter2324);
              viter2325.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeysCriteriaTime_args = function(args) {
    this.keys = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getKeysCriteriaTime_args.prototype = {};
ConcourseService_getKeysCriteriaTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size2326 = 0;
          var _rtmp32330;
          this.keys = [];
          var _etype2329 = 0;
          _rtmp32330 = input.readListBegin();
          _etype2329 = _rtmp32330.etype;
          _size2326 = _rtmp32330.size;
          for (var _i2331 = 0; _i2331 < _size2326; ++_i2331)
          {
            var elem2332 = null;
            elem2332 = input.readString();
            this.keys.push(elem2332);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeysCriteriaTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeysCriteriaTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter2333 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter2333))
        {
          iter2333 = this.keys[iter2333];
          output.writeString(iter2333);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeysCriteriaTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_getKeysCriteriaTime_result.prototype = {};
ConcourseService_getKeysCriteriaTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2334 = 0;
          var _rtmp32338;
          this.success = {};
          var _ktype2335 = 0;
          var _vtype2336 = 0;
          _rtmp32338 = input.readMapBegin();
          _ktype2335 = _rtmp32338.ktype;
          _vtype2336 = _rtmp32338.vtype;
          _size2334 = _rtmp32338.size;
          for (var _i2339 = 0; _i2339 < _size2334; ++_i2339)
          {
            var key2340 = null;
            var val2341 = null;
            key2340 = input.readI64();
            var _size2342 = 0;
            var _rtmp32346;
            val2341 = {};
            var _ktype2343 = 0;
            var _vtype2344 = 0;
            _rtmp32346 = input.readMapBegin();
            _ktype2343 = _rtmp32346.ktype;
            _vtype2344 = _rtmp32346.vtype;
            _size2342 = _rtmp32346.size;
            for (var _i2347 = 0; _i2347 < _size2342; ++_i2347)
            {
              var key2348 = null;
              var val2349 = null;
              key2348 = input.readString();
              val2349 = new data_ttypes.TObject();
              val2349.read(input);
              val2341[key2348] = val2349;
            }
            input.readMapEnd();
            this.success[key2340] = val2341;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeysCriteriaTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeysCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter2350 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2350))
        {
          var viter2351 = this.success[kiter2350];
          output.writeI64(kiter2350);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter2351));
          for (var kiter2352 in viter2351)
          {
            if (viter2351.hasOwnProperty(kiter2352))
            {
              var viter2353 = viter2351[kiter2352];
              output.writeString(kiter2352);
              viter2353.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeysCriteriaTimestr_args = function(args) {
    this.keys = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getKeysCriteriaTimestr_args.prototype = {};
ConcourseService_getKeysCriteriaTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size2354 = 0;
          var _rtmp32358;
          this.keys = [];
          var _etype2357 = 0;
          _rtmp32358 = input.readListBegin();
          _etype2357 = _rtmp32358.etype;
          _size2354 = _rtmp32358.size;
          for (var _i2359 = 0; _i2359 < _size2354; ++_i2359)
          {
            var elem2360 = null;
            elem2360 = input.readString();
            this.keys.push(elem2360);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeysCriteriaTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeysCriteriaTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter2361 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter2361))
        {
          iter2361 = this.keys[iter2361];
          output.writeString(iter2361);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeysCriteriaTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_getKeysCriteriaTimestr_result.prototype = {};
ConcourseService_getKeysCriteriaTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2362 = 0;
          var _rtmp32366;
          this.success = {};
          var _ktype2363 = 0;
          var _vtype2364 = 0;
          _rtmp32366 = input.readMapBegin();
          _ktype2363 = _rtmp32366.ktype;
          _vtype2364 = _rtmp32366.vtype;
          _size2362 = _rtmp32366.size;
          for (var _i2367 = 0; _i2367 < _size2362; ++_i2367)
          {
            var key2368 = null;
            var val2369 = null;
            key2368 = input.readI64();
            var _size2370 = 0;
            var _rtmp32374;
            val2369 = {};
            var _ktype2371 = 0;
            var _vtype2372 = 0;
            _rtmp32374 = input.readMapBegin();
            _ktype2371 = _rtmp32374.ktype;
            _vtype2372 = _rtmp32374.vtype;
            _size2370 = _rtmp32374.size;
            for (var _i2375 = 0; _i2375 < _size2370; ++_i2375)
            {
              var key2376 = null;
              var val2377 = null;
              key2376 = input.readString();
              val2377 = new data_ttypes.TObject();
              val2377.read(input);
              val2369[key2376] = val2377;
            }
            input.readMapEnd();
            this.success[key2368] = val2369;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeysCriteriaTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeysCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter2378 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2378))
        {
          var viter2379 = this.success[kiter2378];
          output.writeI64(kiter2378);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter2379));
          for (var kiter2380 in viter2379)
          {
            if (viter2379.hasOwnProperty(kiter2380))
            {
              var viter2381 = viter2379[kiter2380];
              output.writeString(kiter2380);
              viter2381.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeysCclTime_args = function(args) {
    this.keys = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getKeysCclTime_args.prototype = {};
ConcourseService_getKeysCclTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size2382 = 0;
          var _rtmp32386;
          this.keys = [];
          var _etype2385 = 0;
          _rtmp32386 = input.readListBegin();
          _etype2385 = _rtmp32386.etype;
          _size2382 = _rtmp32386.size;
          for (var _i2387 = 0; _i2387 < _size2382; ++_i2387)
          {
            var elem2388 = null;
            elem2388 = input.readString();
            this.keys.push(elem2388);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeysCclTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeysCclTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter2389 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter2389))
        {
          iter2389 = this.keys[iter2389];
          output.writeString(iter2389);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeysCclTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_getKeysCclTime_result.prototype = {};
ConcourseService_getKeysCclTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2390 = 0;
          var _rtmp32394;
          this.success = {};
          var _ktype2391 = 0;
          var _vtype2392 = 0;
          _rtmp32394 = input.readMapBegin();
          _ktype2391 = _rtmp32394.ktype;
          _vtype2392 = _rtmp32394.vtype;
          _size2390 = _rtmp32394.size;
          for (var _i2395 = 0; _i2395 < _size2390; ++_i2395)
          {
            var key2396 = null;
            var val2397 = null;
            key2396 = input.readI64();
            var _size2398 = 0;
            var _rtmp32402;
            val2397 = {};
            var _ktype2399 = 0;
            var _vtype2400 = 0;
            _rtmp32402 = input.readMapBegin();
            _ktype2399 = _rtmp32402.ktype;
            _vtype2400 = _rtmp32402.vtype;
            _size2398 = _rtmp32402.size;
            for (var _i2403 = 0; _i2403 < _size2398; ++_i2403)
            {
              var key2404 = null;
              var val2405 = null;
              key2404 = input.readString();
              val2405 = new data_ttypes.TObject();
              val2405.read(input);
              val2397[key2404] = val2405;
            }
            input.readMapEnd();
            this.success[key2396] = val2397;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeysCclTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeysCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter2406 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2406))
        {
          var viter2407 = this.success[kiter2406];
          output.writeI64(kiter2406);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter2407));
          for (var kiter2408 in viter2407)
          {
            if (viter2407.hasOwnProperty(kiter2408))
            {
              var viter2409 = viter2407[kiter2408];
              output.writeString(kiter2408);
              viter2409.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeysCclTimestr_args = function(args) {
    this.keys = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getKeysCclTimestr_args.prototype = {};
ConcourseService_getKeysCclTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size2410 = 0;
          var _rtmp32414;
          this.keys = [];
          var _etype2413 = 0;
          _rtmp32414 = input.readListBegin();
          _etype2413 = _rtmp32414.etype;
          _size2410 = _rtmp32414.size;
          for (var _i2415 = 0; _i2415 < _size2410; ++_i2415)
          {
            var elem2416 = null;
            elem2416 = input.readString();
            this.keys.push(elem2416);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeysCclTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeysCclTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter2417 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter2417))
        {
          iter2417 = this.keys[iter2417];
          output.writeString(iter2417);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getKeysCclTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_getKeysCclTimestr_result.prototype = {};
ConcourseService_getKeysCclTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2418 = 0;
          var _rtmp32422;
          this.success = {};
          var _ktype2419 = 0;
          var _vtype2420 = 0;
          _rtmp32422 = input.readMapBegin();
          _ktype2419 = _rtmp32422.ktype;
          _vtype2420 = _rtmp32422.vtype;
          _size2418 = _rtmp32422.size;
          for (var _i2423 = 0; _i2423 < _size2418; ++_i2423)
          {
            var key2424 = null;
            var val2425 = null;
            key2424 = input.readI64();
            var _size2426 = 0;
            var _rtmp32430;
            val2425 = {};
            var _ktype2427 = 0;
            var _vtype2428 = 0;
            _rtmp32430 = input.readMapBegin();
            _ktype2427 = _rtmp32430.ktype;
            _vtype2428 = _rtmp32430.vtype;
            _size2426 = _rtmp32430.size;
            for (var _i2431 = 0; _i2431 < _size2426; ++_i2431)
            {
              var key2432 = null;
              var val2433 = null;
              key2432 = input.readString();
              val2433 = new data_ttypes.TObject();
              val2433.read(input);
              val2425[key2432] = val2433;
            }
            input.readMapEnd();
            this.success[key2424] = val2425;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getKeysCclTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getKeysCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter2434 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2434))
        {
          var viter2435 = this.success[kiter2434];
          output.writeI64(kiter2434);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter2435));
          for (var kiter2436 in viter2435)
          {
            if (viter2435.hasOwnProperty(kiter2436))
            {
              var viter2437 = viter2435[kiter2436];
              output.writeString(kiter2436);
              viter2437.write(output);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_verifyKeyValueRecord_args = function(args) {
    this.key = null;
    this.value = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.value !== undefined && args.value !== null) {
            this.value = new data_ttypes.TObject(args.value);
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_verifyKeyValueRecord_args.prototype = {};
ConcourseService_verifyKeyValueRecord_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_verifyKeyValueRecord_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_verifyKeyValueRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 3);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_verifyKeyValueRecord_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_verifyKeyValueRecord_result.prototype = {};
ConcourseService_verifyKeyValueRecord_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_verifyKeyValueRecord_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_verifyKeyValueRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_verifyKeyValueRecordTime_args = function(args) {
    this.key = null;
    this.value = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.value !== undefined && args.value !== null) {
            this.value = new data_ttypes.TObject(args.value);
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_verifyKeyValueRecordTime_args.prototype = {};
ConcourseService_verifyKeyValueRecordTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_verifyKeyValueRecordTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_verifyKeyValueRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 3);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_verifyKeyValueRecordTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_verifyKeyValueRecordTime_result.prototype = {};
ConcourseService_verifyKeyValueRecordTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_verifyKeyValueRecordTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_verifyKeyValueRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_verifyKeyValueRecordTimestr_args = function(args) {
    this.key = null;
    this.value = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.value !== undefined && args.value !== null) {
            this.value = new data_ttypes.TObject(args.value);
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_verifyKeyValueRecordTimestr_args.prototype = {};
ConcourseService_verifyKeyValueRecordTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_verifyKeyValueRecordTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_verifyKeyValueRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 3);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 4);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_verifyKeyValueRecordTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_verifyKeyValueRecordTimestr_result.prototype = {};
ConcourseService_verifyKeyValueRecordTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_verifyKeyValueRecordTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_verifyKeyValueRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_jsonifyRecords_args = function(args) {
    this.records = null;
    this.identifier = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.identifier !== undefined && args.identifier !== null) {
            this.identifier = args.identifier;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_jsonifyRecords_args.prototype = {};
ConcourseService_jsonifyRecords_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size2438 = 0;
          var _rtmp32442;
          this.records = [];
          var _etype2441 = 0;
          _rtmp32442 = input.readListBegin();
          _etype2441 = _rtmp32442.etype;
          _size2438 = _rtmp32442.size;
          for (var _i2443 = 0; _i2443 < _size2438; ++_i2443)
          {
            var elem2444 = null;
            elem2444 = input.readI64();
            this.records.push(elem2444);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.identifier = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_jsonifyRecords_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_jsonifyRecords_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2445 in this.records)
      {
        if (this.records.hasOwnProperty(iter2445))
        {
          iter2445 = this.records[iter2445];
          output.writeI64(iter2445);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.identifier !== null && this.identifier !== undefined) {
      output.writeFieldBegin('identifier', Thrift.Type.BOOL, 2);
      output.writeBool(this.identifier);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_jsonifyRecords_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_jsonifyRecords_result.prototype = {};
ConcourseService_jsonifyRecords_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_jsonifyRecords_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_jsonifyRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_jsonifyRecordsTime_args = function(args) {
    this.records = null;
    this.timestamp = null;
    this.identifier = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.identifier !== undefined && args.identifier !== null) {
            this.identifier = args.identifier;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_jsonifyRecordsTime_args.prototype = {};
ConcourseService_jsonifyRecordsTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size2446 = 0;
          var _rtmp32450;
          this.records = [];
          var _etype2449 = 0;
          _rtmp32450 = input.readListBegin();
          _etype2449 = _rtmp32450.etype;
          _size2446 = _rtmp32450.size;
          for (var _i2451 = 0; _i2451 < _size2446; ++_i2451)
          {
            var elem2452 = null;
            elem2452 = input.readI64();
            this.records.push(elem2452);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.identifier = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_jsonifyRecordsTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_jsonifyRecordsTime_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2453 in this.records)
      {
        if (this.records.hasOwnProperty(iter2453))
        {
          iter2453 = this.records[iter2453];
          output.writeI64(iter2453);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.identifier !== null && this.identifier !== undefined) {
      output.writeFieldBegin('identifier', Thrift.Type.BOOL, 3);
      output.writeBool(this.identifier);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_jsonifyRecordsTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_jsonifyRecordsTime_result.prototype = {};
ConcourseService_jsonifyRecordsTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_jsonifyRecordsTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_jsonifyRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_jsonifyRecordsTimestr_args = function(args) {
    this.records = null;
    this.timestamp = null;
    this.identifier = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.identifier !== undefined && args.identifier !== null) {
            this.identifier = args.identifier;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_jsonifyRecordsTimestr_args.prototype = {};
ConcourseService_jsonifyRecordsTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size2454 = 0;
          var _rtmp32458;
          this.records = [];
          var _etype2457 = 0;
          _rtmp32458 = input.readListBegin();
          _etype2457 = _rtmp32458.etype;
          _size2454 = _rtmp32458.size;
          for (var _i2459 = 0; _i2459 < _size2454; ++_i2459)
          {
            var elem2460 = null;
            elem2460 = input.readI64();
            this.records.push(elem2460);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.identifier = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_jsonifyRecordsTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_jsonifyRecordsTimestr_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2461 in this.records)
      {
        if (this.records.hasOwnProperty(iter2461))
        {
          iter2461 = this.records[iter2461];
          output.writeI64(iter2461);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.identifier !== null && this.identifier !== undefined) {
      output.writeFieldBegin('identifier', Thrift.Type.BOOL, 3);
      output.writeBool(this.identifier);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_jsonifyRecordsTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_jsonifyRecordsTimestr_result.prototype = {};
ConcourseService_jsonifyRecordsTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_jsonifyRecordsTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_jsonifyRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_findCriteria_args = function(args) {
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_findCriteria_args.prototype = {};
ConcourseService_findCriteria_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_findCriteria_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_findCriteria_args');
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 1);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_findCriteria_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyList(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_findCriteria_result.prototype = {};
ConcourseService_findCriteria_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.SET) {
          var _size2462 = 0;
          var _rtmp32466;
          this.success = [];
          var _etype2465 = 0;
          _rtmp32466 = input.readSetBegin();
          _etype2465 = _rtmp32466.etype;
          _size2462 = _rtmp32466.size;
          for (var _i2467 = 0; _i2467 < _size2462; ++_i2467)
          {
            var elem2468 = null;
            elem2468 = input.readI64();
            this.success.push(elem2468);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_findCriteria_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_findCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.I64, this.success.length);
      for (var iter2469 in this.success)
      {
        if (this.success.hasOwnProperty(iter2469))
        {
          iter2469 = this.success[iter2469];
          output.writeI64(iter2469);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_findCcl_args = function(args) {
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_findCcl_args.prototype = {};
ConcourseService_findCcl_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_findCcl_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_findCcl_args');
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 1);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_findCcl_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyList(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_findCcl_result.prototype = {};
ConcourseService_findCcl_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.SET) {
          var _size2470 = 0;
          var _rtmp32474;
          this.success = [];
          var _etype2473 = 0;
          _rtmp32474 = input.readSetBegin();
          _etype2473 = _rtmp32474.etype;
          _size2470 = _rtmp32474.size;
          for (var _i2475 = 0; _i2475 < _size2470; ++_i2475)
          {
            var elem2476 = null;
            elem2476 = input.readI64();
            this.success.push(elem2476);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_findCcl_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_findCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.I64, this.success.length);
      for (var iter2477 in this.success)
      {
        if (this.success.hasOwnProperty(iter2477))
        {
          iter2477 = this.success[iter2477];
          output.writeI64(iter2477);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_findKeyOperatorValues_args = function(args) {
    this.key = null;
    this.operator = null;
    this.values = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.operator !== undefined && args.operator !== null) {
            this.operator = args.operator;
        }
        if (args.values !== undefined && args.values !== null) {
            this.values = Thrift.copyList(args.values, [data_ttypes.TObject]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_findKeyOperatorValues_args.prototype = {};
ConcourseService_findKeyOperatorValues_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.operator = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size2478 = 0;
          var _rtmp32482;
          this.values = [];
          var _etype2481 = 0;
          _rtmp32482 = input.readListBegin();
          _etype2481 = _rtmp32482.etype;
          _size2478 = _rtmp32482.size;
          for (var _i2483 = 0; _i2483 < _size2478; ++_i2483)
          {
            var elem2484 = null;
            elem2484 = new data_ttypes.TObject();
            elem2484.read(input);
            this.values.push(elem2484);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_findKeyOperatorValues_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorValues_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.operator !== null && this.operator !== undefined) {
      output.writeFieldBegin('operator', Thrift.Type.I32, 2);
      output.writeI32(this.operator);
      output.writeFieldEnd();
    }
    if (this.values !== null && this.values !== undefined) {
      output.writeFieldBegin('values', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
      for (var iter2485 in this.values)
      {
        if (this.values.hasOwnProperty(iter2485))
        {
          iter2485 = this.values[iter2485];
          iter2485.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_findKeyOperatorValues_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyList(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_findKeyOperatorValues_result.prototype = {};
ConcourseService_findKeyOperatorValues_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.SET) {
          var _size2486 = 0;
          var _rtmp32490;
          this.success = [];
          var _etype2489 = 0;
          _rtmp32490 = input.readSetBegin();
          _etype2489 = _rtmp32490.etype;
          _size2486 = _rtmp32490.size;
          for (var _i2491 = 0; _i2491 < _size2486; ++_i2491)
          {
            var elem2492 = null;
            elem2492 = input.readI64();
            this.success.push(elem2492);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_findKeyOperatorValues_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorValues_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.I64, this.success.length);
      for (var iter2493 in this.success)
      {
        if (this.success.hasOwnProperty(iter2493))
        {
          iter2493 = this.success[iter2493];
          output.writeI64(iter2493);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_findKeyOperatorValuesTime_args = function(args) {
    this.key = null;
    this.operator = null;
    this.values = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.operator !== undefined && args.operator !== null) {
            this.operator = args.operator;
        }
        if (args.values !== undefined && args.values !== null) {
            this.values = Thrift.copyList(args.values, [data_ttypes.TObject]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_findKeyOperatorValuesTime_args.prototype = {};
ConcourseService_findKeyOperatorValuesTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.operator = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size2494 = 0;
          var _rtmp32498;
          this.values = [];
          var _etype2497 = 0;
          _rtmp32498 = input.readListBegin();
          _etype2497 = _rtmp32498.etype;
          _size2494 = _rtmp32498.size;
          for (var _i2499 = 0; _i2499 < _size2494; ++_i2499)
          {
            var elem2500 = null;
            elem2500 = new data_ttypes.TObject();
            elem2500.read(input);
            this.values.push(elem2500);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_findKeyOperatorValuesTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorValuesTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.operator !== null && this.operator !== undefined) {
      output.writeFieldBegin('operator', Thrift.Type.I32, 2);
      output.writeI32(this.operator);
      output.writeFieldEnd();
    }
    if (this.values !== null && this.values !== undefined) {
      output.writeFieldBegin('values', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
      for (var iter2501 in this.values)
      {
        if (this.values.hasOwnProperty(iter2501))
        {
          iter2501 = this.values[iter2501];
          iter2501.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_findKeyOperatorValuesTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyList(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_findKeyOperatorValuesTime_result.prototype = {};
ConcourseService_findKeyOperatorValuesTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.SET) {
          var _size2502 = 0;
          var _rtmp32506;
          this.success = [];
          var _etype2505 = 0;
          _rtmp32506 = input.readSetBegin();
          _etype2505 = _rtmp32506.etype;
          _size2502 = _rtmp32506.size;
          for (var _i2507 = 0; _i2507 < _size2502; ++_i2507)
          {
            var elem2508 = null;
            elem2508 = input.readI64();
            this.success.push(elem2508);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_findKeyOperatorValuesTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorValuesTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.I64, this.success.length);
      for (var iter2509 in this.success)
      {
        if (this.success.hasOwnProperty(iter2509))
        {
          iter2509 = this.success[iter2509];
          output.writeI64(iter2509);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_findKeyOperatorValuesTimestr_args = function(args) {
    this.key = null;
    this.operator = null;
    this.values = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.operator !== undefined && args.operator !== null) {
            this.operator = args.operator;
        }
        if (args.values !== undefined && args.values !== null) {
            this.values = Thrift.copyList(args.values, [data_ttypes.TObject]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_findKeyOperatorValuesTimestr_args.prototype = {};
ConcourseService_findKeyOperatorValuesTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.operator = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size2510 = 0;
          var _rtmp32514;
          this.values = [];
          var _etype2513 = 0;
          _rtmp32514 = input.readListBegin();
          _etype2513 = _rtmp32514.etype;
          _size2510 = _rtmp32514.size;
          for (var _i2515 = 0; _i2515 < _size2510; ++_i2515)
          {
            var elem2516 = null;
            elem2516 = new data_ttypes.TObject();
            elem2516.read(input);
            this.values.push(elem2516);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_findKeyOperatorValuesTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorValuesTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.operator !== null && this.operator !== undefined) {
      output.writeFieldBegin('operator', Thrift.Type.I32, 2);
      output.writeI32(this.operator);
      output.writeFieldEnd();
    }
    if (this.values !== null && this.values !== undefined) {
      output.writeFieldBegin('values', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
      for (var iter2517 in this.values)
      {
        if (this.values.hasOwnProperty(iter2517))
        {
          iter2517 = this.values[iter2517];
          iter2517.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 4);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_findKeyOperatorValuesTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyList(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_findKeyOperatorValuesTimestr_result.prototype = {};
ConcourseService_findKeyOperatorValuesTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.SET) {
          var _size2518 = 0;
          var _rtmp32522;
          this.success = [];
          var _etype2521 = 0;
          _rtmp32522 = input.readSetBegin();
          _etype2521 = _rtmp32522.etype;
          _size2518 = _rtmp32522.size;
          for (var _i2523 = 0; _i2523 < _size2518; ++_i2523)
          {
            var elem2524 = null;
            elem2524 = input.readI64();
            this.success.push(elem2524);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_findKeyOperatorValuesTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorValuesTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.I64, this.success.length);
      for (var iter2525 in this.success)
      {
        if (this.success.hasOwnProperty(iter2525))
        {
          iter2525 = this.success[iter2525];
          output.writeI64(iter2525);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_findKeyOperatorstrValues_args = function(args) {
    this.key = null;
    this.operator = null;
    this.values = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.operator !== undefined && args.operator !== null) {
            this.operator = args.operator;
        }
        if (args.values !== undefined && args.values !== null) {
            this.values = Thrift.copyList(args.values, [data_ttypes.TObject]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_findKeyOperatorstrValues_args.prototype = {};
ConcourseService_findKeyOperatorstrValues_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.operator = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size2526 = 0;
          var _rtmp32530;
          this.values = [];
          var _etype2529 = 0;
          _rtmp32530 = input.readListBegin();
          _etype2529 = _rtmp32530.etype;
          _size2526 = _rtmp32530.size;
          for (var _i2531 = 0; _i2531 < _size2526; ++_i2531)
          {
            var elem2532 = null;
            elem2532 = new data_ttypes.TObject();
            elem2532.read(input);
            this.values.push(elem2532);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_findKeyOperatorstrValues_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorstrValues_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.operator !== null && this.operator !== undefined) {
      output.writeFieldBegin('operator', Thrift.Type.STRING, 2);
      output.writeString(this.operator);
      output.writeFieldEnd();
    }
    if (this.values !== null && this.values !== undefined) {
      output.writeFieldBegin('values', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
      for (var iter2533 in this.values)
      {
        if (this.values.hasOwnProperty(iter2533))
        {
          iter2533 = this.values[iter2533];
          iter2533.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_findKeyOperatorstrValues_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyList(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_findKeyOperatorstrValues_result.prototype = {};
ConcourseService_findKeyOperatorstrValues_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.SET) {
          var _size2534 = 0;
          var _rtmp32538;
          this.success = [];
          var _etype2537 = 0;
          _rtmp32538 = input.readSetBegin();
          _etype2537 = _rtmp32538.etype;
          _size2534 = _rtmp32538.size;
          for (var _i2539 = 0; _i2539 < _size2534; ++_i2539)
          {
            var elem2540 = null;
            elem2540 = input.readI64();
            this.success.push(elem2540);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_findKeyOperatorstrValues_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorstrValues_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.I64, this.success.length);
      for (var iter2541 in this.success)
      {
        if (this.success.hasOwnProperty(iter2541))
        {
          iter2541 = this.success[iter2541];
          output.writeI64(iter2541);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_findKeyOperatorstrValuesTime_args = function(args) {
    this.key = null;
    this.operator = null;
    this.values = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.operator !== undefined && args.operator !== null) {
            this.operator = args.operator;
        }
        if (args.values !== undefined && args.values !== null) {
            this.values = Thrift.copyList(args.values, [data_ttypes.TObject]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_findKeyOperatorstrValuesTime_args.prototype = {};
ConcourseService_findKeyOperatorstrValuesTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.operator = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size2542 = 0;
          var _rtmp32546;
          this.values = [];
          var _etype2545 = 0;
          _rtmp32546 = input.readListBegin();
          _etype2545 = _rtmp32546.etype;
          _size2542 = _rtmp32546.size;
          for (var _i2547 = 0; _i2547 < _size2542; ++_i2547)
          {
            var elem2548 = null;
            elem2548 = new data_ttypes.TObject();
            elem2548.read(input);
            this.values.push(elem2548);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_findKeyOperatorstrValuesTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorstrValuesTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.operator !== null && this.operator !== undefined) {
      output.writeFieldBegin('operator', Thrift.Type.STRING, 2);
      output.writeString(this.operator);
      output.writeFieldEnd();
    }
    if (this.values !== null && this.values !== undefined) {
      output.writeFieldBegin('values', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
      for (var iter2549 in this.values)
      {
        if (this.values.hasOwnProperty(iter2549))
        {
          iter2549 = this.values[iter2549];
          iter2549.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_findKeyOperatorstrValuesTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyList(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_findKeyOperatorstrValuesTime_result.prototype = {};
ConcourseService_findKeyOperatorstrValuesTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.SET) {
          var _size2550 = 0;
          var _rtmp32554;
          this.success = [];
          var _etype2553 = 0;
          _rtmp32554 = input.readSetBegin();
          _etype2553 = _rtmp32554.etype;
          _size2550 = _rtmp32554.size;
          for (var _i2555 = 0; _i2555 < _size2550; ++_i2555)
          {
            var elem2556 = null;
            elem2556 = input.readI64();
            this.success.push(elem2556);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_findKeyOperatorstrValuesTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorstrValuesTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.I64, this.success.length);
      for (var iter2557 in this.success)
      {
        if (this.success.hasOwnProperty(iter2557))
        {
          iter2557 = this.success[iter2557];
          output.writeI64(iter2557);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_findKeyOperatorstrValuesTimestr_args = function(args) {
    this.key = null;
    this.operator = null;
    this.values = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.operator !== undefined && args.operator !== null) {
            this.operator = args.operator;
        }
        if (args.values !== undefined && args.values !== null) {
            this.values = Thrift.copyList(args.values, [data_ttypes.TObject]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_findKeyOperatorstrValuesTimestr_args.prototype = {};
ConcourseService_findKeyOperatorstrValuesTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.operator = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size2558 = 0;
          var _rtmp32562;
          this.values = [];
          var _etype2561 = 0;
          _rtmp32562 = input.readListBegin();
          _etype2561 = _rtmp32562.etype;
          _size2558 = _rtmp32562.size;
          for (var _i2563 = 0; _i2563 < _size2558; ++_i2563)
          {
            var elem2564 = null;
            elem2564 = new data_ttypes.TObject();
            elem2564.read(input);
            this.values.push(elem2564);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_findKeyOperatorstrValuesTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorstrValuesTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.operator !== null && this.operator !== undefined) {
      output.writeFieldBegin('operator', Thrift.Type.STRING, 2);
      output.writeString(this.operator);
      output.writeFieldEnd();
    }
    if (this.values !== null && this.values !== undefined) {
      output.writeFieldBegin('values', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
      for (var iter2565 in this.values)
      {
        if (this.values.hasOwnProperty(iter2565))
        {
          iter2565 = this.values[iter2565];
          iter2565.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 4);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_findKeyOperatorstrValuesTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyList(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_findKeyOperatorstrValuesTimestr_result.prototype = {};
ConcourseService_findKeyOperatorstrValuesTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.SET) {
          var _size2566 = 0;
          var _rtmp32570;
          this.success = [];
          var _etype2569 = 0;
          _rtmp32570 = input.readSetBegin();
          _etype2569 = _rtmp32570.etype;
          _size2566 = _rtmp32570.size;
          for (var _i2571 = 0; _i2571 < _size2566; ++_i2571)
          {
            var elem2572 = null;
            elem2572 = input.readI64();
            this.success.push(elem2572);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_findKeyOperatorstrValuesTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_findKeyOperatorstrValuesTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.I64, this.success.length);
      for (var iter2573 in this.success)
      {
        if (this.success.hasOwnProperty(iter2573))
        {
          iter2573 = this.success[iter2573];
          output.writeI64(iter2573);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_search_args = function(args) {
    this.key = null;
    this.query = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.query !== undefined && args.query !== null) {
            this.query = args.query;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_search_args.prototype = {};
ConcourseService_search_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.query = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_search_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_search_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.query !== null && this.query !== undefined) {
      output.writeFieldBegin('query', Thrift.Type.STRING, 2);
      output.writeString(this.query);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_search_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyList(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_search_result.prototype = {};
ConcourseService_search_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.SET) {
          var _size2574 = 0;
          var _rtmp32578;
          this.success = [];
          var _etype2577 = 0;
          _rtmp32578 = input.readSetBegin();
          _etype2577 = _rtmp32578.etype;
          _size2574 = _rtmp32578.size;
          for (var _i2579 = 0; _i2579 < _size2574; ++_i2579)
          {
            var elem2580 = null;
            elem2580 = input.readI64();
            this.success.push(elem2580);
          }
          input.readSetEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_search_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_search_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.SET, 0);
      output.writeSetBegin(Thrift.Type.I64, this.success.length);
      for (var iter2581 in this.success)
      {
        if (this.success.hasOwnProperty(iter2581))
        {
          iter2581 = this.success[iter2581];
          output.writeI64(iter2581);
        }
      }
      output.writeSetEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_revertKeysRecordsTime_args = function(args) {
    this.keys = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_revertKeysRecordsTime_args.prototype = {};
ConcourseService_revertKeysRecordsTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size2582 = 0;
          var _rtmp32586;
          this.keys = [];
          var _etype2585 = 0;
          _rtmp32586 = input.readListBegin();
          _etype2585 = _rtmp32586.etype;
          _size2582 = _rtmp32586.size;
          for (var _i2587 = 0; _i2587 < _size2582; ++_i2587)
          {
            var elem2588 = null;
            elem2588 = input.readString();
            this.keys.push(elem2588);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size2589 = 0;
          var _rtmp32593;
          this.records = [];
          var _etype2592 = 0;
          _rtmp32593 = input.readListBegin();
          _etype2592 = _rtmp32593.etype;
          _size2589 = _rtmp32593.size;
          for (var _i2594 = 0; _i2594 < _size2589; ++_i2594)
          {
            var elem2595 = null;
            elem2595 = input.readI64();
            this.records.push(elem2595);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_revertKeysRecordsTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_revertKeysRecordsTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter2596 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter2596))
        {
          iter2596 = this.keys[iter2596];
          output.writeString(iter2596);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2597 in this.records)
      {
        if (this.records.hasOwnProperty(iter2597))
        {
          iter2597 = this.records[iter2597];
          output.writeI64(iter2597);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_revertKeysRecordsTime_result = function(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_revertKeysRecordsTime_result.prototype = {};
ConcourseService_revertKeysRecordsTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_revertKeysRecordsTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_revertKeysRecordsTime_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_revertKeysRecordsTimestr_args = function(args) {
    this.keys = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_revertKeysRecordsTimestr_args.prototype = {};
ConcourseService_revertKeysRecordsTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size2598 = 0;
          var _rtmp32602;
          this.keys = [];
          var _etype2601 = 0;
          _rtmp32602 = input.readListBegin();
          _etype2601 = _rtmp32602.etype;
          _size2598 = _rtmp32602.size;
          for (var _i2603 = 0; _i2603 < _size2598; ++_i2603)
          {
            var elem2604 = null;
            elem2604 = input.readString();
            this.keys.push(elem2604);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size2605 = 0;
          var _rtmp32609;
          this.records = [];
          var _etype2608 = 0;
          _rtmp32609 = input.readListBegin();
          _etype2608 = _rtmp32609.etype;
          _size2605 = _rtmp32609.size;
          for (var _i2610 = 0; _i2610 < _size2605; ++_i2610)
          {
            var elem2611 = null;
            elem2611 = input.readI64();
            this.records.push(elem2611);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_revertKeysRecordsTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_revertKeysRecordsTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter2612 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter2612))
        {
          iter2612 = this.keys[iter2612];
          output.writeString(iter2612);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2613 in this.records)
      {
        if (this.records.hasOwnProperty(iter2613))
        {
          iter2613 = this.records[iter2613];
          output.writeI64(iter2613);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_revertKeysRecordsTimestr_result = function(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_revertKeysRecordsTimestr_result.prototype = {};
ConcourseService_revertKeysRecordsTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_revertKeysRecordsTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_revertKeysRecordsTimestr_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_revertKeysRecordTime_args = function(args) {
    this.keys = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_revertKeysRecordTime_args.prototype = {};
ConcourseService_revertKeysRecordTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size2614 = 0;
          var _rtmp32618;
          this.keys = [];
          var _etype2617 = 0;
          _rtmp32618 = input.readListBegin();
          _etype2617 = _rtmp32618.etype;
          _size2614 = _rtmp32618.size;
          for (var _i2619 = 0; _i2619 < _size2614; ++_i2619)
          {
            var elem2620 = null;
            elem2620 = input.readString();
            this.keys.push(elem2620);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_revertKeysRecordTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_revertKeysRecordTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter2621 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter2621))
        {
          iter2621 = this.keys[iter2621];
          output.writeString(iter2621);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_revertKeysRecordTime_result = function(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_revertKeysRecordTime_result.prototype = {};
ConcourseService_revertKeysRecordTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_revertKeysRecordTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_revertKeysRecordTime_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_revertKeysRecordTimestr_args = function(args) {
    this.keys = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_revertKeysRecordTimestr_args.prototype = {};
ConcourseService_revertKeysRecordTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size2622 = 0;
          var _rtmp32626;
          this.keys = [];
          var _etype2625 = 0;
          _rtmp32626 = input.readListBegin();
          _etype2625 = _rtmp32626.etype;
          _size2622 = _rtmp32626.size;
          for (var _i2627 = 0; _i2627 < _size2622; ++_i2627)
          {
            var elem2628 = null;
            elem2628 = input.readString();
            this.keys.push(elem2628);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_revertKeysRecordTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_revertKeysRecordTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter2629 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter2629))
        {
          iter2629 = this.keys[iter2629];
          output.writeString(iter2629);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_revertKeysRecordTimestr_result = function(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_revertKeysRecordTimestr_result.prototype = {};
ConcourseService_revertKeysRecordTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_revertKeysRecordTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_revertKeysRecordTimestr_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_revertKeyRecordsTime_args = function(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_revertKeyRecordsTime_args.prototype = {};
ConcourseService_revertKeyRecordsTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size2630 = 0;
          var _rtmp32634;
          this.records = [];
          var _etype2633 = 0;
          _rtmp32634 = input.readListBegin();
          _etype2633 = _rtmp32634.etype;
          _size2630 = _rtmp32634.size;
          for (var _i2635 = 0; _i2635 < _size2630; ++_i2635)
          {
            var elem2636 = null;
            elem2636 = input.readI64();
            this.records.push(elem2636);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_revertKeyRecordsTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_revertKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2637 in this.records)
      {
        if (this.records.hasOwnProperty(iter2637))
        {
          iter2637 = this.records[iter2637];
          output.writeI64(iter2637);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_revertKeyRecordsTime_result = function(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_revertKeyRecordsTime_result.prototype = {};
ConcourseService_revertKeyRecordsTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_revertKeyRecordsTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_revertKeyRecordsTime_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_revertKeyRecordsTimestr_args = function(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_revertKeyRecordsTimestr_args.prototype = {};
ConcourseService_revertKeyRecordsTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size2638 = 0;
          var _rtmp32642;
          this.records = [];
          var _etype2641 = 0;
          _rtmp32642 = input.readListBegin();
          _etype2641 = _rtmp32642.etype;
          _size2638 = _rtmp32642.size;
          for (var _i2643 = 0; _i2643 < _size2638; ++_i2643)
          {
            var elem2644 = null;
            elem2644 = input.readI64();
            this.records.push(elem2644);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_revertKeyRecordsTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_revertKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2645 in this.records)
      {
        if (this.records.hasOwnProperty(iter2645))
        {
          iter2645 = this.records[iter2645];
          output.writeI64(iter2645);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_revertKeyRecordsTimestr_result = function(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_revertKeyRecordsTimestr_result.prototype = {};
ConcourseService_revertKeyRecordsTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_revertKeyRecordsTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_revertKeyRecordsTimestr_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_revertKeyRecordTime_args = function(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_revertKeyRecordTime_args.prototype = {};
ConcourseService_revertKeyRecordTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_revertKeyRecordTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_revertKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_revertKeyRecordTime_result = function(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_revertKeyRecordTime_result.prototype = {};
ConcourseService_revertKeyRecordTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_revertKeyRecordTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_revertKeyRecordTime_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_revertKeyRecordTimestr_args = function(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_revertKeyRecordTimestr_args.prototype = {};
ConcourseService_revertKeyRecordTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_revertKeyRecordTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_revertKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_revertKeyRecordTimestr_result = function(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_revertKeyRecordTimestr_result.prototype = {};
ConcourseService_revertKeyRecordTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_revertKeyRecordTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_revertKeyRecordTimestr_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_pingRecords_args = function(args) {
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_pingRecords_args.prototype = {};
ConcourseService_pingRecords_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size2646 = 0;
          var _rtmp32650;
          this.records = [];
          var _etype2649 = 0;
          _rtmp32650 = input.readListBegin();
          _etype2649 = _rtmp32650.etype;
          _size2646 = _rtmp32650.size;
          for (var _i2651 = 0; _i2651 < _size2646; ++_i2651)
          {
            var elem2652 = null;
            elem2652 = input.readI64();
            this.records.push(elem2652);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_pingRecords_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_pingRecords_args');
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2653 in this.records)
      {
        if (this.records.hasOwnProperty(iter2653))
        {
          iter2653 = this.records[iter2653];
          output.writeI64(iter2653);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_pingRecords_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [null]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_pingRecords_result.prototype = {};
ConcourseService_pingRecords_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2654 = 0;
          var _rtmp32658;
          this.success = {};
          var _ktype2655 = 0;
          var _vtype2656 = 0;
          _rtmp32658 = input.readMapBegin();
          _ktype2655 = _rtmp32658.ktype;
          _vtype2656 = _rtmp32658.vtype;
          _size2654 = _rtmp32658.size;
          for (var _i2659 = 0; _i2659 < _size2654; ++_i2659)
          {
            var key2660 = null;
            var val2661 = null;
            key2660 = input.readI64();
            val2661 = input.readBool();
            this.success[key2660] = val2661;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_pingRecords_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_pingRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.BOOL, Thrift.objectLength(this.success));
      for (var kiter2662 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2662))
        {
          var viter2663 = this.success[kiter2662];
          output.writeI64(kiter2662);
          output.writeBool(viter2663);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_pingRecord_args = function(args) {
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_pingRecord_args.prototype = {};
ConcourseService_pingRecord_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_pingRecord_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_pingRecord_args');
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 1);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_pingRecord_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_pingRecord_result.prototype = {};
ConcourseService_pingRecord_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_pingRecord_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_pingRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_verifyAndSwap_args = function(args) {
    this.key = null;
    this.expected = null;
    this.record = null;
    this.replacement = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.expected !== undefined && args.expected !== null) {
            this.expected = new data_ttypes.TObject(args.expected);
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.replacement !== undefined && args.replacement !== null) {
            this.replacement = new data_ttypes.TObject(args.replacement);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_verifyAndSwap_args.prototype = {};
ConcourseService_verifyAndSwap_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.expected = new data_ttypes.TObject();
          this.expected.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.replacement = new data_ttypes.TObject();
          this.replacement.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_verifyAndSwap_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_verifyAndSwap_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.expected !== null && this.expected !== undefined) {
      output.writeFieldBegin('expected', Thrift.Type.STRUCT, 2);
      this.expected.write(output);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 3);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.replacement !== null && this.replacement !== undefined) {
      output.writeFieldBegin('replacement', Thrift.Type.STRUCT, 4);
      this.replacement.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 5);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 6);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 7);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_verifyAndSwap_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_verifyAndSwap_result.prototype = {};
ConcourseService_verifyAndSwap_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_verifyAndSwap_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_verifyAndSwap_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_verifyOrSet_args = function(args) {
    this.key = null;
    this.value = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.value !== undefined && args.value !== null) {
            this.value = new data_ttypes.TObject(args.value);
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_verifyOrSet_args.prototype = {};
ConcourseService_verifyOrSet_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_verifyOrSet_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_verifyOrSet_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 3);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_verifyOrSet_result = function(args) {
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_verifyOrSet_result.prototype = {};
ConcourseService_verifyOrSet_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.InvalidArgumentException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_verifyOrSet_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_verifyOrSet_result');
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_findOrAddKeyValue_args = function(args) {
    this.key = null;
    this.value = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.value !== undefined && args.value !== null) {
            this.value = new data_ttypes.TObject(args.value);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_findOrAddKeyValue_args.prototype = {};
ConcourseService_findOrAddKeyValue_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.value = new data_ttypes.TObject();
          this.value.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_findOrAddKeyValue_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_findOrAddKeyValue_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
      this.value.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_findOrAddKeyValue_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    this.ex5 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.DuplicateEntryException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.InvalidArgumentException) {
        this.ex4 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex5 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
        if (args.ex5 !== undefined && args.ex5 !== null) {
            this.ex5 = args.ex5;
        }
    }
};
ConcourseService_findOrAddKeyValue_result.prototype = {};
ConcourseService_findOrAddKeyValue_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.DuplicateEntryException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.InvalidArgumentException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex5 = new exceptions_ttypes.PermissionException();
          this.ex5.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_findOrAddKeyValue_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_findOrAddKeyValue_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    if (this.ex5 !== null && this.ex5 !== undefined) {
      output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
      this.ex5.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_findOrInsertCriteriaJson_args = function(args) {
    this.criteria = null;
    this.json = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.json !== undefined && args.json !== null) {
            this.json = args.json;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_findOrInsertCriteriaJson_args.prototype = {};
ConcourseService_findOrInsertCriteriaJson_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.json = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_findOrInsertCriteriaJson_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_findOrInsertCriteriaJson_args');
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 1);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.json !== null && this.json !== undefined) {
      output.writeFieldBegin('json', Thrift.Type.STRING, 2);
      output.writeString(this.json);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_findOrInsertCriteriaJson_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.DuplicateEntryException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_findOrInsertCriteriaJson_result.prototype = {};
ConcourseService_findOrInsertCriteriaJson_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.DuplicateEntryException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_findOrInsertCriteriaJson_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_findOrInsertCriteriaJson_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_findOrInsertCclJson_args = function(args) {
    this.ccl = null;
    this.json = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.json !== undefined && args.json !== null) {
            this.json = args.json;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_findOrInsertCclJson_args.prototype = {};
ConcourseService_findOrInsertCclJson_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.json = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_findOrInsertCclJson_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_findOrInsertCclJson_args');
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 1);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.json !== null && this.json !== undefined) {
      output.writeFieldBegin('json', Thrift.Type.STRING, 2);
      output.writeString(this.json);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_findOrInsertCclJson_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    this.ex5 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.DuplicateEntryException) {
        this.ex4 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex5 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
        if (args.ex5 !== undefined && args.ex5 !== null) {
            this.ex5 = args.ex5;
        }
    }
};
ConcourseService_findOrInsertCclJson_result.prototype = {};
ConcourseService_findOrInsertCclJson_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.DuplicateEntryException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex5 = new exceptions_ttypes.PermissionException();
          this.ex5.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_findOrInsertCclJson_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_findOrInsertCclJson_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    if (this.ex5 !== null && this.ex5 !== undefined) {
      output.writeFieldBegin('ex5', Thrift.Type.STRUCT, 5);
      this.ex5.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyRecord_args = function(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_sumKeyRecord_args.prototype = {};
ConcourseService_sumKeyRecord_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyRecord_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyRecord_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_sumKeyRecord_result.prototype = {};
ConcourseService_sumKeyRecord_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyRecord_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyRecordTime_args = function(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_sumKeyRecordTime_args.prototype = {};
ConcourseService_sumKeyRecordTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyRecordTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyRecordTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_sumKeyRecordTime_result.prototype = {};
ConcourseService_sumKeyRecordTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyRecordTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyRecordTimestr_args = function(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_sumKeyRecordTimestr_args.prototype = {};
ConcourseService_sumKeyRecordTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyRecordTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyRecordTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_sumKeyRecordTimestr_result.prototype = {};
ConcourseService_sumKeyRecordTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyRecordTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyRecords_args = function(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_sumKeyRecords_args.prototype = {};
ConcourseService_sumKeyRecords_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size2664 = 0;
          var _rtmp32668;
          this.records = [];
          var _etype2667 = 0;
          _rtmp32668 = input.readListBegin();
          _etype2667 = _rtmp32668.etype;
          _size2664 = _rtmp32668.size;
          for (var _i2669 = 0; _i2669 < _size2664; ++_i2669)
          {
            var elem2670 = null;
            elem2670 = input.readI64();
            this.records.push(elem2670);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyRecords_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2671 in this.records)
      {
        if (this.records.hasOwnProperty(iter2671))
        {
          iter2671 = this.records[iter2671];
          output.writeI64(iter2671);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyRecords_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_sumKeyRecords_result.prototype = {};
ConcourseService_sumKeyRecords_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyRecords_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyRecordsTime_args = function(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_sumKeyRecordsTime_args.prototype = {};
ConcourseService_sumKeyRecordsTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size2672 = 0;
          var _rtmp32676;
          this.records = [];
          var _etype2675 = 0;
          _rtmp32676 = input.readListBegin();
          _etype2675 = _rtmp32676.etype;
          _size2672 = _rtmp32676.size;
          for (var _i2677 = 0; _i2677 < _size2672; ++_i2677)
          {
            var elem2678 = null;
            elem2678 = input.readI64();
            this.records.push(elem2678);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyRecordsTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2679 in this.records)
      {
        if (this.records.hasOwnProperty(iter2679))
        {
          iter2679 = this.records[iter2679];
          output.writeI64(iter2679);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyRecordsTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_sumKeyRecordsTime_result.prototype = {};
ConcourseService_sumKeyRecordsTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyRecordsTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyRecordsTimestr_args = function(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_sumKeyRecordsTimestr_args.prototype = {};
ConcourseService_sumKeyRecordsTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size2680 = 0;
          var _rtmp32684;
          this.records = [];
          var _etype2683 = 0;
          _rtmp32684 = input.readListBegin();
          _etype2683 = _rtmp32684.etype;
          _size2680 = _rtmp32684.size;
          for (var _i2685 = 0; _i2685 < _size2680; ++_i2685)
          {
            var elem2686 = null;
            elem2686 = input.readI64();
            this.records.push(elem2686);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyRecordsTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2687 in this.records)
      {
        if (this.records.hasOwnProperty(iter2687))
        {
          iter2687 = this.records[iter2687];
          output.writeI64(iter2687);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyRecordsTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_sumKeyRecordsTimestr_result.prototype = {};
ConcourseService_sumKeyRecordsTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyRecordsTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKey_args = function(args) {
    this.key = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_sumKey_args.prototype = {};
ConcourseService_sumKey_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKey_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKey_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKey_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_sumKey_result.prototype = {};
ConcourseService_sumKey_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKey_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKey_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyTime_args = function(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_sumKeyTime_args.prototype = {};
ConcourseService_sumKeyTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_sumKeyTime_result.prototype = {};
ConcourseService_sumKeyTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyTimestr_args = function(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_sumKeyTimestr_args.prototype = {};
ConcourseService_sumKeyTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_sumKeyTimestr_result.prototype = {};
ConcourseService_sumKeyTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyCriteria_args = function(args) {
    this.key = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_sumKeyCriteria_args.prototype = {};
ConcourseService_sumKeyCriteria_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyCriteria_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyCriteria_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyCriteria_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_sumKeyCriteria_result.prototype = {};
ConcourseService_sumKeyCriteria_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyCriteria_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyCriteriaTime_args = function(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_sumKeyCriteriaTime_args.prototype = {};
ConcourseService_sumKeyCriteriaTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyCriteriaTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyCriteriaTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyCriteriaTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_sumKeyCriteriaTime_result.prototype = {};
ConcourseService_sumKeyCriteriaTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyCriteriaTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyCriteriaTimestr_args = function(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_sumKeyCriteriaTimestr_args.prototype = {};
ConcourseService_sumKeyCriteriaTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyCriteriaTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyCriteriaTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyCriteriaTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_sumKeyCriteriaTimestr_result.prototype = {};
ConcourseService_sumKeyCriteriaTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyCriteriaTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyCcl_args = function(args) {
    this.key = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_sumKeyCcl_args.prototype = {};
ConcourseService_sumKeyCcl_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyCcl_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyCcl_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyCcl_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_sumKeyCcl_result.prototype = {};
ConcourseService_sumKeyCcl_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyCcl_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyCclTime_args = function(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_sumKeyCclTime_args.prototype = {};
ConcourseService_sumKeyCclTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyCclTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyCclTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyCclTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_sumKeyCclTime_result.prototype = {};
ConcourseService_sumKeyCclTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyCclTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyCclTimestr_args = function(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_sumKeyCclTimestr_args.prototype = {};
ConcourseService_sumKeyCclTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyCclTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyCclTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_sumKeyCclTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_sumKeyCclTimestr_result.prototype = {};
ConcourseService_sumKeyCclTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_sumKeyCclTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_sumKeyCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyRecord_args = function(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_averageKeyRecord_args.prototype = {};
ConcourseService_averageKeyRecord_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyRecord_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyRecord_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_averageKeyRecord_result.prototype = {};
ConcourseService_averageKeyRecord_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyRecord_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyRecordTime_args = function(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_averageKeyRecordTime_args.prototype = {};
ConcourseService_averageKeyRecordTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyRecordTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyRecordTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_averageKeyRecordTime_result.prototype = {};
ConcourseService_averageKeyRecordTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyRecordTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyRecordTimestr_args = function(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_averageKeyRecordTimestr_args.prototype = {};
ConcourseService_averageKeyRecordTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyRecordTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyRecordTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_averageKeyRecordTimestr_result.prototype = {};
ConcourseService_averageKeyRecordTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyRecordTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyRecords_args = function(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_averageKeyRecords_args.prototype = {};
ConcourseService_averageKeyRecords_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size2688 = 0;
          var _rtmp32692;
          this.records = [];
          var _etype2691 = 0;
          _rtmp32692 = input.readListBegin();
          _etype2691 = _rtmp32692.etype;
          _size2688 = _rtmp32692.size;
          for (var _i2693 = 0; _i2693 < _size2688; ++_i2693)
          {
            var elem2694 = null;
            elem2694 = input.readI64();
            this.records.push(elem2694);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyRecords_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2695 in this.records)
      {
        if (this.records.hasOwnProperty(iter2695))
        {
          iter2695 = this.records[iter2695];
          output.writeI64(iter2695);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyRecords_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_averageKeyRecords_result.prototype = {};
ConcourseService_averageKeyRecords_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyRecords_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyRecordsTime_args = function(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_averageKeyRecordsTime_args.prototype = {};
ConcourseService_averageKeyRecordsTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size2696 = 0;
          var _rtmp32700;
          this.records = [];
          var _etype2699 = 0;
          _rtmp32700 = input.readListBegin();
          _etype2699 = _rtmp32700.etype;
          _size2696 = _rtmp32700.size;
          for (var _i2701 = 0; _i2701 < _size2696; ++_i2701)
          {
            var elem2702 = null;
            elem2702 = input.readI64();
            this.records.push(elem2702);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyRecordsTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2703 in this.records)
      {
        if (this.records.hasOwnProperty(iter2703))
        {
          iter2703 = this.records[iter2703];
          output.writeI64(iter2703);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyRecordsTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_averageKeyRecordsTime_result.prototype = {};
ConcourseService_averageKeyRecordsTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyRecordsTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyRecordsTimestr_args = function(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_averageKeyRecordsTimestr_args.prototype = {};
ConcourseService_averageKeyRecordsTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size2704 = 0;
          var _rtmp32708;
          this.records = [];
          var _etype2707 = 0;
          _rtmp32708 = input.readListBegin();
          _etype2707 = _rtmp32708.etype;
          _size2704 = _rtmp32708.size;
          for (var _i2709 = 0; _i2709 < _size2704; ++_i2709)
          {
            var elem2710 = null;
            elem2710 = input.readI64();
            this.records.push(elem2710);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyRecordsTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2711 in this.records)
      {
        if (this.records.hasOwnProperty(iter2711))
        {
          iter2711 = this.records[iter2711];
          output.writeI64(iter2711);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyRecordsTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_averageKeyRecordsTimestr_result.prototype = {};
ConcourseService_averageKeyRecordsTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyRecordsTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKey_args = function(args) {
    this.key = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_averageKey_args.prototype = {};
ConcourseService_averageKey_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKey_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKey_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKey_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_averageKey_result.prototype = {};
ConcourseService_averageKey_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKey_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKey_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyTime_args = function(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_averageKeyTime_args.prototype = {};
ConcourseService_averageKeyTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_averageKeyTime_result.prototype = {};
ConcourseService_averageKeyTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyTimestr_args = function(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_averageKeyTimestr_args.prototype = {};
ConcourseService_averageKeyTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_averageKeyTimestr_result.prototype = {};
ConcourseService_averageKeyTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyCriteria_args = function(args) {
    this.key = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_averageKeyCriteria_args.prototype = {};
ConcourseService_averageKeyCriteria_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyCriteria_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyCriteria_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyCriteria_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_averageKeyCriteria_result.prototype = {};
ConcourseService_averageKeyCriteria_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyCriteria_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyCriteriaTime_args = function(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_averageKeyCriteriaTime_args.prototype = {};
ConcourseService_averageKeyCriteriaTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyCriteriaTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyCriteriaTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyCriteriaTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_averageKeyCriteriaTime_result.prototype = {};
ConcourseService_averageKeyCriteriaTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyCriteriaTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyCriteriaTimestr_args = function(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_averageKeyCriteriaTimestr_args.prototype = {};
ConcourseService_averageKeyCriteriaTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyCriteriaTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyCriteriaTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyCriteriaTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_averageKeyCriteriaTimestr_result.prototype = {};
ConcourseService_averageKeyCriteriaTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyCriteriaTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyCcl_args = function(args) {
    this.key = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_averageKeyCcl_args.prototype = {};
ConcourseService_averageKeyCcl_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyCcl_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyCcl_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyCcl_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_averageKeyCcl_result.prototype = {};
ConcourseService_averageKeyCcl_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyCcl_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyCclTime_args = function(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_averageKeyCclTime_args.prototype = {};
ConcourseService_averageKeyCclTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyCclTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyCclTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyCclTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_averageKeyCclTime_result.prototype = {};
ConcourseService_averageKeyCclTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyCclTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyCclTimestr_args = function(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_averageKeyCclTimestr_args.prototype = {};
ConcourseService_averageKeyCclTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyCclTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyCclTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_averageKeyCclTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_averageKeyCclTimestr_result.prototype = {};
ConcourseService_averageKeyCclTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_averageKeyCclTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_averageKeyCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyRecord_args = function(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_countKeyRecord_args.prototype = {};
ConcourseService_countKeyRecord_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyRecord_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyRecord_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_countKeyRecord_result.prototype = {};
ConcourseService_countKeyRecord_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyRecord_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyRecordTime_args = function(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_countKeyRecordTime_args.prototype = {};
ConcourseService_countKeyRecordTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyRecordTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyRecordTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_countKeyRecordTime_result.prototype = {};
ConcourseService_countKeyRecordTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyRecordTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyRecordTimestr_args = function(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_countKeyRecordTimestr_args.prototype = {};
ConcourseService_countKeyRecordTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyRecordTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyRecordTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_countKeyRecordTimestr_result.prototype = {};
ConcourseService_countKeyRecordTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyRecordTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyRecords_args = function(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_countKeyRecords_args.prototype = {};
ConcourseService_countKeyRecords_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size2712 = 0;
          var _rtmp32716;
          this.records = [];
          var _etype2715 = 0;
          _rtmp32716 = input.readListBegin();
          _etype2715 = _rtmp32716.etype;
          _size2712 = _rtmp32716.size;
          for (var _i2717 = 0; _i2717 < _size2712; ++_i2717)
          {
            var elem2718 = null;
            elem2718 = input.readI64();
            this.records.push(elem2718);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyRecords_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2719 in this.records)
      {
        if (this.records.hasOwnProperty(iter2719))
        {
          iter2719 = this.records[iter2719];
          output.writeI64(iter2719);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyRecords_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_countKeyRecords_result.prototype = {};
ConcourseService_countKeyRecords_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyRecords_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyRecordsTime_args = function(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_countKeyRecordsTime_args.prototype = {};
ConcourseService_countKeyRecordsTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size2720 = 0;
          var _rtmp32724;
          this.records = [];
          var _etype2723 = 0;
          _rtmp32724 = input.readListBegin();
          _etype2723 = _rtmp32724.etype;
          _size2720 = _rtmp32724.size;
          for (var _i2725 = 0; _i2725 < _size2720; ++_i2725)
          {
            var elem2726 = null;
            elem2726 = input.readI64();
            this.records.push(elem2726);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyRecordsTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2727 in this.records)
      {
        if (this.records.hasOwnProperty(iter2727))
        {
          iter2727 = this.records[iter2727];
          output.writeI64(iter2727);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyRecordsTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_countKeyRecordsTime_result.prototype = {};
ConcourseService_countKeyRecordsTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyRecordsTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyRecordsTimestr_args = function(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_countKeyRecordsTimestr_args.prototype = {};
ConcourseService_countKeyRecordsTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size2728 = 0;
          var _rtmp32732;
          this.records = [];
          var _etype2731 = 0;
          _rtmp32732 = input.readListBegin();
          _etype2731 = _rtmp32732.etype;
          _size2728 = _rtmp32732.size;
          for (var _i2733 = 0; _i2733 < _size2728; ++_i2733)
          {
            var elem2734 = null;
            elem2734 = input.readI64();
            this.records.push(elem2734);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyRecordsTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2735 in this.records)
      {
        if (this.records.hasOwnProperty(iter2735))
        {
          iter2735 = this.records[iter2735];
          output.writeI64(iter2735);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyRecordsTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_countKeyRecordsTimestr_result.prototype = {};
ConcourseService_countKeyRecordsTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyRecordsTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKey_args = function(args) {
    this.key = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_countKey_args.prototype = {};
ConcourseService_countKey_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKey_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKey_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKey_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_countKey_result.prototype = {};
ConcourseService_countKey_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKey_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKey_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyTime_args = function(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_countKeyTime_args.prototype = {};
ConcourseService_countKeyTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_countKeyTime_result.prototype = {};
ConcourseService_countKeyTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyTimestr_args = function(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_countKeyTimestr_args.prototype = {};
ConcourseService_countKeyTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_countKeyTimestr_result.prototype = {};
ConcourseService_countKeyTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyCriteria_args = function(args) {
    this.key = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_countKeyCriteria_args.prototype = {};
ConcourseService_countKeyCriteria_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyCriteria_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyCriteria_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyCriteria_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_countKeyCriteria_result.prototype = {};
ConcourseService_countKeyCriteria_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyCriteria_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyCriteriaTime_args = function(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_countKeyCriteriaTime_args.prototype = {};
ConcourseService_countKeyCriteriaTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyCriteriaTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyCriteriaTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyCriteriaTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_countKeyCriteriaTime_result.prototype = {};
ConcourseService_countKeyCriteriaTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyCriteriaTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyCriteriaTimestr_args = function(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_countKeyCriteriaTimestr_args.prototype = {};
ConcourseService_countKeyCriteriaTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyCriteriaTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyCriteriaTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyCriteriaTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_countKeyCriteriaTimestr_result.prototype = {};
ConcourseService_countKeyCriteriaTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyCriteriaTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyCcl_args = function(args) {
    this.key = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_countKeyCcl_args.prototype = {};
ConcourseService_countKeyCcl_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyCcl_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyCcl_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyCcl_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_countKeyCcl_result.prototype = {};
ConcourseService_countKeyCcl_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyCcl_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyCclTime_args = function(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_countKeyCclTime_args.prototype = {};
ConcourseService_countKeyCclTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyCclTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyCclTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyCclTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_countKeyCclTime_result.prototype = {};
ConcourseService_countKeyCclTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyCclTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyCclTimestr_args = function(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_countKeyCclTimestr_args.prototype = {};
ConcourseService_countKeyCclTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyCclTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyCclTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_countKeyCclTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_countKeyCclTimestr_result.prototype = {};
ConcourseService_countKeyCclTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_countKeyCclTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_countKeyCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyRecord_args = function(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_maxKeyRecord_args.prototype = {};
ConcourseService_maxKeyRecord_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyRecord_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyRecord_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_maxKeyRecord_result.prototype = {};
ConcourseService_maxKeyRecord_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyRecord_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyRecordTime_args = function(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_maxKeyRecordTime_args.prototype = {};
ConcourseService_maxKeyRecordTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyRecordTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyRecordTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_maxKeyRecordTime_result.prototype = {};
ConcourseService_maxKeyRecordTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyRecordTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyRecordTimestr_args = function(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_maxKeyRecordTimestr_args.prototype = {};
ConcourseService_maxKeyRecordTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyRecordTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyRecordTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_maxKeyRecordTimestr_result.prototype = {};
ConcourseService_maxKeyRecordTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyRecordTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyRecords_args = function(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_maxKeyRecords_args.prototype = {};
ConcourseService_maxKeyRecords_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size2736 = 0;
          var _rtmp32740;
          this.records = [];
          var _etype2739 = 0;
          _rtmp32740 = input.readListBegin();
          _etype2739 = _rtmp32740.etype;
          _size2736 = _rtmp32740.size;
          for (var _i2741 = 0; _i2741 < _size2736; ++_i2741)
          {
            var elem2742 = null;
            elem2742 = input.readI64();
            this.records.push(elem2742);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyRecords_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2743 in this.records)
      {
        if (this.records.hasOwnProperty(iter2743))
        {
          iter2743 = this.records[iter2743];
          output.writeI64(iter2743);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyRecords_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_maxKeyRecords_result.prototype = {};
ConcourseService_maxKeyRecords_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyRecords_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyRecordsTime_args = function(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_maxKeyRecordsTime_args.prototype = {};
ConcourseService_maxKeyRecordsTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size2744 = 0;
          var _rtmp32748;
          this.records = [];
          var _etype2747 = 0;
          _rtmp32748 = input.readListBegin();
          _etype2747 = _rtmp32748.etype;
          _size2744 = _rtmp32748.size;
          for (var _i2749 = 0; _i2749 < _size2744; ++_i2749)
          {
            var elem2750 = null;
            elem2750 = input.readI64();
            this.records.push(elem2750);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyRecordsTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2751 in this.records)
      {
        if (this.records.hasOwnProperty(iter2751))
        {
          iter2751 = this.records[iter2751];
          output.writeI64(iter2751);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyRecordsTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_maxKeyRecordsTime_result.prototype = {};
ConcourseService_maxKeyRecordsTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyRecordsTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyRecordsTimestr_args = function(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_maxKeyRecordsTimestr_args.prototype = {};
ConcourseService_maxKeyRecordsTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size2752 = 0;
          var _rtmp32756;
          this.records = [];
          var _etype2755 = 0;
          _rtmp32756 = input.readListBegin();
          _etype2755 = _rtmp32756.etype;
          _size2752 = _rtmp32756.size;
          for (var _i2757 = 0; _i2757 < _size2752; ++_i2757)
          {
            var elem2758 = null;
            elem2758 = input.readI64();
            this.records.push(elem2758);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyRecordsTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2759 in this.records)
      {
        if (this.records.hasOwnProperty(iter2759))
        {
          iter2759 = this.records[iter2759];
          output.writeI64(iter2759);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyRecordsTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_maxKeyRecordsTimestr_result.prototype = {};
ConcourseService_maxKeyRecordsTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyRecordsTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyCriteria_args = function(args) {
    this.key = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_maxKeyCriteria_args.prototype = {};
ConcourseService_maxKeyCriteria_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyCriteria_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyCriteria_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyCriteria_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_maxKeyCriteria_result.prototype = {};
ConcourseService_maxKeyCriteria_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyCriteria_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyCriteriaTime_args = function(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_maxKeyCriteriaTime_args.prototype = {};
ConcourseService_maxKeyCriteriaTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyCriteriaTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyCriteriaTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyCriteriaTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_maxKeyCriteriaTime_result.prototype = {};
ConcourseService_maxKeyCriteriaTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyCriteriaTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyCriteriaTimestr_args = function(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_maxKeyCriteriaTimestr_args.prototype = {};
ConcourseService_maxKeyCriteriaTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyCriteriaTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyCriteriaTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyCriteriaTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_maxKeyCriteriaTimestr_result.prototype = {};
ConcourseService_maxKeyCriteriaTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyCriteriaTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyCcl_args = function(args) {
    this.key = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_maxKeyCcl_args.prototype = {};
ConcourseService_maxKeyCcl_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyCcl_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyCcl_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyCcl_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_maxKeyCcl_result.prototype = {};
ConcourseService_maxKeyCcl_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyCcl_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyCclTime_args = function(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_maxKeyCclTime_args.prototype = {};
ConcourseService_maxKeyCclTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyCclTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyCclTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyCclTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_maxKeyCclTime_result.prototype = {};
ConcourseService_maxKeyCclTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyCclTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyCclTimestr_args = function(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_maxKeyCclTimestr_args.prototype = {};
ConcourseService_maxKeyCclTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyCclTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyCclTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyCclTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_maxKeyCclTimestr_result.prototype = {};
ConcourseService_maxKeyCclTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyCclTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKey_args = function(args) {
    this.key = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_maxKey_args.prototype = {};
ConcourseService_maxKey_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKey_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKey_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKey_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_maxKey_result.prototype = {};
ConcourseService_maxKey_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKey_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKey_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyTime_args = function(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_maxKeyTime_args.prototype = {};
ConcourseService_maxKeyTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_maxKeyTime_result.prototype = {};
ConcourseService_maxKeyTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyTimestr_args = function(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_maxKeyTimestr_args.prototype = {};
ConcourseService_maxKeyTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_maxKeyTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_maxKeyTimestr_result.prototype = {};
ConcourseService_maxKeyTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_maxKeyTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_maxKeyTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyRecord_args = function(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_minKeyRecord_args.prototype = {};
ConcourseService_minKeyRecord_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyRecord_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyRecord_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_minKeyRecord_result.prototype = {};
ConcourseService_minKeyRecord_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyRecord_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyRecordTime_args = function(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_minKeyRecordTime_args.prototype = {};
ConcourseService_minKeyRecordTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyRecordTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyRecordTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_minKeyRecordTime_result.prototype = {};
ConcourseService_minKeyRecordTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyRecordTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyRecordTimestr_args = function(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_minKeyRecordTimestr_args.prototype = {};
ConcourseService_minKeyRecordTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyRecordTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyRecordTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_minKeyRecordTimestr_result.prototype = {};
ConcourseService_minKeyRecordTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyRecordTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKey_args = function(args) {
    this.key = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_minKey_args.prototype = {};
ConcourseService_minKey_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKey_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKey_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKey_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_minKey_result.prototype = {};
ConcourseService_minKey_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKey_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKey_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyRecordsTime_args = function(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_minKeyRecordsTime_args.prototype = {};
ConcourseService_minKeyRecordsTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size2760 = 0;
          var _rtmp32764;
          this.records = [];
          var _etype2763 = 0;
          _rtmp32764 = input.readListBegin();
          _etype2763 = _rtmp32764.etype;
          _size2760 = _rtmp32764.size;
          for (var _i2765 = 0; _i2765 < _size2760; ++_i2765)
          {
            var elem2766 = null;
            elem2766 = input.readI64();
            this.records.push(elem2766);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyRecordsTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2767 in this.records)
      {
        if (this.records.hasOwnProperty(iter2767))
        {
          iter2767 = this.records[iter2767];
          output.writeI64(iter2767);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyRecordsTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_minKeyRecordsTime_result.prototype = {};
ConcourseService_minKeyRecordsTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyRecordsTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyRecordsTimestr_args = function(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_minKeyRecordsTimestr_args.prototype = {};
ConcourseService_minKeyRecordsTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size2768 = 0;
          var _rtmp32772;
          this.records = [];
          var _etype2771 = 0;
          _rtmp32772 = input.readListBegin();
          _etype2771 = _rtmp32772.etype;
          _size2768 = _rtmp32772.size;
          for (var _i2773 = 0; _i2773 < _size2768; ++_i2773)
          {
            var elem2774 = null;
            elem2774 = input.readI64();
            this.records.push(elem2774);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyRecordsTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2775 in this.records)
      {
        if (this.records.hasOwnProperty(iter2775))
        {
          iter2775 = this.records[iter2775];
          output.writeI64(iter2775);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyRecordsTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_minKeyRecordsTimestr_result.prototype = {};
ConcourseService_minKeyRecordsTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyRecordsTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyCriteria_args = function(args) {
    this.key = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_minKeyCriteria_args.prototype = {};
ConcourseService_minKeyCriteria_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyCriteria_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyCriteria_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyCriteria_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_minKeyCriteria_result.prototype = {};
ConcourseService_minKeyCriteria_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyCriteria_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyCriteriaTime_args = function(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_minKeyCriteriaTime_args.prototype = {};
ConcourseService_minKeyCriteriaTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyCriteriaTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyCriteriaTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyCriteriaTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_minKeyCriteriaTime_result.prototype = {};
ConcourseService_minKeyCriteriaTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyCriteriaTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyCriteriaTimestr_args = function(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_minKeyCriteriaTimestr_args.prototype = {};
ConcourseService_minKeyCriteriaTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyCriteriaTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyCriteriaTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyCriteriaTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_minKeyCriteriaTimestr_result.prototype = {};
ConcourseService_minKeyCriteriaTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyCriteriaTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyCcl_args = function(args) {
    this.key = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_minKeyCcl_args.prototype = {};
ConcourseService_minKeyCcl_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyCcl_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyCcl_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyCcl_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_minKeyCcl_result.prototype = {};
ConcourseService_minKeyCcl_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyCcl_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyCclTime_args = function(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_minKeyCclTime_args.prototype = {};
ConcourseService_minKeyCclTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyCclTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyCclTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyCclTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_minKeyCclTime_result.prototype = {};
ConcourseService_minKeyCclTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyCclTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyCclTimestr_args = function(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_minKeyCclTimestr_args.prototype = {};
ConcourseService_minKeyCclTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyCclTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyCclTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyCclTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_minKeyCclTimestr_result.prototype = {};
ConcourseService_minKeyCclTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyCclTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyTime_args = function(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_minKeyTime_args.prototype = {};
ConcourseService_minKeyTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_minKeyTime_result.prototype = {};
ConcourseService_minKeyTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyTimestr_args = function(args) {
    this.key = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_minKeyTimestr_args.prototype = {};
ConcourseService_minKeyTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 2);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_minKeyTimestr_result.prototype = {};
ConcourseService_minKeyTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyRecords_args = function(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_minKeyRecords_args.prototype = {};
ConcourseService_minKeyRecords_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size2776 = 0;
          var _rtmp32780;
          this.records = [];
          var _etype2779 = 0;
          _rtmp32780 = input.readListBegin();
          _etype2779 = _rtmp32780.etype;
          _size2776 = _rtmp32780.size;
          for (var _i2781 = 0; _i2781 < _size2776; ++_i2781)
          {
            var elem2782 = null;
            elem2782 = input.readI64();
            this.records.push(elem2782);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyRecords_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2783 in this.records)
      {
        if (this.records.hasOwnProperty(iter2783))
        {
          iter2783 = this.records[iter2783];
          output.writeI64(iter2783);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_minKeyRecords_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new data_ttypes.TObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_minKeyRecords_result.prototype = {};
ConcourseService_minKeyRecords_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new data_ttypes.TObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_minKeyRecords_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_minKeyRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeyRecord_args = function(args) {
    this.key = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_navigateKeyRecord_args.prototype = {};
ConcourseService_navigateKeyRecord_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeyRecord_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecord_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeyRecord_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_navigateKeyRecord_result.prototype = {};
ConcourseService_navigateKeyRecord_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2784 = 0;
          var _rtmp32788;
          this.success = {};
          var _ktype2785 = 0;
          var _vtype2786 = 0;
          _rtmp32788 = input.readMapBegin();
          _ktype2785 = _rtmp32788.ktype;
          _vtype2786 = _rtmp32788.vtype;
          _size2784 = _rtmp32788.size;
          for (var _i2789 = 0; _i2789 < _size2784; ++_i2789)
          {
            var key2790 = null;
            var val2791 = null;
            key2790 = input.readI64();
            var _size2792 = 0;
            var _rtmp32796;
            val2791 = [];
            var _etype2795 = 0;
            _rtmp32796 = input.readSetBegin();
            _etype2795 = _rtmp32796.etype;
            _size2792 = _rtmp32796.size;
            for (var _i2797 = 0; _i2797 < _size2792; ++_i2797)
            {
              var elem2798 = null;
              elem2798 = new data_ttypes.TObject();
              elem2798.read(input);
              val2791.push(elem2798);
            }
            input.readSetEnd();
            this.success[key2790] = val2791;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeyRecord_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter2799 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2799))
        {
          var viter2800 = this.success[kiter2799];
          output.writeI64(kiter2799);
          output.writeSetBegin(Thrift.Type.STRUCT, viter2800.length);
          for (var iter2801 in viter2800)
          {
            if (viter2800.hasOwnProperty(iter2801))
            {
              iter2801 = viter2800[iter2801];
              iter2801.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeyRecordTime_args = function(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_navigateKeyRecordTime_args.prototype = {};
ConcourseService_navigateKeyRecordTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeyRecordTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecordTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeyRecordTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_navigateKeyRecordTime_result.prototype = {};
ConcourseService_navigateKeyRecordTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2802 = 0;
          var _rtmp32806;
          this.success = {};
          var _ktype2803 = 0;
          var _vtype2804 = 0;
          _rtmp32806 = input.readMapBegin();
          _ktype2803 = _rtmp32806.ktype;
          _vtype2804 = _rtmp32806.vtype;
          _size2802 = _rtmp32806.size;
          for (var _i2807 = 0; _i2807 < _size2802; ++_i2807)
          {
            var key2808 = null;
            var val2809 = null;
            key2808 = input.readI64();
            var _size2810 = 0;
            var _rtmp32814;
            val2809 = [];
            var _etype2813 = 0;
            _rtmp32814 = input.readSetBegin();
            _etype2813 = _rtmp32814.etype;
            _size2810 = _rtmp32814.size;
            for (var _i2815 = 0; _i2815 < _size2810; ++_i2815)
            {
              var elem2816 = null;
              elem2816 = new data_ttypes.TObject();
              elem2816.read(input);
              val2809.push(elem2816);
            }
            input.readSetEnd();
            this.success[key2808] = val2809;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeyRecordTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter2817 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2817))
        {
          var viter2818 = this.success[kiter2817];
          output.writeI64(kiter2817);
          output.writeSetBegin(Thrift.Type.STRUCT, viter2818.length);
          for (var iter2819 in viter2818)
          {
            if (viter2818.hasOwnProperty(iter2819))
            {
              iter2819 = viter2818[iter2819];
              iter2819.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeyRecordTimestr_args = function(args) {
    this.key = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_navigateKeyRecordTimestr_args.prototype = {};
ConcourseService_navigateKeyRecordTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeyRecordTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecordTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeyRecordTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_navigateKeyRecordTimestr_result.prototype = {};
ConcourseService_navigateKeyRecordTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2820 = 0;
          var _rtmp32824;
          this.success = {};
          var _ktype2821 = 0;
          var _vtype2822 = 0;
          _rtmp32824 = input.readMapBegin();
          _ktype2821 = _rtmp32824.ktype;
          _vtype2822 = _rtmp32824.vtype;
          _size2820 = _rtmp32824.size;
          for (var _i2825 = 0; _i2825 < _size2820; ++_i2825)
          {
            var key2826 = null;
            var val2827 = null;
            key2826 = input.readI64();
            var _size2828 = 0;
            var _rtmp32832;
            val2827 = [];
            var _etype2831 = 0;
            _rtmp32832 = input.readSetBegin();
            _etype2831 = _rtmp32832.etype;
            _size2828 = _rtmp32832.size;
            for (var _i2833 = 0; _i2833 < _size2828; ++_i2833)
            {
              var elem2834 = null;
              elem2834 = new data_ttypes.TObject();
              elem2834.read(input);
              val2827.push(elem2834);
            }
            input.readSetEnd();
            this.success[key2826] = val2827;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeyRecordTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter2835 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2835))
        {
          var viter2836 = this.success[kiter2835];
          output.writeI64(kiter2835);
          output.writeSetBegin(Thrift.Type.STRUCT, viter2836.length);
          for (var iter2837 in viter2836)
          {
            if (viter2836.hasOwnProperty(iter2837))
            {
              iter2837 = viter2836[iter2837];
              iter2837.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeysRecord_args = function(args) {
    this.keys = null;
    this.record = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_navigateKeysRecord_args.prototype = {};
ConcourseService_navigateKeysRecord_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size2838 = 0;
          var _rtmp32842;
          this.keys = [];
          var _etype2841 = 0;
          _rtmp32842 = input.readListBegin();
          _etype2841 = _rtmp32842.etype;
          _size2838 = _rtmp32842.size;
          for (var _i2843 = 0; _i2843 < _size2838; ++_i2843)
          {
            var elem2844 = null;
            elem2844 = input.readString();
            this.keys.push(elem2844);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeysRecord_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecord_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter2845 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter2845))
        {
          iter2845 = this.keys[iter2845];
          output.writeString(iter2845);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeysRecord_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_navigateKeysRecord_result.prototype = {};
ConcourseService_navigateKeysRecord_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2846 = 0;
          var _rtmp32850;
          this.success = {};
          var _ktype2847 = 0;
          var _vtype2848 = 0;
          _rtmp32850 = input.readMapBegin();
          _ktype2847 = _rtmp32850.ktype;
          _vtype2848 = _rtmp32850.vtype;
          _size2846 = _rtmp32850.size;
          for (var _i2851 = 0; _i2851 < _size2846; ++_i2851)
          {
            var key2852 = null;
            var val2853 = null;
            key2852 = input.readI64();
            var _size2854 = 0;
            var _rtmp32858;
            val2853 = {};
            var _ktype2855 = 0;
            var _vtype2856 = 0;
            _rtmp32858 = input.readMapBegin();
            _ktype2855 = _rtmp32858.ktype;
            _vtype2856 = _rtmp32858.vtype;
            _size2854 = _rtmp32858.size;
            for (var _i2859 = 0; _i2859 < _size2854; ++_i2859)
            {
              var key2860 = null;
              var val2861 = null;
              key2860 = input.readString();
              var _size2862 = 0;
              var _rtmp32866;
              val2861 = [];
              var _etype2865 = 0;
              _rtmp32866 = input.readSetBegin();
              _etype2865 = _rtmp32866.etype;
              _size2862 = _rtmp32866.size;
              for (var _i2867 = 0; _i2867 < _size2862; ++_i2867)
              {
                var elem2868 = null;
                elem2868 = new data_ttypes.TObject();
                elem2868.read(input);
                val2861.push(elem2868);
              }
              input.readSetEnd();
              val2853[key2860] = val2861;
            }
            input.readMapEnd();
            this.success[key2852] = val2853;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeysRecord_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecord_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter2869 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2869))
        {
          var viter2870 = this.success[kiter2869];
          output.writeI64(kiter2869);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter2870));
          for (var kiter2871 in viter2870)
          {
            if (viter2870.hasOwnProperty(kiter2871))
            {
              var viter2872 = viter2870[kiter2871];
              output.writeString(kiter2871);
              output.writeSetBegin(Thrift.Type.STRUCT, viter2872.length);
              for (var iter2873 in viter2872)
              {
                if (viter2872.hasOwnProperty(iter2873))
                {
                  iter2873 = viter2872[iter2873];
                  iter2873.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeysRecordTime_args = function(args) {
    this.keys = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_navigateKeysRecordTime_args.prototype = {};
ConcourseService_navigateKeysRecordTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size2874 = 0;
          var _rtmp32878;
          this.keys = [];
          var _etype2877 = 0;
          _rtmp32878 = input.readListBegin();
          _etype2877 = _rtmp32878.etype;
          _size2874 = _rtmp32878.size;
          for (var _i2879 = 0; _i2879 < _size2874; ++_i2879)
          {
            var elem2880 = null;
            elem2880 = input.readString();
            this.keys.push(elem2880);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeysRecordTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecordTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter2881 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter2881))
        {
          iter2881 = this.keys[iter2881];
          output.writeString(iter2881);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeysRecordTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_navigateKeysRecordTime_result.prototype = {};
ConcourseService_navigateKeysRecordTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2882 = 0;
          var _rtmp32886;
          this.success = {};
          var _ktype2883 = 0;
          var _vtype2884 = 0;
          _rtmp32886 = input.readMapBegin();
          _ktype2883 = _rtmp32886.ktype;
          _vtype2884 = _rtmp32886.vtype;
          _size2882 = _rtmp32886.size;
          for (var _i2887 = 0; _i2887 < _size2882; ++_i2887)
          {
            var key2888 = null;
            var val2889 = null;
            key2888 = input.readI64();
            var _size2890 = 0;
            var _rtmp32894;
            val2889 = {};
            var _ktype2891 = 0;
            var _vtype2892 = 0;
            _rtmp32894 = input.readMapBegin();
            _ktype2891 = _rtmp32894.ktype;
            _vtype2892 = _rtmp32894.vtype;
            _size2890 = _rtmp32894.size;
            for (var _i2895 = 0; _i2895 < _size2890; ++_i2895)
            {
              var key2896 = null;
              var val2897 = null;
              key2896 = input.readString();
              var _size2898 = 0;
              var _rtmp32902;
              val2897 = [];
              var _etype2901 = 0;
              _rtmp32902 = input.readSetBegin();
              _etype2901 = _rtmp32902.etype;
              _size2898 = _rtmp32902.size;
              for (var _i2903 = 0; _i2903 < _size2898; ++_i2903)
              {
                var elem2904 = null;
                elem2904 = new data_ttypes.TObject();
                elem2904.read(input);
                val2897.push(elem2904);
              }
              input.readSetEnd();
              val2889[key2896] = val2897;
            }
            input.readMapEnd();
            this.success[key2888] = val2889;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeysRecordTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecordTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter2905 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2905))
        {
          var viter2906 = this.success[kiter2905];
          output.writeI64(kiter2905);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter2906));
          for (var kiter2907 in viter2906)
          {
            if (viter2906.hasOwnProperty(kiter2907))
            {
              var viter2908 = viter2906[kiter2907];
              output.writeString(kiter2907);
              output.writeSetBegin(Thrift.Type.STRUCT, viter2908.length);
              for (var iter2909 in viter2908)
              {
                if (viter2908.hasOwnProperty(iter2909))
                {
                  iter2909 = viter2908[iter2909];
                  iter2909.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeysRecordTimestr_args = function(args) {
    this.keys = null;
    this.record = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.record !== undefined && args.record !== null) {
            this.record = args.record;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_navigateKeysRecordTimestr_args.prototype = {};
ConcourseService_navigateKeysRecordTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size2910 = 0;
          var _rtmp32914;
          this.keys = [];
          var _etype2913 = 0;
          _rtmp32914 = input.readListBegin();
          _etype2913 = _rtmp32914.etype;
          _size2910 = _rtmp32914.size;
          for (var _i2915 = 0; _i2915 < _size2910; ++_i2915)
          {
            var elem2916 = null;
            elem2916 = input.readString();
            this.keys.push(elem2916);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.record = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeysRecordTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecordTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter2917 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter2917))
        {
          iter2917 = this.keys[iter2917];
          output.writeString(iter2917);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.record !== null && this.record !== undefined) {
      output.writeFieldBegin('record', Thrift.Type.I64, 2);
      output.writeI64(this.record);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeysRecordTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_navigateKeysRecordTimestr_result.prototype = {};
ConcourseService_navigateKeysRecordTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2918 = 0;
          var _rtmp32922;
          this.success = {};
          var _ktype2919 = 0;
          var _vtype2920 = 0;
          _rtmp32922 = input.readMapBegin();
          _ktype2919 = _rtmp32922.ktype;
          _vtype2920 = _rtmp32922.vtype;
          _size2918 = _rtmp32922.size;
          for (var _i2923 = 0; _i2923 < _size2918; ++_i2923)
          {
            var key2924 = null;
            var val2925 = null;
            key2924 = input.readI64();
            var _size2926 = 0;
            var _rtmp32930;
            val2925 = {};
            var _ktype2927 = 0;
            var _vtype2928 = 0;
            _rtmp32930 = input.readMapBegin();
            _ktype2927 = _rtmp32930.ktype;
            _vtype2928 = _rtmp32930.vtype;
            _size2926 = _rtmp32930.size;
            for (var _i2931 = 0; _i2931 < _size2926; ++_i2931)
            {
              var key2932 = null;
              var val2933 = null;
              key2932 = input.readString();
              var _size2934 = 0;
              var _rtmp32938;
              val2933 = [];
              var _etype2937 = 0;
              _rtmp32938 = input.readSetBegin();
              _etype2937 = _rtmp32938.etype;
              _size2934 = _rtmp32938.size;
              for (var _i2939 = 0; _i2939 < _size2934; ++_i2939)
              {
                var elem2940 = null;
                elem2940 = new data_ttypes.TObject();
                elem2940.read(input);
                val2933.push(elem2940);
              }
              input.readSetEnd();
              val2925[key2932] = val2933;
            }
            input.readMapEnd();
            this.success[key2924] = val2925;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeysRecordTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecordTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter2941 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2941))
        {
          var viter2942 = this.success[kiter2941];
          output.writeI64(kiter2941);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter2942));
          for (var kiter2943 in viter2942)
          {
            if (viter2942.hasOwnProperty(kiter2943))
            {
              var viter2944 = viter2942[kiter2943];
              output.writeString(kiter2943);
              output.writeSetBegin(Thrift.Type.STRUCT, viter2944.length);
              for (var iter2945 in viter2944)
              {
                if (viter2944.hasOwnProperty(iter2945))
                {
                  iter2945 = viter2944[iter2945];
                  iter2945.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeysRecords_args = function(args) {
    this.keys = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_navigateKeysRecords_args.prototype = {};
ConcourseService_navigateKeysRecords_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size2946 = 0;
          var _rtmp32950;
          this.keys = [];
          var _etype2949 = 0;
          _rtmp32950 = input.readListBegin();
          _etype2949 = _rtmp32950.etype;
          _size2946 = _rtmp32950.size;
          for (var _i2951 = 0; _i2951 < _size2946; ++_i2951)
          {
            var elem2952 = null;
            elem2952 = input.readString();
            this.keys.push(elem2952);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size2953 = 0;
          var _rtmp32957;
          this.records = [];
          var _etype2956 = 0;
          _rtmp32957 = input.readListBegin();
          _etype2956 = _rtmp32957.etype;
          _size2953 = _rtmp32957.size;
          for (var _i2958 = 0; _i2958 < _size2953; ++_i2958)
          {
            var elem2959 = null;
            elem2959 = input.readI64();
            this.records.push(elem2959);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeysRecords_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecords_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter2960 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter2960))
        {
          iter2960 = this.keys[iter2960];
          output.writeString(iter2960);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2961 in this.records)
      {
        if (this.records.hasOwnProperty(iter2961))
        {
          iter2961 = this.records[iter2961];
          output.writeI64(iter2961);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeysRecords_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_navigateKeysRecords_result.prototype = {};
ConcourseService_navigateKeysRecords_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2962 = 0;
          var _rtmp32966;
          this.success = {};
          var _ktype2963 = 0;
          var _vtype2964 = 0;
          _rtmp32966 = input.readMapBegin();
          _ktype2963 = _rtmp32966.ktype;
          _vtype2964 = _rtmp32966.vtype;
          _size2962 = _rtmp32966.size;
          for (var _i2967 = 0; _i2967 < _size2962; ++_i2967)
          {
            var key2968 = null;
            var val2969 = null;
            key2968 = input.readI64();
            var _size2970 = 0;
            var _rtmp32974;
            val2969 = {};
            var _ktype2971 = 0;
            var _vtype2972 = 0;
            _rtmp32974 = input.readMapBegin();
            _ktype2971 = _rtmp32974.ktype;
            _vtype2972 = _rtmp32974.vtype;
            _size2970 = _rtmp32974.size;
            for (var _i2975 = 0; _i2975 < _size2970; ++_i2975)
            {
              var key2976 = null;
              var val2977 = null;
              key2976 = input.readString();
              var _size2978 = 0;
              var _rtmp32982;
              val2977 = [];
              var _etype2981 = 0;
              _rtmp32982 = input.readSetBegin();
              _etype2981 = _rtmp32982.etype;
              _size2978 = _rtmp32982.size;
              for (var _i2983 = 0; _i2983 < _size2978; ++_i2983)
              {
                var elem2984 = null;
                elem2984 = new data_ttypes.TObject();
                elem2984.read(input);
                val2977.push(elem2984);
              }
              input.readSetEnd();
              val2969[key2976] = val2977;
            }
            input.readMapEnd();
            this.success[key2968] = val2969;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeysRecords_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter2985 in this.success)
      {
        if (this.success.hasOwnProperty(kiter2985))
        {
          var viter2986 = this.success[kiter2985];
          output.writeI64(kiter2985);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter2986));
          for (var kiter2987 in viter2986)
          {
            if (viter2986.hasOwnProperty(kiter2987))
            {
              var viter2988 = viter2986[kiter2987];
              output.writeString(kiter2987);
              output.writeSetBegin(Thrift.Type.STRUCT, viter2988.length);
              for (var iter2989 in viter2988)
              {
                if (viter2988.hasOwnProperty(iter2989))
                {
                  iter2989 = viter2988[iter2989];
                  iter2989.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeyRecords_args = function(args) {
    this.key = null;
    this.records = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_navigateKeyRecords_args.prototype = {};
ConcourseService_navigateKeyRecords_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size2990 = 0;
          var _rtmp32994;
          this.records = [];
          var _etype2993 = 0;
          _rtmp32994 = input.readListBegin();
          _etype2993 = _rtmp32994.etype;
          _size2990 = _rtmp32994.size;
          for (var _i2995 = 0; _i2995 < _size2990; ++_i2995)
          {
            var elem2996 = null;
            elem2996 = input.readI64();
            this.records.push(elem2996);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeyRecords_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecords_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter2997 in this.records)
      {
        if (this.records.hasOwnProperty(iter2997))
        {
          iter2997 = this.records[iter2997];
          output.writeI64(iter2997);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeyRecords_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_navigateKeyRecords_result.prototype = {};
ConcourseService_navigateKeyRecords_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size2998 = 0;
          var _rtmp33002;
          this.success = {};
          var _ktype2999 = 0;
          var _vtype3000 = 0;
          _rtmp33002 = input.readMapBegin();
          _ktype2999 = _rtmp33002.ktype;
          _vtype3000 = _rtmp33002.vtype;
          _size2998 = _rtmp33002.size;
          for (var _i3003 = 0; _i3003 < _size2998; ++_i3003)
          {
            var key3004 = null;
            var val3005 = null;
            key3004 = input.readI64();
            var _size3006 = 0;
            var _rtmp33010;
            val3005 = [];
            var _etype3009 = 0;
            _rtmp33010 = input.readSetBegin();
            _etype3009 = _rtmp33010.etype;
            _size3006 = _rtmp33010.size;
            for (var _i3011 = 0; _i3011 < _size3006; ++_i3011)
            {
              var elem3012 = null;
              elem3012 = new data_ttypes.TObject();
              elem3012.read(input);
              val3005.push(elem3012);
            }
            input.readSetEnd();
            this.success[key3004] = val3005;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeyRecords_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecords_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter3013 in this.success)
      {
        if (this.success.hasOwnProperty(kiter3013))
        {
          var viter3014 = this.success[kiter3013];
          output.writeI64(kiter3013);
          output.writeSetBegin(Thrift.Type.STRUCT, viter3014.length);
          for (var iter3015 in viter3014)
          {
            if (viter3014.hasOwnProperty(iter3015))
            {
              iter3015 = viter3014[iter3015];
              iter3015.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeyRecordsTime_args = function(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_navigateKeyRecordsTime_args.prototype = {};
ConcourseService_navigateKeyRecordsTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size3016 = 0;
          var _rtmp33020;
          this.records = [];
          var _etype3019 = 0;
          _rtmp33020 = input.readListBegin();
          _etype3019 = _rtmp33020.etype;
          _size3016 = _rtmp33020.size;
          for (var _i3021 = 0; _i3021 < _size3016; ++_i3021)
          {
            var elem3022 = null;
            elem3022 = input.readI64();
            this.records.push(elem3022);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeyRecordsTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecordsTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter3023 in this.records)
      {
        if (this.records.hasOwnProperty(iter3023))
        {
          iter3023 = this.records[iter3023];
          output.writeI64(iter3023);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeyRecordsTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_navigateKeyRecordsTime_result.prototype = {};
ConcourseService_navigateKeyRecordsTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size3024 = 0;
          var _rtmp33028;
          this.success = {};
          var _ktype3025 = 0;
          var _vtype3026 = 0;
          _rtmp33028 = input.readMapBegin();
          _ktype3025 = _rtmp33028.ktype;
          _vtype3026 = _rtmp33028.vtype;
          _size3024 = _rtmp33028.size;
          for (var _i3029 = 0; _i3029 < _size3024; ++_i3029)
          {
            var key3030 = null;
            var val3031 = null;
            key3030 = input.readI64();
            var _size3032 = 0;
            var _rtmp33036;
            val3031 = [];
            var _etype3035 = 0;
            _rtmp33036 = input.readSetBegin();
            _etype3035 = _rtmp33036.etype;
            _size3032 = _rtmp33036.size;
            for (var _i3037 = 0; _i3037 < _size3032; ++_i3037)
            {
              var elem3038 = null;
              elem3038 = new data_ttypes.TObject();
              elem3038.read(input);
              val3031.push(elem3038);
            }
            input.readSetEnd();
            this.success[key3030] = val3031;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeyRecordsTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter3039 in this.success)
      {
        if (this.success.hasOwnProperty(kiter3039))
        {
          var viter3040 = this.success[kiter3039];
          output.writeI64(kiter3039);
          output.writeSetBegin(Thrift.Type.STRUCT, viter3040.length);
          for (var iter3041 in viter3040)
          {
            if (viter3040.hasOwnProperty(iter3041))
            {
              iter3041 = viter3040[iter3041];
              iter3041.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeyRecordsTimestr_args = function(args) {
    this.key = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_navigateKeyRecordsTimestr_args.prototype = {};
ConcourseService_navigateKeyRecordsTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size3042 = 0;
          var _rtmp33046;
          this.records = [];
          var _etype3045 = 0;
          _rtmp33046 = input.readListBegin();
          _etype3045 = _rtmp33046.etype;
          _size3042 = _rtmp33046.size;
          for (var _i3047 = 0; _i3047 < _size3042; ++_i3047)
          {
            var elem3048 = null;
            elem3048 = input.readI64();
            this.records.push(elem3048);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeyRecordsTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecordsTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter3049 in this.records)
      {
        if (this.records.hasOwnProperty(iter3049))
        {
          iter3049 = this.records[iter3049];
          output.writeI64(iter3049);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeyRecordsTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_navigateKeyRecordsTimestr_result.prototype = {};
ConcourseService_navigateKeyRecordsTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size3050 = 0;
          var _rtmp33054;
          this.success = {};
          var _ktype3051 = 0;
          var _vtype3052 = 0;
          _rtmp33054 = input.readMapBegin();
          _ktype3051 = _rtmp33054.ktype;
          _vtype3052 = _rtmp33054.vtype;
          _size3050 = _rtmp33054.size;
          for (var _i3055 = 0; _i3055 < _size3050; ++_i3055)
          {
            var key3056 = null;
            var val3057 = null;
            key3056 = input.readI64();
            var _size3058 = 0;
            var _rtmp33062;
            val3057 = [];
            var _etype3061 = 0;
            _rtmp33062 = input.readSetBegin();
            _etype3061 = _rtmp33062.etype;
            _size3058 = _rtmp33062.size;
            for (var _i3063 = 0; _i3063 < _size3058; ++_i3063)
            {
              var elem3064 = null;
              elem3064 = new data_ttypes.TObject();
              elem3064.read(input);
              val3057.push(elem3064);
            }
            input.readSetEnd();
            this.success[key3056] = val3057;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeyRecordsTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeyRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter3065 in this.success)
      {
        if (this.success.hasOwnProperty(kiter3065))
        {
          var viter3066 = this.success[kiter3065];
          output.writeI64(kiter3065);
          output.writeSetBegin(Thrift.Type.STRUCT, viter3066.length);
          for (var iter3067 in viter3066)
          {
            if (viter3066.hasOwnProperty(iter3067))
            {
              iter3067 = viter3066[iter3067];
              iter3067.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeysRecordsTime_args = function(args) {
    this.keys = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_navigateKeysRecordsTime_args.prototype = {};
ConcourseService_navigateKeysRecordsTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size3068 = 0;
          var _rtmp33072;
          this.keys = [];
          var _etype3071 = 0;
          _rtmp33072 = input.readListBegin();
          _etype3071 = _rtmp33072.etype;
          _size3068 = _rtmp33072.size;
          for (var _i3073 = 0; _i3073 < _size3068; ++_i3073)
          {
            var elem3074 = null;
            elem3074 = input.readString();
            this.keys.push(elem3074);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size3075 = 0;
          var _rtmp33079;
          this.records = [];
          var _etype3078 = 0;
          _rtmp33079 = input.readListBegin();
          _etype3078 = _rtmp33079.etype;
          _size3075 = _rtmp33079.size;
          for (var _i3080 = 0; _i3080 < _size3075; ++_i3080)
          {
            var elem3081 = null;
            elem3081 = input.readI64();
            this.records.push(elem3081);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeysRecordsTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecordsTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter3082 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter3082))
        {
          iter3082 = this.keys[iter3082];
          output.writeString(iter3082);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter3083 in this.records)
      {
        if (this.records.hasOwnProperty(iter3083))
        {
          iter3083 = this.records[iter3083];
          output.writeI64(iter3083);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeysRecordsTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_navigateKeysRecordsTime_result.prototype = {};
ConcourseService_navigateKeysRecordsTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size3084 = 0;
          var _rtmp33088;
          this.success = {};
          var _ktype3085 = 0;
          var _vtype3086 = 0;
          _rtmp33088 = input.readMapBegin();
          _ktype3085 = _rtmp33088.ktype;
          _vtype3086 = _rtmp33088.vtype;
          _size3084 = _rtmp33088.size;
          for (var _i3089 = 0; _i3089 < _size3084; ++_i3089)
          {
            var key3090 = null;
            var val3091 = null;
            key3090 = input.readI64();
            var _size3092 = 0;
            var _rtmp33096;
            val3091 = {};
            var _ktype3093 = 0;
            var _vtype3094 = 0;
            _rtmp33096 = input.readMapBegin();
            _ktype3093 = _rtmp33096.ktype;
            _vtype3094 = _rtmp33096.vtype;
            _size3092 = _rtmp33096.size;
            for (var _i3097 = 0; _i3097 < _size3092; ++_i3097)
            {
              var key3098 = null;
              var val3099 = null;
              key3098 = input.readString();
              var _size3100 = 0;
              var _rtmp33104;
              val3099 = [];
              var _etype3103 = 0;
              _rtmp33104 = input.readSetBegin();
              _etype3103 = _rtmp33104.etype;
              _size3100 = _rtmp33104.size;
              for (var _i3105 = 0; _i3105 < _size3100; ++_i3105)
              {
                var elem3106 = null;
                elem3106 = new data_ttypes.TObject();
                elem3106.read(input);
                val3099.push(elem3106);
              }
              input.readSetEnd();
              val3091[key3098] = val3099;
            }
            input.readMapEnd();
            this.success[key3090] = val3091;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeysRecordsTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecordsTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter3107 in this.success)
      {
        if (this.success.hasOwnProperty(kiter3107))
        {
          var viter3108 = this.success[kiter3107];
          output.writeI64(kiter3107);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter3108));
          for (var kiter3109 in viter3108)
          {
            if (viter3108.hasOwnProperty(kiter3109))
            {
              var viter3110 = viter3108[kiter3109];
              output.writeString(kiter3109);
              output.writeSetBegin(Thrift.Type.STRUCT, viter3110.length);
              for (var iter3111 in viter3110)
              {
                if (viter3110.hasOwnProperty(iter3111))
                {
                  iter3111 = viter3110[iter3111];
                  iter3111.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeysRecordsTimestr_args = function(args) {
    this.keys = null;
    this.records = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.records !== undefined && args.records !== null) {
            this.records = Thrift.copyList(args.records, [null]);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_navigateKeysRecordsTimestr_args.prototype = {};
ConcourseService_navigateKeysRecordsTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size3112 = 0;
          var _rtmp33116;
          this.keys = [];
          var _etype3115 = 0;
          _rtmp33116 = input.readListBegin();
          _etype3115 = _rtmp33116.etype;
          _size3112 = _rtmp33116.size;
          for (var _i3117 = 0; _i3117 < _size3112; ++_i3117)
          {
            var elem3118 = null;
            elem3118 = input.readString();
            this.keys.push(elem3118);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size3119 = 0;
          var _rtmp33123;
          this.records = [];
          var _etype3122 = 0;
          _rtmp33123 = input.readListBegin();
          _etype3122 = _rtmp33123.etype;
          _size3119 = _rtmp33123.size;
          for (var _i3124 = 0; _i3124 < _size3119; ++_i3124)
          {
            var elem3125 = null;
            elem3125 = input.readI64();
            this.records.push(elem3125);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeysRecordsTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecordsTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter3126 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter3126))
        {
          iter3126 = this.keys[iter3126];
          output.writeString(iter3126);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.records !== null && this.records !== undefined) {
      output.writeFieldBegin('records', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.records.length);
      for (var iter3127 in this.records)
      {
        if (this.records.hasOwnProperty(iter3127))
        {
          iter3127 = this.records[iter3127];
          output.writeI64(iter3127);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeysRecordsTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_navigateKeysRecordsTimestr_result.prototype = {};
ConcourseService_navigateKeysRecordsTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size3128 = 0;
          var _rtmp33132;
          this.success = {};
          var _ktype3129 = 0;
          var _vtype3130 = 0;
          _rtmp33132 = input.readMapBegin();
          _ktype3129 = _rtmp33132.ktype;
          _vtype3130 = _rtmp33132.vtype;
          _size3128 = _rtmp33132.size;
          for (var _i3133 = 0; _i3133 < _size3128; ++_i3133)
          {
            var key3134 = null;
            var val3135 = null;
            key3134 = input.readI64();
            var _size3136 = 0;
            var _rtmp33140;
            val3135 = {};
            var _ktype3137 = 0;
            var _vtype3138 = 0;
            _rtmp33140 = input.readMapBegin();
            _ktype3137 = _rtmp33140.ktype;
            _vtype3138 = _rtmp33140.vtype;
            _size3136 = _rtmp33140.size;
            for (var _i3141 = 0; _i3141 < _size3136; ++_i3141)
            {
              var key3142 = null;
              var val3143 = null;
              key3142 = input.readString();
              var _size3144 = 0;
              var _rtmp33148;
              val3143 = [];
              var _etype3147 = 0;
              _rtmp33148 = input.readSetBegin();
              _etype3147 = _rtmp33148.etype;
              _size3144 = _rtmp33148.size;
              for (var _i3149 = 0; _i3149 < _size3144; ++_i3149)
              {
                var elem3150 = null;
                elem3150 = new data_ttypes.TObject();
                elem3150.read(input);
                val3143.push(elem3150);
              }
              input.readSetEnd();
              val3135[key3142] = val3143;
            }
            input.readMapEnd();
            this.success[key3134] = val3135;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeysRecordsTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeysRecordsTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter3151 in this.success)
      {
        if (this.success.hasOwnProperty(kiter3151))
        {
          var viter3152 = this.success[kiter3151];
          output.writeI64(kiter3151);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter3152));
          for (var kiter3153 in viter3152)
          {
            if (viter3152.hasOwnProperty(kiter3153))
            {
              var viter3154 = viter3152[kiter3153];
              output.writeString(kiter3153);
              output.writeSetBegin(Thrift.Type.STRUCT, viter3154.length);
              for (var iter3155 in viter3154)
              {
                if (viter3154.hasOwnProperty(iter3155))
                {
                  iter3155 = viter3154[iter3155];
                  iter3155.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeyCcl_args = function(args) {
    this.key = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_navigateKeyCcl_args.prototype = {};
ConcourseService_navigateKeyCcl_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeyCcl_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeyCcl_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeyCcl_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_navigateKeyCcl_result.prototype = {};
ConcourseService_navigateKeyCcl_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size3156 = 0;
          var _rtmp33160;
          this.success = {};
          var _ktype3157 = 0;
          var _vtype3158 = 0;
          _rtmp33160 = input.readMapBegin();
          _ktype3157 = _rtmp33160.ktype;
          _vtype3158 = _rtmp33160.vtype;
          _size3156 = _rtmp33160.size;
          for (var _i3161 = 0; _i3161 < _size3156; ++_i3161)
          {
            var key3162 = null;
            var val3163 = null;
            key3162 = input.readI64();
            var _size3164 = 0;
            var _rtmp33168;
            val3163 = [];
            var _etype3167 = 0;
            _rtmp33168 = input.readSetBegin();
            _etype3167 = _rtmp33168.etype;
            _size3164 = _rtmp33168.size;
            for (var _i3169 = 0; _i3169 < _size3164; ++_i3169)
            {
              var elem3170 = null;
              elem3170 = new data_ttypes.TObject();
              elem3170.read(input);
              val3163.push(elem3170);
            }
            input.readSetEnd();
            this.success[key3162] = val3163;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeyCcl_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeyCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter3171 in this.success)
      {
        if (this.success.hasOwnProperty(kiter3171))
        {
          var viter3172 = this.success[kiter3171];
          output.writeI64(kiter3171);
          output.writeSetBegin(Thrift.Type.STRUCT, viter3172.length);
          for (var iter3173 in viter3172)
          {
            if (viter3172.hasOwnProperty(iter3173))
            {
              iter3173 = viter3172[iter3173];
              iter3173.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeyCclTime_args = function(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_navigateKeyCclTime_args.prototype = {};
ConcourseService_navigateKeyCclTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeyCclTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeyCclTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeyCclTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_navigateKeyCclTime_result.prototype = {};
ConcourseService_navigateKeyCclTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size3174 = 0;
          var _rtmp33178;
          this.success = {};
          var _ktype3175 = 0;
          var _vtype3176 = 0;
          _rtmp33178 = input.readMapBegin();
          _ktype3175 = _rtmp33178.ktype;
          _vtype3176 = _rtmp33178.vtype;
          _size3174 = _rtmp33178.size;
          for (var _i3179 = 0; _i3179 < _size3174; ++_i3179)
          {
            var key3180 = null;
            var val3181 = null;
            key3180 = input.readI64();
            var _size3182 = 0;
            var _rtmp33186;
            val3181 = [];
            var _etype3185 = 0;
            _rtmp33186 = input.readSetBegin();
            _etype3185 = _rtmp33186.etype;
            _size3182 = _rtmp33186.size;
            for (var _i3187 = 0; _i3187 < _size3182; ++_i3187)
            {
              var elem3188 = null;
              elem3188 = new data_ttypes.TObject();
              elem3188.read(input);
              val3181.push(elem3188);
            }
            input.readSetEnd();
            this.success[key3180] = val3181;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeyCclTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeyCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter3189 in this.success)
      {
        if (this.success.hasOwnProperty(kiter3189))
        {
          var viter3190 = this.success[kiter3189];
          output.writeI64(kiter3189);
          output.writeSetBegin(Thrift.Type.STRUCT, viter3190.length);
          for (var iter3191 in viter3190)
          {
            if (viter3190.hasOwnProperty(iter3191))
            {
              iter3191 = viter3190[iter3191];
              iter3191.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeyCclTimestr_args = function(args) {
    this.key = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_navigateKeyCclTimestr_args.prototype = {};
ConcourseService_navigateKeyCclTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeyCclTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeyCclTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeyCclTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_navigateKeyCclTimestr_result.prototype = {};
ConcourseService_navigateKeyCclTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size3192 = 0;
          var _rtmp33196;
          this.success = {};
          var _ktype3193 = 0;
          var _vtype3194 = 0;
          _rtmp33196 = input.readMapBegin();
          _ktype3193 = _rtmp33196.ktype;
          _vtype3194 = _rtmp33196.vtype;
          _size3192 = _rtmp33196.size;
          for (var _i3197 = 0; _i3197 < _size3192; ++_i3197)
          {
            var key3198 = null;
            var val3199 = null;
            key3198 = input.readI64();
            var _size3200 = 0;
            var _rtmp33204;
            val3199 = [];
            var _etype3203 = 0;
            _rtmp33204 = input.readSetBegin();
            _etype3203 = _rtmp33204.etype;
            _size3200 = _rtmp33204.size;
            for (var _i3205 = 0; _i3205 < _size3200; ++_i3205)
            {
              var elem3206 = null;
              elem3206 = new data_ttypes.TObject();
              elem3206.read(input);
              val3199.push(elem3206);
            }
            input.readSetEnd();
            this.success[key3198] = val3199;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeyCclTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeyCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter3207 in this.success)
      {
        if (this.success.hasOwnProperty(kiter3207))
        {
          var viter3208 = this.success[kiter3207];
          output.writeI64(kiter3207);
          output.writeSetBegin(Thrift.Type.STRUCT, viter3208.length);
          for (var iter3209 in viter3208)
          {
            if (viter3208.hasOwnProperty(iter3209))
            {
              iter3209 = viter3208[iter3209];
              iter3209.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeysCcl_args = function(args) {
    this.keys = null;
    this.ccl = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_navigateKeysCcl_args.prototype = {};
ConcourseService_navigateKeysCcl_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size3210 = 0;
          var _rtmp33214;
          this.keys = [];
          var _etype3213 = 0;
          _rtmp33214 = input.readListBegin();
          _etype3213 = _rtmp33214.etype;
          _size3210 = _rtmp33214.size;
          for (var _i3215 = 0; _i3215 < _size3210; ++_i3215)
          {
            var elem3216 = null;
            elem3216 = input.readString();
            this.keys.push(elem3216);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeysCcl_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeysCcl_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter3217 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter3217))
        {
          iter3217 = this.keys[iter3217];
          output.writeString(iter3217);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeysCcl_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_navigateKeysCcl_result.prototype = {};
ConcourseService_navigateKeysCcl_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size3218 = 0;
          var _rtmp33222;
          this.success = {};
          var _ktype3219 = 0;
          var _vtype3220 = 0;
          _rtmp33222 = input.readMapBegin();
          _ktype3219 = _rtmp33222.ktype;
          _vtype3220 = _rtmp33222.vtype;
          _size3218 = _rtmp33222.size;
          for (var _i3223 = 0; _i3223 < _size3218; ++_i3223)
          {
            var key3224 = null;
            var val3225 = null;
            key3224 = input.readI64();
            var _size3226 = 0;
            var _rtmp33230;
            val3225 = {};
            var _ktype3227 = 0;
            var _vtype3228 = 0;
            _rtmp33230 = input.readMapBegin();
            _ktype3227 = _rtmp33230.ktype;
            _vtype3228 = _rtmp33230.vtype;
            _size3226 = _rtmp33230.size;
            for (var _i3231 = 0; _i3231 < _size3226; ++_i3231)
            {
              var key3232 = null;
              var val3233 = null;
              key3232 = input.readString();
              var _size3234 = 0;
              var _rtmp33238;
              val3233 = [];
              var _etype3237 = 0;
              _rtmp33238 = input.readSetBegin();
              _etype3237 = _rtmp33238.etype;
              _size3234 = _rtmp33238.size;
              for (var _i3239 = 0; _i3239 < _size3234; ++_i3239)
              {
                var elem3240 = null;
                elem3240 = new data_ttypes.TObject();
                elem3240.read(input);
                val3233.push(elem3240);
              }
              input.readSetEnd();
              val3225[key3232] = val3233;
            }
            input.readMapEnd();
            this.success[key3224] = val3225;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeysCcl_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeysCcl_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter3241 in this.success)
      {
        if (this.success.hasOwnProperty(kiter3241))
        {
          var viter3242 = this.success[kiter3241];
          output.writeI64(kiter3241);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter3242));
          for (var kiter3243 in viter3242)
          {
            if (viter3242.hasOwnProperty(kiter3243))
            {
              var viter3244 = viter3242[kiter3243];
              output.writeString(kiter3243);
              output.writeSetBegin(Thrift.Type.STRUCT, viter3244.length);
              for (var iter3245 in viter3244)
              {
                if (viter3244.hasOwnProperty(iter3245))
                {
                  iter3245 = viter3244[iter3245];
                  iter3245.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeysCclTime_args = function(args) {
    this.keys = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_navigateKeysCclTime_args.prototype = {};
ConcourseService_navigateKeysCclTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size3246 = 0;
          var _rtmp33250;
          this.keys = [];
          var _etype3249 = 0;
          _rtmp33250 = input.readListBegin();
          _etype3249 = _rtmp33250.etype;
          _size3246 = _rtmp33250.size;
          for (var _i3251 = 0; _i3251 < _size3246; ++_i3251)
          {
            var elem3252 = null;
            elem3252 = input.readString();
            this.keys.push(elem3252);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeysCclTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeysCclTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter3253 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter3253))
        {
          iter3253 = this.keys[iter3253];
          output.writeString(iter3253);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeysCclTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_navigateKeysCclTime_result.prototype = {};
ConcourseService_navigateKeysCclTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size3254 = 0;
          var _rtmp33258;
          this.success = {};
          var _ktype3255 = 0;
          var _vtype3256 = 0;
          _rtmp33258 = input.readMapBegin();
          _ktype3255 = _rtmp33258.ktype;
          _vtype3256 = _rtmp33258.vtype;
          _size3254 = _rtmp33258.size;
          for (var _i3259 = 0; _i3259 < _size3254; ++_i3259)
          {
            var key3260 = null;
            var val3261 = null;
            key3260 = input.readI64();
            var _size3262 = 0;
            var _rtmp33266;
            val3261 = {};
            var _ktype3263 = 0;
            var _vtype3264 = 0;
            _rtmp33266 = input.readMapBegin();
            _ktype3263 = _rtmp33266.ktype;
            _vtype3264 = _rtmp33266.vtype;
            _size3262 = _rtmp33266.size;
            for (var _i3267 = 0; _i3267 < _size3262; ++_i3267)
            {
              var key3268 = null;
              var val3269 = null;
              key3268 = input.readString();
              var _size3270 = 0;
              var _rtmp33274;
              val3269 = [];
              var _etype3273 = 0;
              _rtmp33274 = input.readSetBegin();
              _etype3273 = _rtmp33274.etype;
              _size3270 = _rtmp33274.size;
              for (var _i3275 = 0; _i3275 < _size3270; ++_i3275)
              {
                var elem3276 = null;
                elem3276 = new data_ttypes.TObject();
                elem3276.read(input);
                val3269.push(elem3276);
              }
              input.readSetEnd();
              val3261[key3268] = val3269;
            }
            input.readMapEnd();
            this.success[key3260] = val3261;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeysCclTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeysCclTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter3277 in this.success)
      {
        if (this.success.hasOwnProperty(kiter3277))
        {
          var viter3278 = this.success[kiter3277];
          output.writeI64(kiter3277);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter3278));
          for (var kiter3279 in viter3278)
          {
            if (viter3278.hasOwnProperty(kiter3279))
            {
              var viter3280 = viter3278[kiter3279];
              output.writeString(kiter3279);
              output.writeSetBegin(Thrift.Type.STRUCT, viter3280.length);
              for (var iter3281 in viter3280)
              {
                if (viter3280.hasOwnProperty(iter3281))
                {
                  iter3281 = viter3280[iter3281];
                  iter3281.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeysCclTimestr_args = function(args) {
    this.keys = null;
    this.ccl = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.ccl !== undefined && args.ccl !== null) {
            this.ccl = args.ccl;
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_navigateKeysCclTimestr_args.prototype = {};
ConcourseService_navigateKeysCclTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size3282 = 0;
          var _rtmp33286;
          this.keys = [];
          var _etype3285 = 0;
          _rtmp33286 = input.readListBegin();
          _etype3285 = _rtmp33286.etype;
          _size3282 = _rtmp33286.size;
          for (var _i3287 = 0; _i3287 < _size3282; ++_i3287)
          {
            var elem3288 = null;
            elem3288 = input.readString();
            this.keys.push(elem3288);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ccl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeysCclTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeysCclTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter3289 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter3289))
        {
          iter3289 = this.keys[iter3289];
          output.writeString(iter3289);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.ccl !== null && this.ccl !== undefined) {
      output.writeFieldBegin('ccl', Thrift.Type.STRING, 2);
      output.writeString(this.ccl);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeysCclTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_navigateKeysCclTimestr_result.prototype = {};
ConcourseService_navigateKeysCclTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size3290 = 0;
          var _rtmp33294;
          this.success = {};
          var _ktype3291 = 0;
          var _vtype3292 = 0;
          _rtmp33294 = input.readMapBegin();
          _ktype3291 = _rtmp33294.ktype;
          _vtype3292 = _rtmp33294.vtype;
          _size3290 = _rtmp33294.size;
          for (var _i3295 = 0; _i3295 < _size3290; ++_i3295)
          {
            var key3296 = null;
            var val3297 = null;
            key3296 = input.readI64();
            var _size3298 = 0;
            var _rtmp33302;
            val3297 = {};
            var _ktype3299 = 0;
            var _vtype3300 = 0;
            _rtmp33302 = input.readMapBegin();
            _ktype3299 = _rtmp33302.ktype;
            _vtype3300 = _rtmp33302.vtype;
            _size3298 = _rtmp33302.size;
            for (var _i3303 = 0; _i3303 < _size3298; ++_i3303)
            {
              var key3304 = null;
              var val3305 = null;
              key3304 = input.readString();
              var _size3306 = 0;
              var _rtmp33310;
              val3305 = [];
              var _etype3309 = 0;
              _rtmp33310 = input.readSetBegin();
              _etype3309 = _rtmp33310.etype;
              _size3306 = _rtmp33310.size;
              for (var _i3311 = 0; _i3311 < _size3306; ++_i3311)
              {
                var elem3312 = null;
                elem3312 = new data_ttypes.TObject();
                elem3312.read(input);
                val3305.push(elem3312);
              }
              input.readSetEnd();
              val3297[key3304] = val3305;
            }
            input.readMapEnd();
            this.success[key3296] = val3297;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeysCclTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeysCclTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter3313 in this.success)
      {
        if (this.success.hasOwnProperty(kiter3313))
        {
          var viter3314 = this.success[kiter3313];
          output.writeI64(kiter3313);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter3314));
          for (var kiter3315 in viter3314)
          {
            if (viter3314.hasOwnProperty(kiter3315))
            {
              var viter3316 = viter3314[kiter3315];
              output.writeString(kiter3315);
              output.writeSetBegin(Thrift.Type.STRUCT, viter3316.length);
              for (var iter3317 in viter3316)
              {
                if (viter3316.hasOwnProperty(iter3317))
                {
                  iter3317 = viter3316[iter3317];
                  iter3317.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeyCriteria_args = function(args) {
    this.key = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_navigateKeyCriteria_args.prototype = {};
ConcourseService_navigateKeyCriteria_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeyCriteria_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeyCriteria_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeyCriteria_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_navigateKeyCriteria_result.prototype = {};
ConcourseService_navigateKeyCriteria_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size3318 = 0;
          var _rtmp33322;
          this.success = {};
          var _ktype3319 = 0;
          var _vtype3320 = 0;
          _rtmp33322 = input.readMapBegin();
          _ktype3319 = _rtmp33322.ktype;
          _vtype3320 = _rtmp33322.vtype;
          _size3318 = _rtmp33322.size;
          for (var _i3323 = 0; _i3323 < _size3318; ++_i3323)
          {
            var key3324 = null;
            var val3325 = null;
            key3324 = input.readI64();
            var _size3326 = 0;
            var _rtmp33330;
            val3325 = [];
            var _etype3329 = 0;
            _rtmp33330 = input.readSetBegin();
            _etype3329 = _rtmp33330.etype;
            _size3326 = _rtmp33330.size;
            for (var _i3331 = 0; _i3331 < _size3326; ++_i3331)
            {
              var elem3332 = null;
              elem3332 = new data_ttypes.TObject();
              elem3332.read(input);
              val3325.push(elem3332);
            }
            input.readSetEnd();
            this.success[key3324] = val3325;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeyCriteria_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeyCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter3333 in this.success)
      {
        if (this.success.hasOwnProperty(kiter3333))
        {
          var viter3334 = this.success[kiter3333];
          output.writeI64(kiter3333);
          output.writeSetBegin(Thrift.Type.STRUCT, viter3334.length);
          for (var iter3335 in viter3334)
          {
            if (viter3334.hasOwnProperty(iter3335))
            {
              iter3335 = viter3334[iter3335];
              iter3335.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeyCriteriaTime_args = function(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_navigateKeyCriteriaTime_args.prototype = {};
ConcourseService_navigateKeyCriteriaTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeyCriteriaTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeyCriteriaTime_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeyCriteriaTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_navigateKeyCriteriaTime_result.prototype = {};
ConcourseService_navigateKeyCriteriaTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size3336 = 0;
          var _rtmp33340;
          this.success = {};
          var _ktype3337 = 0;
          var _vtype3338 = 0;
          _rtmp33340 = input.readMapBegin();
          _ktype3337 = _rtmp33340.ktype;
          _vtype3338 = _rtmp33340.vtype;
          _size3336 = _rtmp33340.size;
          for (var _i3341 = 0; _i3341 < _size3336; ++_i3341)
          {
            var key3342 = null;
            var val3343 = null;
            key3342 = input.readI64();
            var _size3344 = 0;
            var _rtmp33348;
            val3343 = [];
            var _etype3347 = 0;
            _rtmp33348 = input.readSetBegin();
            _etype3347 = _rtmp33348.etype;
            _size3344 = _rtmp33348.size;
            for (var _i3349 = 0; _i3349 < _size3344; ++_i3349)
            {
              var elem3350 = null;
              elem3350 = new data_ttypes.TObject();
              elem3350.read(input);
              val3343.push(elem3350);
            }
            input.readSetEnd();
            this.success[key3342] = val3343;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeyCriteriaTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeyCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter3351 in this.success)
      {
        if (this.success.hasOwnProperty(kiter3351))
        {
          var viter3352 = this.success[kiter3351];
          output.writeI64(kiter3351);
          output.writeSetBegin(Thrift.Type.STRUCT, viter3352.length);
          for (var iter3353 in viter3352)
          {
            if (viter3352.hasOwnProperty(iter3353))
            {
              iter3353 = viter3352[iter3353];
              iter3353.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeyCriteriaTimestr_args = function(args) {
    this.key = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.key !== undefined && args.key !== null) {
            this.key = args.key;
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_navigateKeyCriteriaTimestr_args.prototype = {};
ConcourseService_navigateKeyCriteriaTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.key = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeyCriteriaTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeyCriteriaTimestr_args');
    if (this.key !== null && this.key !== undefined) {
      output.writeFieldBegin('key', Thrift.Type.STRING, 1);
      output.writeString(this.key);
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeyCriteriaTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_navigateKeyCriteriaTimestr_result.prototype = {};
ConcourseService_navigateKeyCriteriaTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size3354 = 0;
          var _rtmp33358;
          this.success = {};
          var _ktype3355 = 0;
          var _vtype3356 = 0;
          _rtmp33358 = input.readMapBegin();
          _ktype3355 = _rtmp33358.ktype;
          _vtype3356 = _rtmp33358.vtype;
          _size3354 = _rtmp33358.size;
          for (var _i3359 = 0; _i3359 < _size3354; ++_i3359)
          {
            var key3360 = null;
            var val3361 = null;
            key3360 = input.readI64();
            var _size3362 = 0;
            var _rtmp33366;
            val3361 = [];
            var _etype3365 = 0;
            _rtmp33366 = input.readSetBegin();
            _etype3365 = _rtmp33366.etype;
            _size3362 = _rtmp33366.size;
            for (var _i3367 = 0; _i3367 < _size3362; ++_i3367)
            {
              var elem3368 = null;
              elem3368 = new data_ttypes.TObject();
              elem3368.read(input);
              val3361.push(elem3368);
            }
            input.readSetEnd();
            this.success[key3360] = val3361;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeyCriteriaTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeyCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.success));
      for (var kiter3369 in this.success)
      {
        if (this.success.hasOwnProperty(kiter3369))
        {
          var viter3370 = this.success[kiter3369];
          output.writeI64(kiter3369);
          output.writeSetBegin(Thrift.Type.STRUCT, viter3370.length);
          for (var iter3371 in viter3370)
          {
            if (viter3370.hasOwnProperty(iter3371))
            {
              iter3371 = viter3370[iter3371];
              iter3371.write(output);
            }
          }
          output.writeSetEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeysCriteria_args = function(args) {
    this.keys = null;
    this.criteria = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_navigateKeysCriteria_args.prototype = {};
ConcourseService_navigateKeysCriteria_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size3372 = 0;
          var _rtmp33376;
          this.keys = [];
          var _etype3375 = 0;
          _rtmp33376 = input.readListBegin();
          _etype3375 = _rtmp33376.etype;
          _size3372 = _rtmp33376.size;
          for (var _i3377 = 0; _i3377 < _size3372; ++_i3377)
          {
            var elem3378 = null;
            elem3378 = input.readString();
            this.keys.push(elem3378);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeysCriteria_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeysCriteria_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter3379 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter3379))
        {
          iter3379 = this.keys[iter3379];
          output.writeString(iter3379);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 3);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 4);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 5);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeysCriteria_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_navigateKeysCriteria_result.prototype = {};
ConcourseService_navigateKeysCriteria_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size3380 = 0;
          var _rtmp33384;
          this.success = {};
          var _ktype3381 = 0;
          var _vtype3382 = 0;
          _rtmp33384 = input.readMapBegin();
          _ktype3381 = _rtmp33384.ktype;
          _vtype3382 = _rtmp33384.vtype;
          _size3380 = _rtmp33384.size;
          for (var _i3385 = 0; _i3385 < _size3380; ++_i3385)
          {
            var key3386 = null;
            var val3387 = null;
            key3386 = input.readI64();
            var _size3388 = 0;
            var _rtmp33392;
            val3387 = {};
            var _ktype3389 = 0;
            var _vtype3390 = 0;
            _rtmp33392 = input.readMapBegin();
            _ktype3389 = _rtmp33392.ktype;
            _vtype3390 = _rtmp33392.vtype;
            _size3388 = _rtmp33392.size;
            for (var _i3393 = 0; _i3393 < _size3388; ++_i3393)
            {
              var key3394 = null;
              var val3395 = null;
              key3394 = input.readString();
              var _size3396 = 0;
              var _rtmp33400;
              val3395 = [];
              var _etype3399 = 0;
              _rtmp33400 = input.readSetBegin();
              _etype3399 = _rtmp33400.etype;
              _size3396 = _rtmp33400.size;
              for (var _i3401 = 0; _i3401 < _size3396; ++_i3401)
              {
                var elem3402 = null;
                elem3402 = new data_ttypes.TObject();
                elem3402.read(input);
                val3395.push(elem3402);
              }
              input.readSetEnd();
              val3387[key3394] = val3395;
            }
            input.readMapEnd();
            this.success[key3386] = val3387;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeysCriteria_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeysCriteria_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter3403 in this.success)
      {
        if (this.success.hasOwnProperty(kiter3403))
        {
          var viter3404 = this.success[kiter3403];
          output.writeI64(kiter3403);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter3404));
          for (var kiter3405 in viter3404)
          {
            if (viter3404.hasOwnProperty(kiter3405))
            {
              var viter3406 = viter3404[kiter3405];
              output.writeString(kiter3405);
              output.writeSetBegin(Thrift.Type.STRUCT, viter3406.length);
              for (var iter3407 in viter3406)
              {
                if (viter3406.hasOwnProperty(iter3407))
                {
                  iter3407 = viter3406[iter3407];
                  iter3407.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeysCriteriaTime_args = function(args) {
    this.keys = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_navigateKeysCriteriaTime_args.prototype = {};
ConcourseService_navigateKeysCriteriaTime_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size3408 = 0;
          var _rtmp33412;
          this.keys = [];
          var _etype3411 = 0;
          _rtmp33412 = input.readListBegin();
          _etype3411 = _rtmp33412.etype;
          _size3408 = _rtmp33412.size;
          for (var _i3413 = 0; _i3413 < _size3408; ++_i3413)
          {
            var elem3414 = null;
            elem3414 = input.readString();
            this.keys.push(elem3414);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.timestamp = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeysCriteriaTime_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeysCriteriaTime_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter3415 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter3415))
        {
          iter3415 = this.keys[iter3415];
          output.writeString(iter3415);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
      output.writeI64(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeysCriteriaTime_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_navigateKeysCriteriaTime_result.prototype = {};
ConcourseService_navigateKeysCriteriaTime_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size3416 = 0;
          var _rtmp33420;
          this.success = {};
          var _ktype3417 = 0;
          var _vtype3418 = 0;
          _rtmp33420 = input.readMapBegin();
          _ktype3417 = _rtmp33420.ktype;
          _vtype3418 = _rtmp33420.vtype;
          _size3416 = _rtmp33420.size;
          for (var _i3421 = 0; _i3421 < _size3416; ++_i3421)
          {
            var key3422 = null;
            var val3423 = null;
            key3422 = input.readI64();
            var _size3424 = 0;
            var _rtmp33428;
            val3423 = {};
            var _ktype3425 = 0;
            var _vtype3426 = 0;
            _rtmp33428 = input.readMapBegin();
            _ktype3425 = _rtmp33428.ktype;
            _vtype3426 = _rtmp33428.vtype;
            _size3424 = _rtmp33428.size;
            for (var _i3429 = 0; _i3429 < _size3424; ++_i3429)
            {
              var key3430 = null;
              var val3431 = null;
              key3430 = input.readString();
              var _size3432 = 0;
              var _rtmp33436;
              val3431 = [];
              var _etype3435 = 0;
              _rtmp33436 = input.readSetBegin();
              _etype3435 = _rtmp33436.etype;
              _size3432 = _rtmp33436.size;
              for (var _i3437 = 0; _i3437 < _size3432; ++_i3437)
              {
                var elem3438 = null;
                elem3438 = new data_ttypes.TObject();
                elem3438.read(input);
                val3431.push(elem3438);
              }
              input.readSetEnd();
              val3423[key3430] = val3431;
            }
            input.readMapEnd();
            this.success[key3422] = val3423;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeysCriteriaTime_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeysCriteriaTime_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter3439 in this.success)
      {
        if (this.success.hasOwnProperty(kiter3439))
        {
          var viter3440 = this.success[kiter3439];
          output.writeI64(kiter3439);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter3440));
          for (var kiter3441 in viter3440)
          {
            if (viter3440.hasOwnProperty(kiter3441))
            {
              var viter3442 = viter3440[kiter3441];
              output.writeString(kiter3441);
              output.writeSetBegin(Thrift.Type.STRUCT, viter3442.length);
              for (var iter3443 in viter3442)
              {
                if (viter3442.hasOwnProperty(iter3443))
                {
                  iter3443 = viter3442[iter3443];
                  iter3443.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeysCriteriaTimestr_args = function(args) {
    this.keys = null;
    this.criteria = null;
    this.timestamp = null;
    this.creds = null;
    this.transaction = null;
    this.environment = null;
    if (args) {
        if (args.keys !== undefined && args.keys !== null) {
            this.keys = Thrift.copyList(args.keys, [null]);
        }
        if (args.criteria !== undefined && args.criteria !== null) {
            this.criteria = new data_ttypes.TCriteria(args.criteria);
        }
        if (args.timestamp !== undefined && args.timestamp !== null) {
            this.timestamp = args.timestamp;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.transaction !== undefined && args.transaction !== null) {
            this.transaction = new shared_ttypes.TransactionToken(args.transaction);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_navigateKeysCriteriaTimestr_args.prototype = {};
ConcourseService_navigateKeysCriteriaTimestr_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size3444 = 0;
          var _rtmp33448;
          this.keys = [];
          var _etype3447 = 0;
          _rtmp33448 = input.readListBegin();
          _etype3447 = _rtmp33448.etype;
          _size3444 = _rtmp33448.size;
          for (var _i3449 = 0; _i3449 < _size3444; ++_i3449)
          {
            var elem3450 = null;
            elem3450 = input.readString();
            this.keys.push(elem3450);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.criteria = new data_ttypes.TCriteria();
          this.criteria.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new shared_ttypes.TransactionToken();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeysCriteriaTimestr_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeysCriteriaTimestr_args');
    if (this.keys !== null && this.keys !== undefined) {
      output.writeFieldBegin('keys', Thrift.Type.LIST, 1);
      output.writeListBegin(Thrift.Type.STRING, this.keys.length);
      for (var iter3451 in this.keys)
      {
        if (this.keys.hasOwnProperty(iter3451))
        {
          iter3451 = this.keys[iter3451];
          output.writeString(iter3451);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.criteria !== null && this.criteria !== undefined) {
      output.writeFieldBegin('criteria', Thrift.Type.STRUCT, 2);
      this.criteria.write(output);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 6);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_navigateKeysCriteriaTimestr_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = Thrift.copyMap(args.success, [Thrift.copyMap, Thrift.copyList, data_ttypes.TObject]);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_navigateKeysCriteriaTimestr_result.prototype = {};
ConcourseService_navigateKeysCriteriaTimestr_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.MAP) {
          var _size3452 = 0;
          var _rtmp33456;
          this.success = {};
          var _ktype3453 = 0;
          var _vtype3454 = 0;
          _rtmp33456 = input.readMapBegin();
          _ktype3453 = _rtmp33456.ktype;
          _vtype3454 = _rtmp33456.vtype;
          _size3452 = _rtmp33456.size;
          for (var _i3457 = 0; _i3457 < _size3452; ++_i3457)
          {
            var key3458 = null;
            var val3459 = null;
            key3458 = input.readI64();
            var _size3460 = 0;
            var _rtmp33464;
            val3459 = {};
            var _ktype3461 = 0;
            var _vtype3462 = 0;
            _rtmp33464 = input.readMapBegin();
            _ktype3461 = _rtmp33464.ktype;
            _vtype3462 = _rtmp33464.vtype;
            _size3460 = _rtmp33464.size;
            for (var _i3465 = 0; _i3465 < _size3460; ++_i3465)
            {
              var key3466 = null;
              var val3467 = null;
              key3466 = input.readString();
              var _size3468 = 0;
              var _rtmp33472;
              val3467 = [];
              var _etype3471 = 0;
              _rtmp33472 = input.readSetBegin();
              _etype3471 = _rtmp33472.etype;
              _size3468 = _rtmp33472.size;
              for (var _i3473 = 0; _i3473 < _size3468; ++_i3473)
              {
                var elem3474 = null;
                elem3474 = new data_ttypes.TObject();
                elem3474.read(input);
                val3467.push(elem3474);
              }
              input.readSetEnd();
              val3459[key3466] = val3467;
            }
            input.readMapEnd();
            this.success[key3458] = val3459;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_navigateKeysCriteriaTimestr_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_navigateKeysCriteriaTimestr_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.MAP, 0);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.MAP, Thrift.objectLength(this.success));
      for (var kiter3475 in this.success)
      {
        if (this.success.hasOwnProperty(kiter3475))
        {
          var viter3476 = this.success[kiter3475];
          output.writeI64(kiter3475);
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(viter3476));
          for (var kiter3477 in viter3476)
          {
            if (viter3476.hasOwnProperty(kiter3477))
            {
              var viter3478 = viter3476[kiter3477];
              output.writeString(kiter3477);
              output.writeSetBegin(Thrift.Type.STRUCT, viter3478.length);
              for (var iter3479 in viter3478)
              {
                if (viter3478.hasOwnProperty(iter3479))
                {
                  iter3479 = viter3478[iter3479];
                  iter3479.write(output);
                }
              }
              output.writeSetEnd();
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getServerEnvironment_args = function(args) {
    this.creds = null;
    this.token = null;
    this.environment = null;
    if (args) {
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.token !== undefined && args.token !== null) {
            this.token = new shared_ttypes.TransactionToken(args.token);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_getServerEnvironment_args.prototype = {};
ConcourseService_getServerEnvironment_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.token = new shared_ttypes.TransactionToken();
          this.token.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getServerEnvironment_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getServerEnvironment_args');
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 1);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
      this.token.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 3);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getServerEnvironment_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_getServerEnvironment_result.prototype = {};
ConcourseService_getServerEnvironment_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getServerEnvironment_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getServerEnvironment_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getServerVersion_args = function(args) {
};
ConcourseService_getServerVersion_args.prototype = {};
ConcourseService_getServerVersion_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getServerVersion_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getServerVersion_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_getServerVersion_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_getServerVersion_result.prototype = {};
ConcourseService_getServerVersion_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_getServerVersion_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_getServerVersion_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_time_args = function(args) {
    this.creds = null;
    this.token = null;
    this.environment = null;
    if (args) {
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.token !== undefined && args.token !== null) {
            this.token = new shared_ttypes.TransactionToken(args.token);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_time_args.prototype = {};
ConcourseService_time_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.token = new shared_ttypes.TransactionToken();
          this.token.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_time_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_time_args');
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 1);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
      this.token.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 3);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_time_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex3 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
    }
};
ConcourseService_time_result.prototype = {};
ConcourseService_time_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.PermissionException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_time_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_time_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_timePhrase_args = function(args) {
    this.phrase = null;
    this.creds = null;
    this.token = null;
    this.environment = null;
    if (args) {
        if (args.phrase !== undefined && args.phrase !== null) {
            this.phrase = args.phrase;
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
        if (args.token !== undefined && args.token !== null) {
            this.token = new shared_ttypes.TransactionToken(args.token);
        }
        if (args.environment !== undefined && args.environment !== null) {
            this.environment = args.environment;
        }
    }
};
ConcourseService_timePhrase_args.prototype = {};
ConcourseService_timePhrase_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.phrase = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.token = new shared_ttypes.TransactionToken();
          this.token.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.environment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_timePhrase_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_timePhrase_args');
    if (this.phrase !== null && this.phrase !== undefined) {
      output.writeFieldBegin('phrase', Thrift.Type.STRING, 1);
      output.writeString(this.phrase);
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 2);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
      this.token.write(output);
      output.writeFieldEnd();
    }
    if (this.environment !== null && this.environment !== undefined) {
      output.writeFieldBegin('environment', Thrift.Type.STRING, 4);
      output.writeString(this.environment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_timePhrase_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    this.ex3 = null;
    this.ex4 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.TransactionException) {
        this.ex2 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ParseException) {
        this.ex3 = args;
        return;
    }
    if (args instanceof exceptions_ttypes.PermissionException) {
        this.ex4 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = args.success;
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
        if (args.ex3 !== undefined && args.ex3 !== null) {
            this.ex3 = args.ex3;
        }
        if (args.ex4 !== undefined && args.ex4 !== null) {
            this.ex4 = args.ex4;
        }
    }
};
ConcourseService_timePhrase_result.prototype = {};
ConcourseService_timePhrase_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.TransactionException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex3 = new exceptions_ttypes.ParseException();
          this.ex3.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex4 = new exceptions_ttypes.PermissionException();
          this.ex4.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_timePhrase_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_timePhrase_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    if (this.ex3 !== null && this.ex3 !== undefined) {
      output.writeFieldBegin('ex3', Thrift.Type.STRUCT, 3);
      this.ex3.write(output);
      output.writeFieldEnd();
    }
    if (this.ex4 !== null && this.ex4 !== undefined) {
      output.writeFieldBegin('ex4', Thrift.Type.STRUCT, 4);
      this.ex4.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_invokeManagement_args = function(args) {
    this.method = null;
    this.params = null;
    this.creds = null;
    if (args) {
        if (args.method !== undefined && args.method !== null) {
            this.method = args.method;
        }
        if (args.params !== undefined && args.params !== null) {
            this.params = Thrift.copyList(args.params, [complex_ttypes.ComplexTObject]);
        }
        if (args.creds !== undefined && args.creds !== null) {
            this.creds = new shared_ttypes.AccessToken(args.creds);
        }
    }
};
ConcourseService_invokeManagement_args.prototype = {};
ConcourseService_invokeManagement_args.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.method = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          var _size3480 = 0;
          var _rtmp33484;
          this.params = [];
          var _etype3483 = 0;
          _rtmp33484 = input.readListBegin();
          _etype3483 = _rtmp33484.etype;
          _size3480 = _rtmp33484.size;
          for (var _i3485 = 0; _i3485 < _size3480; ++_i3485)
          {
            var elem3486 = null;
            elem3486 = new complex_ttypes.ComplexTObject();
            elem3486.read(input);
            this.params.push(elem3486);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.creds = new shared_ttypes.AccessToken();
          this.creds.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_invokeManagement_args.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_invokeManagement_args');
    if (this.method !== null && this.method !== undefined) {
      output.writeFieldBegin('method', Thrift.Type.STRING, 2);
      output.writeString(this.method);
      output.writeFieldEnd();
    }
    if (this.params !== null && this.params !== undefined) {
      output.writeFieldBegin('params', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.params.length);
      for (var iter3487 in this.params)
      {
        if (this.params.hasOwnProperty(iter3487))
        {
          iter3487 = this.params[iter3487];
          iter3487.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.creds !== null && this.creds !== undefined) {
      output.writeFieldBegin('creds', Thrift.Type.STRUCT, 4);
      this.creds.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseService_invokeManagement_result = function(args) {
    this.success = null;
    this.ex = null;
    this.ex2 = null;
    if (args instanceof exceptions_ttypes.SecurityException) {
        this.ex = args;
        return;
    }
    if (args instanceof exceptions_ttypes.ManagementException) {
        this.ex2 = args;
        return;
    }
    if (args) {
        if (args.success !== undefined && args.success !== null) {
            this.success = new complex_ttypes.ComplexTObject(args.success);
        }
        if (args.ex !== undefined && args.ex !== null) {
            this.ex = args.ex;
        }
        if (args.ex2 !== undefined && args.ex2 !== null) {
            this.ex2 = args.ex2;
        }
    }
};
ConcourseService_invokeManagement_result.prototype = {};
ConcourseService_invokeManagement_result.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
      var ret = input.readFieldBegin();
      var fname = ret.fname;
      var ftype = ret.ftype;
      var fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid)
      {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new complex_ttypes.ComplexTObject();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex = new exceptions_ttypes.SecurityException();
          this.ex.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.ex2 = new exceptions_ttypes.ManagementException();
          this.ex2.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  };

ConcourseService_invokeManagement_result.prototype.write = function(output) {
    output.writeStructBegin('ConcourseService_invokeManagement_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.ex !== null && this.ex !== undefined) {
      output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
      this.ex.write(output);
      output.writeFieldEnd();
    }
    if (this.ex2 !== null && this.ex2 !== undefined) {
      output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
      this.ex2.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  };

ConcourseServiceClient = exports.Client = function(output, pClass) {
      this.output = output;
      this.pClass = pClass;
      this._seqid = 0;
      this._reqs = {};
  };
  ConcourseServiceClient.prototype = {};
  ConcourseServiceClient.prototype.seqid = function() { return this._seqid; }
ConcourseServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
ConcourseServiceClient.prototype.abort = function(creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_abort(creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_abort(creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_abort = function(creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('abort', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_abort_args();
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_abort = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_abort_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    callback(null)
};
ConcourseServiceClient.prototype.addKeyValue = function(key, value, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_addKeyValue(key, value, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_addKeyValue(key, value, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_addKeyValue = function(key, value, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('addKeyValue', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_addKeyValue_args();
    args.key = key;
    args.value = value;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_addKeyValue = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_addKeyValue_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('addKeyValue failed: unknown result');
};
ConcourseServiceClient.prototype.addKeyValueRecord = function(key, value, record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_addKeyValueRecord(key, value, record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_addKeyValueRecord(key, value, record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_addKeyValueRecord = function(key, value, record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('addKeyValueRecord', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_addKeyValueRecord_args();
    args.key = key;
    args.value = value;
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_addKeyValueRecord = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_addKeyValueRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('addKeyValueRecord failed: unknown result');
};
ConcourseServiceClient.prototype.addKeyValueRecords = function(key, value, records, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_addKeyValueRecords(key, value, records, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_addKeyValueRecords(key, value, records, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_addKeyValueRecords = function(key, value, records, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('addKeyValueRecords', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_addKeyValueRecords_args();
    args.key = key;
    args.value = value;
    args.records = records;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_addKeyValueRecords = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_addKeyValueRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('addKeyValueRecords failed: unknown result');
};
ConcourseServiceClient.prototype.auditRecord = function(record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_auditRecord(record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_auditRecord(record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_auditRecord = function(record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('auditRecord', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_auditRecord_args();
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_auditRecord = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_auditRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditRecord failed: unknown result');
};
ConcourseServiceClient.prototype.auditRecordStart = function(record, start, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_auditRecordStart(record, start, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_auditRecordStart(record, start, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_auditRecordStart = function(record, start, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('auditRecordStart', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_auditRecordStart_args();
    args.record = record;
    args.start = start;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_auditRecordStart = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_auditRecordStart_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditRecordStart failed: unknown result');
};
ConcourseServiceClient.prototype.auditRecordStartstr = function(record, start, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_auditRecordStartstr(record, start, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_auditRecordStartstr(record, start, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_auditRecordStartstr = function(record, start, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('auditRecordStartstr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_auditRecordStartstr_args();
    args.record = record;
    args.start = start;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_auditRecordStartstr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_auditRecordStartstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditRecordStartstr failed: unknown result');
};
ConcourseServiceClient.prototype.auditRecordStartEnd = function(record, start, tend, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_auditRecordStartEnd(record, start, tend, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_auditRecordStartEnd(record, start, tend, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_auditRecordStartEnd = function(record, start, tend, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('auditRecordStartEnd', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_auditRecordStartEnd_args();
    args.record = record;
    args.start = start;
    args.tend = tend;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_auditRecordStartEnd = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_auditRecordStartEnd_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditRecordStartEnd failed: unknown result');
};
ConcourseServiceClient.prototype.auditRecordStartstrEndstr = function(record, start, tend, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_auditRecordStartstrEndstr(record, start, tend, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_auditRecordStartstrEndstr(record, start, tend, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_auditRecordStartstrEndstr = function(record, start, tend, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('auditRecordStartstrEndstr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_auditRecordStartstrEndstr_args();
    args.record = record;
    args.start = start;
    args.tend = tend;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_auditRecordStartstrEndstr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_auditRecordStartstrEndstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditRecordStartstrEndstr failed: unknown result');
};
ConcourseServiceClient.prototype.auditKeyRecord = function(key, record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_auditKeyRecord(key, record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_auditKeyRecord(key, record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_auditKeyRecord = function(key, record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('auditKeyRecord', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_auditKeyRecord_args();
    args.key = key;
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_auditKeyRecord = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_auditKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditKeyRecord failed: unknown result');
};
ConcourseServiceClient.prototype.auditKeyRecordStart = function(key, record, start, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_auditKeyRecordStart(key, record, start, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_auditKeyRecordStart(key, record, start, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_auditKeyRecordStart = function(key, record, start, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('auditKeyRecordStart', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_auditKeyRecordStart_args();
    args.key = key;
    args.record = record;
    args.start = start;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_auditKeyRecordStart = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_auditKeyRecordStart_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditKeyRecordStart failed: unknown result');
};
ConcourseServiceClient.prototype.auditKeyRecordStartstr = function(key, record, start, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_auditKeyRecordStartstr(key, record, start, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_auditKeyRecordStartstr(key, record, start, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_auditKeyRecordStartstr = function(key, record, start, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('auditKeyRecordStartstr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_auditKeyRecordStartstr_args();
    args.key = key;
    args.record = record;
    args.start = start;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_auditKeyRecordStartstr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_auditKeyRecordStartstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditKeyRecordStartstr failed: unknown result');
};
ConcourseServiceClient.prototype.auditKeyRecordStartEnd = function(key, record, start, tend, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_auditKeyRecordStartEnd(key, record, start, tend, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_auditKeyRecordStartEnd(key, record, start, tend, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_auditKeyRecordStartEnd = function(key, record, start, tend, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('auditKeyRecordStartEnd', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_auditKeyRecordStartEnd_args();
    args.key = key;
    args.record = record;
    args.start = start;
    args.tend = tend;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_auditKeyRecordStartEnd = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_auditKeyRecordStartEnd_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditKeyRecordStartEnd failed: unknown result');
};
ConcourseServiceClient.prototype.auditKeyRecordStartstrEndstr = function(key, record, start, tend, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_auditKeyRecordStartstrEndstr(key, record, start, tend, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_auditKeyRecordStartstrEndstr(key, record, start, tend, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_auditKeyRecordStartstrEndstr = function(key, record, start, tend, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('auditKeyRecordStartstrEndstr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_auditKeyRecordStartstrEndstr_args();
    args.key = key;
    args.record = record;
    args.start = start;
    args.tend = tend;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_auditKeyRecordStartstrEndstr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_auditKeyRecordStartstrEndstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('auditKeyRecordStartstrEndstr failed: unknown result');
};
ConcourseServiceClient.prototype.browseKey = function(key, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_browseKey(key, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_browseKey(key, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_browseKey = function(key, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('browseKey', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_browseKey_args();
    args.key = key;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_browseKey = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_browseKey_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('browseKey failed: unknown result');
};
ConcourseServiceClient.prototype.browseKeys = function(keys, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_browseKeys(keys, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_browseKeys(keys, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_browseKeys = function(keys, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('browseKeys', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_browseKeys_args();
    args.keys = keys;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_browseKeys = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_browseKeys_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('browseKeys failed: unknown result');
};
ConcourseServiceClient.prototype.browseKeyTime = function(key, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_browseKeyTime(key, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_browseKeyTime(key, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_browseKeyTime = function(key, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('browseKeyTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_browseKeyTime_args();
    args.key = key;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_browseKeyTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_browseKeyTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('browseKeyTime failed: unknown result');
};
ConcourseServiceClient.prototype.browseKeyTimestr = function(key, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_browseKeyTimestr(key, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_browseKeyTimestr(key, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_browseKeyTimestr = function(key, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('browseKeyTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_browseKeyTimestr_args();
    args.key = key;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_browseKeyTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_browseKeyTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('browseKeyTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.browseKeysTime = function(keys, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_browseKeysTime(keys, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_browseKeysTime(keys, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_browseKeysTime = function(keys, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('browseKeysTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_browseKeysTime_args();
    args.keys = keys;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_browseKeysTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_browseKeysTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('browseKeysTime failed: unknown result');
};
ConcourseServiceClient.prototype.browseKeysTimestr = function(keys, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_browseKeysTimestr(keys, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_browseKeysTimestr(keys, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_browseKeysTimestr = function(keys, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('browseKeysTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_browseKeysTimestr_args();
    args.keys = keys;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_browseKeysTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_browseKeysTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('browseKeysTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.chronologizeKeyRecord = function(key, record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_chronologizeKeyRecord(key, record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_chronologizeKeyRecord(key, record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_chronologizeKeyRecord = function(key, record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('chronologizeKeyRecord', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_chronologizeKeyRecord_args();
    args.key = key;
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_chronologizeKeyRecord = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_chronologizeKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('chronologizeKeyRecord failed: unknown result');
};
ConcourseServiceClient.prototype.chronologizeKeyRecordStart = function(key, record, start, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_chronologizeKeyRecordStart(key, record, start, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_chronologizeKeyRecordStart(key, record, start, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_chronologizeKeyRecordStart = function(key, record, start, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('chronologizeKeyRecordStart', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_chronologizeKeyRecordStart_args();
    args.key = key;
    args.record = record;
    args.start = start;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_chronologizeKeyRecordStart = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_chronologizeKeyRecordStart_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('chronologizeKeyRecordStart failed: unknown result');
};
ConcourseServiceClient.prototype.chronologizeKeyRecordStartstr = function(key, record, start, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_chronologizeKeyRecordStartstr(key, record, start, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_chronologizeKeyRecordStartstr(key, record, start, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_chronologizeKeyRecordStartstr = function(key, record, start, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('chronologizeKeyRecordStartstr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_chronologizeKeyRecordStartstr_args();
    args.key = key;
    args.record = record;
    args.start = start;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_chronologizeKeyRecordStartstr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_chronologizeKeyRecordStartstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('chronologizeKeyRecordStartstr failed: unknown result');
};
ConcourseServiceClient.prototype.chronologizeKeyRecordStartEnd = function(key, record, start, tend, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_chronologizeKeyRecordStartEnd(key, record, start, tend, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_chronologizeKeyRecordStartEnd(key, record, start, tend, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_chronologizeKeyRecordStartEnd = function(key, record, start, tend, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('chronologizeKeyRecordStartEnd', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_chronologizeKeyRecordStartEnd_args();
    args.key = key;
    args.record = record;
    args.start = start;
    args.tend = tend;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_chronologizeKeyRecordStartEnd = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_chronologizeKeyRecordStartEnd_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('chronologizeKeyRecordStartEnd failed: unknown result');
};
ConcourseServiceClient.prototype.chronologizeKeyRecordStartstrEndstr = function(key, record, start, tend, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_chronologizeKeyRecordStartstrEndstr(key, record, start, tend, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_chronologizeKeyRecordStartstrEndstr(key, record, start, tend, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_chronologizeKeyRecordStartstrEndstr = function(key, record, start, tend, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('chronologizeKeyRecordStartstrEndstr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_chronologizeKeyRecordStartstrEndstr_args();
    args.key = key;
    args.record = record;
    args.start = start;
    args.tend = tend;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_chronologizeKeyRecordStartstrEndstr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_chronologizeKeyRecordStartstrEndstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('chronologizeKeyRecordStartstrEndstr failed: unknown result');
};
ConcourseServiceClient.prototype.clearRecord = function(record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_clearRecord(record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_clearRecord(record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_clearRecord = function(record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('clearRecord', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_clearRecord_args();
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_clearRecord = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_clearRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null)
};
ConcourseServiceClient.prototype.clearRecords = function(records, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_clearRecords(records, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_clearRecords(records, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_clearRecords = function(records, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('clearRecords', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_clearRecords_args();
    args.records = records;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_clearRecords = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_clearRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null)
};
ConcourseServiceClient.prototype.clearKeyRecord = function(key, record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_clearKeyRecord(key, record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_clearKeyRecord(key, record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_clearKeyRecord = function(key, record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('clearKeyRecord', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_clearKeyRecord_args();
    args.key = key;
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_clearKeyRecord = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_clearKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null)
};
ConcourseServiceClient.prototype.clearKeysRecord = function(keys, record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_clearKeysRecord(keys, record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_clearKeysRecord(keys, record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_clearKeysRecord = function(keys, record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('clearKeysRecord', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_clearKeysRecord_args();
    args.keys = keys;
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_clearKeysRecord = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_clearKeysRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null)
};
ConcourseServiceClient.prototype.clearKeyRecords = function(key, records, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_clearKeyRecords(key, records, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_clearKeyRecords(key, records, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_clearKeyRecords = function(key, records, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('clearKeyRecords', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_clearKeyRecords_args();
    args.key = key;
    args.records = records;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_clearKeyRecords = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_clearKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null)
};
ConcourseServiceClient.prototype.clearKeysRecords = function(keys, records, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_clearKeysRecords(keys, records, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_clearKeysRecords(keys, records, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_clearKeysRecords = function(keys, records, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('clearKeysRecords', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_clearKeysRecords_args();
    args.keys = keys;
    args.records = records;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_clearKeysRecords = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_clearKeysRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null)
};
ConcourseServiceClient.prototype.commit = function(creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_commit(creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_commit(creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_commit = function(creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('commit', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_commit_args();
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_commit = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_commit_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('commit failed: unknown result');
};
ConcourseServiceClient.prototype.describe = function(creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_describe(creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_describe(creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_describe = function(creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('describe', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_describe_args();
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_describe = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_describe_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describe failed: unknown result');
};
ConcourseServiceClient.prototype.describeTime = function(timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_describeTime(timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_describeTime(timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_describeTime = function(timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('describeTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_describeTime_args();
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_describeTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_describeTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describeTime failed: unknown result');
};
ConcourseServiceClient.prototype.describeTimestr = function(timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_describeTimestr(timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_describeTimestr(timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_describeTimestr = function(timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('describeTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_describeTimestr_args();
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_describeTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_describeTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describeTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.describeRecord = function(record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_describeRecord(record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_describeRecord(record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_describeRecord = function(record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('describeRecord', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_describeRecord_args();
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_describeRecord = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_describeRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describeRecord failed: unknown result');
};
ConcourseServiceClient.prototype.describeRecordTime = function(record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_describeRecordTime(record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_describeRecordTime(record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_describeRecordTime = function(record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('describeRecordTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_describeRecordTime_args();
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_describeRecordTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_describeRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describeRecordTime failed: unknown result');
};
ConcourseServiceClient.prototype.describeRecordTimestr = function(record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_describeRecordTimestr(record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_describeRecordTimestr(record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_describeRecordTimestr = function(record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('describeRecordTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_describeRecordTimestr_args();
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_describeRecordTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_describeRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describeRecordTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.describeRecords = function(records, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_describeRecords(records, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_describeRecords(records, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_describeRecords = function(records, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('describeRecords', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_describeRecords_args();
    args.records = records;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_describeRecords = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_describeRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describeRecords failed: unknown result');
};
ConcourseServiceClient.prototype.describeRecordsTime = function(records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_describeRecordsTime(records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_describeRecordsTime(records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_describeRecordsTime = function(records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('describeRecordsTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_describeRecordsTime_args();
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_describeRecordsTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_describeRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describeRecordsTime failed: unknown result');
};
ConcourseServiceClient.prototype.describeRecordsTimestr = function(records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_describeRecordsTimestr(records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_describeRecordsTimestr(records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_describeRecordsTimestr = function(records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('describeRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_describeRecordsTimestr_args();
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_describeRecordsTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_describeRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('describeRecordsTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.diffRecordStart = function(record, start, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_diffRecordStart(record, start, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_diffRecordStart(record, start, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_diffRecordStart = function(record, start, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('diffRecordStart', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_diffRecordStart_args();
    args.record = record;
    args.start = start;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_diffRecordStart = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_diffRecordStart_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffRecordStart failed: unknown result');
};
ConcourseServiceClient.prototype.diffRecordStartstr = function(record, start, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_diffRecordStartstr(record, start, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_diffRecordStartstr(record, start, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_diffRecordStartstr = function(record, start, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('diffRecordStartstr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_diffRecordStartstr_args();
    args.record = record;
    args.start = start;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_diffRecordStartstr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_diffRecordStartstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffRecordStartstr failed: unknown result');
};
ConcourseServiceClient.prototype.diffRecordStartEnd = function(record, start, tend, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_diffRecordStartEnd(record, start, tend, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_diffRecordStartEnd(record, start, tend, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_diffRecordStartEnd = function(record, start, tend, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('diffRecordStartEnd', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_diffRecordStartEnd_args();
    args.record = record;
    args.start = start;
    args.tend = tend;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_diffRecordStartEnd = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_diffRecordStartEnd_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffRecordStartEnd failed: unknown result');
};
ConcourseServiceClient.prototype.diffRecordStartstrEndstr = function(record, start, tend, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_diffRecordStartstrEndstr(record, start, tend, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_diffRecordStartstrEndstr(record, start, tend, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_diffRecordStartstrEndstr = function(record, start, tend, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('diffRecordStartstrEndstr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_diffRecordStartstrEndstr_args();
    args.record = record;
    args.start = start;
    args.tend = tend;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_diffRecordStartstrEndstr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_diffRecordStartstrEndstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffRecordStartstrEndstr failed: unknown result');
};
ConcourseServiceClient.prototype.diffKeyRecordStart = function(key, record, start, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_diffKeyRecordStart(key, record, start, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_diffKeyRecordStart(key, record, start, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_diffKeyRecordStart = function(key, record, start, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('diffKeyRecordStart', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_diffKeyRecordStart_args();
    args.key = key;
    args.record = record;
    args.start = start;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_diffKeyRecordStart = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_diffKeyRecordStart_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffKeyRecordStart failed: unknown result');
};
ConcourseServiceClient.prototype.diffKeyRecordStartstr = function(key, record, start, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_diffKeyRecordStartstr(key, record, start, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_diffKeyRecordStartstr(key, record, start, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_diffKeyRecordStartstr = function(key, record, start, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('diffKeyRecordStartstr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_diffKeyRecordStartstr_args();
    args.key = key;
    args.record = record;
    args.start = start;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_diffKeyRecordStartstr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_diffKeyRecordStartstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffKeyRecordStartstr failed: unknown result');
};
ConcourseServiceClient.prototype.diffKeyRecordStartEnd = function(key, record, start, tend, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_diffKeyRecordStartEnd(key, record, start, tend, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_diffKeyRecordStartEnd(key, record, start, tend, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_diffKeyRecordStartEnd = function(key, record, start, tend, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('diffKeyRecordStartEnd', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_diffKeyRecordStartEnd_args();
    args.key = key;
    args.record = record;
    args.start = start;
    args.tend = tend;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_diffKeyRecordStartEnd = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_diffKeyRecordStartEnd_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffKeyRecordStartEnd failed: unknown result');
};
ConcourseServiceClient.prototype.diffKeyRecordStartstrEndstr = function(key, record, start, tend, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_diffKeyRecordStartstrEndstr(key, record, start, tend, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_diffKeyRecordStartstrEndstr(key, record, start, tend, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_diffKeyRecordStartstrEndstr = function(key, record, start, tend, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('diffKeyRecordStartstrEndstr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_diffKeyRecordStartstrEndstr_args();
    args.key = key;
    args.record = record;
    args.start = start;
    args.tend = tend;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_diffKeyRecordStartstrEndstr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_diffKeyRecordStartstrEndstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffKeyRecordStartstrEndstr failed: unknown result');
};
ConcourseServiceClient.prototype.diffKeyStart = function(key, start, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_diffKeyStart(key, start, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_diffKeyStart(key, start, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_diffKeyStart = function(key, start, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('diffKeyStart', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_diffKeyStart_args();
    args.key = key;
    args.start = start;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_diffKeyStart = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_diffKeyStart_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffKeyStart failed: unknown result');
};
ConcourseServiceClient.prototype.diffKeyStartstr = function(key, start, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_diffKeyStartstr(key, start, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_diffKeyStartstr(key, start, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_diffKeyStartstr = function(key, start, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('diffKeyStartstr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_diffKeyStartstr_args();
    args.key = key;
    args.start = start;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_diffKeyStartstr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_diffKeyStartstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffKeyStartstr failed: unknown result');
};
ConcourseServiceClient.prototype.diffKeyStartEnd = function(key, start, tend, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_diffKeyStartEnd(key, start, tend, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_diffKeyStartEnd(key, start, tend, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_diffKeyStartEnd = function(key, start, tend, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('diffKeyStartEnd', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_diffKeyStartEnd_args();
    args.key = key;
    args.start = start;
    args.tend = tend;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_diffKeyStartEnd = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_diffKeyStartEnd_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffKeyStartEnd failed: unknown result');
};
ConcourseServiceClient.prototype.diffKeyStartstrEndstr = function(key, start, tend, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_diffKeyStartstrEndstr(key, start, tend, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_diffKeyStartstrEndstr(key, start, tend, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_diffKeyStartstrEndstr = function(key, start, tend, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('diffKeyStartstrEndstr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_diffKeyStartstrEndstr_args();
    args.key = key;
    args.start = start;
    args.tend = tend;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_diffKeyStartstrEndstr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_diffKeyStartstrEndstr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('diffKeyStartstrEndstr failed: unknown result');
};
ConcourseServiceClient.prototype.invokePlugin = function(id, method, params, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_invokePlugin(id, method, params, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_invokePlugin(id, method, params, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_invokePlugin = function(id, method, params, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('invokePlugin', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_invokePlugin_args();
    args.id = id;
    args.method = method;
    args.params = params;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_invokePlugin = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_invokePlugin_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('invokePlugin failed: unknown result');
};
ConcourseServiceClient.prototype.login = function(username, password, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_login(username, password, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_login(username, password, environment);
    }
};

ConcourseServiceClient.prototype.send_login = function(username, password, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('login', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_login_args();
    args.username = username;
    args.password = password;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_login = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_login_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('login failed: unknown result');
};
ConcourseServiceClient.prototype.logout = function(token, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_logout(token, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_logout(token, environment);
    }
};

ConcourseServiceClient.prototype.send_logout = function(token, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('logout', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_logout_args();
    args.token = token;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_logout = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_logout_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    callback(null)
};
ConcourseServiceClient.prototype.stage = function(token, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_stage(token, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_stage(token, environment);
    }
};

ConcourseServiceClient.prototype.send_stage = function(token, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('stage', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_stage_args();
    args.token = token;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_stage = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_stage_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('stage failed: unknown result');
};
ConcourseServiceClient.prototype.insertJson = function(json, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_insertJson(json, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_insertJson(json, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_insertJson = function(json, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('insertJson', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_insertJson_args();
    args.json = json;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_insertJson = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_insertJson_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.ex5) {
      return callback(result.ex5);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('insertJson failed: unknown result');
};
ConcourseServiceClient.prototype.insertJsonRecord = function(json, record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_insertJsonRecord(json, record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_insertJsonRecord(json, record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_insertJsonRecord = function(json, record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('insertJsonRecord', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_insertJsonRecord_args();
    args.json = json;
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_insertJsonRecord = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_insertJsonRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.ex5) {
      return callback(result.ex5);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('insertJsonRecord failed: unknown result');
};
ConcourseServiceClient.prototype.insertJsonRecords = function(json, records, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_insertJsonRecords(json, records, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_insertJsonRecords(json, records, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_insertJsonRecords = function(json, records, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('insertJsonRecords', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_insertJsonRecords_args();
    args.json = json;
    args.records = records;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_insertJsonRecords = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_insertJsonRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.ex5) {
      return callback(result.ex5);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('insertJsonRecords failed: unknown result');
};
ConcourseServiceClient.prototype.removeKeyValueRecord = function(key, value, record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_removeKeyValueRecord(key, value, record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_removeKeyValueRecord(key, value, record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_removeKeyValueRecord = function(key, value, record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('removeKeyValueRecord', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_removeKeyValueRecord_args();
    args.key = key;
    args.value = value;
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_removeKeyValueRecord = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_removeKeyValueRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('removeKeyValueRecord failed: unknown result');
};
ConcourseServiceClient.prototype.removeKeyValueRecords = function(key, value, records, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_removeKeyValueRecords(key, value, records, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_removeKeyValueRecords(key, value, records, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_removeKeyValueRecords = function(key, value, records, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('removeKeyValueRecords', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_removeKeyValueRecords_args();
    args.key = key;
    args.value = value;
    args.records = records;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_removeKeyValueRecords = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_removeKeyValueRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('removeKeyValueRecords failed: unknown result');
};
ConcourseServiceClient.prototype.setKeyValueRecord = function(key, value, record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_setKeyValueRecord(key, value, record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_setKeyValueRecord(key, value, record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_setKeyValueRecord = function(key, value, record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('setKeyValueRecord', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_setKeyValueRecord_args();
    args.key = key;
    args.value = value;
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_setKeyValueRecord = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_setKeyValueRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    callback(null)
};
ConcourseServiceClient.prototype.setKeyValue = function(key, value, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_setKeyValue(key, value, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_setKeyValue(key, value, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_setKeyValue = function(key, value, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('setKeyValue', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_setKeyValue_args();
    args.key = key;
    args.value = value;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_setKeyValue = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_setKeyValue_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('setKeyValue failed: unknown result');
};
ConcourseServiceClient.prototype.setKeyValueRecords = function(key, value, records, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_setKeyValueRecords(key, value, records, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_setKeyValueRecords(key, value, records, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_setKeyValueRecords = function(key, value, records, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('setKeyValueRecords', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_setKeyValueRecords_args();
    args.key = key;
    args.value = value;
    args.records = records;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_setKeyValueRecords = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_setKeyValueRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    callback(null)
};
ConcourseServiceClient.prototype.reconcileKeyRecordValues = function(key, record, values, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_reconcileKeyRecordValues(key, record, values, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_reconcileKeyRecordValues(key, record, values, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_reconcileKeyRecordValues = function(key, record, values, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('reconcileKeyRecordValues', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_reconcileKeyRecordValues_args();
    args.key = key;
    args.record = record;
    args.values = values;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_reconcileKeyRecordValues = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_reconcileKeyRecordValues_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    callback(null)
};
ConcourseServiceClient.prototype.inventory = function(creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_inventory(creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_inventory(creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_inventory = function(creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('inventory', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_inventory_args();
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_inventory = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_inventory_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('inventory failed: unknown result');
};
ConcourseServiceClient.prototype.selectRecord = function(record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectRecord(record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectRecord(record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectRecord = function(record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectRecord', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectRecord_args();
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectRecord = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectRecord failed: unknown result');
};
ConcourseServiceClient.prototype.selectRecords = function(records, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectRecords(records, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectRecords(records, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectRecords = function(records, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectRecords', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectRecords_args();
    args.records = records;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectRecords = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectRecords failed: unknown result');
};
ConcourseServiceClient.prototype.selectRecordTime = function(record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectRecordTime(record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectRecordTime(record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectRecordTime = function(record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectRecordTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectRecordTime_args();
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectRecordTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectRecordTime failed: unknown result');
};
ConcourseServiceClient.prototype.selectRecordTimestr = function(record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectRecordTimestr(record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectRecordTimestr(record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectRecordTimestr = function(record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectRecordTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectRecordTimestr_args();
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectRecordTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectRecordTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.selectRecordsTime = function(records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectRecordsTime(records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectRecordsTime(records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectRecordsTime = function(records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectRecordsTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectRecordsTime_args();
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectRecordsTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectRecordsTime failed: unknown result');
};
ConcourseServiceClient.prototype.selectRecordsTimestr = function(records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectRecordsTimestr(records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectRecordsTimestr(records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectRecordsTimestr = function(records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectRecordsTimestr_args();
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectRecordsTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectRecordsTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.selectKeyRecord = function(key, record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectKeyRecord(key, record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectKeyRecord(key, record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectKeyRecord = function(key, record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectKeyRecord', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectKeyRecord_args();
    args.key = key;
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectKeyRecord = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyRecord failed: unknown result');
};
ConcourseServiceClient.prototype.selectKeyRecordTime = function(key, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectKeyRecordTime(key, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectKeyRecordTime = function(key, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectKeyRecordTime_args();
    args.key = key;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectKeyRecordTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyRecordTime failed: unknown result');
};
ConcourseServiceClient.prototype.selectKeyRecordTimestr = function(key, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectKeyRecordTimestr = function(key, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectKeyRecordTimestr_args();
    args.key = key;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectKeyRecordTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyRecordTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.selectKeysRecord = function(keys, record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectKeysRecord(keys, record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectKeysRecord(keys, record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectKeysRecord = function(keys, record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectKeysRecord', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectKeysRecord_args();
    args.keys = keys;
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectKeysRecord = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectKeysRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysRecord failed: unknown result');
};
ConcourseServiceClient.prototype.selectKeysRecordTime = function(keys, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectKeysRecordTime(keys, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectKeysRecordTime(keys, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectKeysRecordTime = function(keys, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectKeysRecordTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectKeysRecordTime_args();
    args.keys = keys;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectKeysRecordTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectKeysRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysRecordTime failed: unknown result');
};
ConcourseServiceClient.prototype.selectKeysRecordTimestr = function(keys, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectKeysRecordTimestr(keys, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectKeysRecordTimestr(keys, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectKeysRecordTimestr = function(keys, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectKeysRecordTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectKeysRecordTimestr_args();
    args.keys = keys;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectKeysRecordTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectKeysRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysRecordTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.selectKeysRecords = function(keys, records, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectKeysRecords(keys, records, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectKeysRecords(keys, records, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectKeysRecords = function(keys, records, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectKeysRecords', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectKeysRecords_args();
    args.keys = keys;
    args.records = records;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectKeysRecords = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectKeysRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysRecords failed: unknown result');
};
ConcourseServiceClient.prototype.selectKeyRecords = function(key, records, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectKeyRecords(key, records, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectKeyRecords(key, records, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectKeyRecords = function(key, records, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectKeyRecords', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectKeyRecords_args();
    args.key = key;
    args.records = records;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectKeyRecords = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyRecords failed: unknown result');
};
ConcourseServiceClient.prototype.selectKeyRecordsTime = function(key, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectKeyRecordsTime = function(key, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectKeyRecordsTime_args();
    args.key = key;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectKeyRecordsTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyRecordsTime failed: unknown result');
};
ConcourseServiceClient.prototype.selectKeyRecordsTimestr = function(key, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectKeyRecordsTimestr = function(key, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectKeyRecordsTimestr_args();
    args.key = key;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectKeyRecordsTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyRecordsTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.selectKeysRecordsTime = function(keys, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectKeysRecordsTime(keys, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectKeysRecordsTime(keys, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectKeysRecordsTime = function(keys, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectKeysRecordsTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectKeysRecordsTime_args();
    args.keys = keys;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectKeysRecordsTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectKeysRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysRecordsTime failed: unknown result');
};
ConcourseServiceClient.prototype.selectKeysRecordsTimestr = function(keys, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectKeysRecordsTimestr(keys, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectKeysRecordsTimestr(keys, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectKeysRecordsTimestr = function(keys, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectKeysRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectKeysRecordsTimestr_args();
    args.keys = keys;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectKeysRecordsTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectKeysRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysRecordsTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.selectCriteria = function(criteria, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectCriteria(criteria, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectCriteria(criteria, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectCriteria = function(criteria, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectCriteria', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectCriteria_args();
    args.criteria = criteria;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectCriteria = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectCriteria failed: unknown result');
};
ConcourseServiceClient.prototype.selectCcl = function(ccl, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectCcl(ccl, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectCcl(ccl, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectCcl = function(ccl, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectCcl', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectCcl_args();
    args.ccl = ccl;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectCcl = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectCcl failed: unknown result');
};
ConcourseServiceClient.prototype.selectCriteriaTime = function(criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectCriteriaTime(criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectCriteriaTime(criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectCriteriaTime = function(criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectCriteriaTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectCriteriaTime_args();
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectCriteriaTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectCriteriaTime failed: unknown result');
};
ConcourseServiceClient.prototype.selectCriteriaTimestr = function(criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectCriteriaTimestr(criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectCriteriaTimestr(criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectCriteriaTimestr = function(criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectCriteriaTimestr_args();
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectCriteriaTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectCriteriaTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.selectCclTime = function(ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectCclTime(ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectCclTime(ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectCclTime = function(ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectCclTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectCclTime_args();
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectCclTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectCclTime failed: unknown result');
};
ConcourseServiceClient.prototype.selectCclTimestr = function(ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectCclTimestr(ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectCclTimestr(ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectCclTimestr = function(ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectCclTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectCclTimestr_args();
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectCclTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectCclTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.selectKeyCriteria = function(key, criteria, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectKeyCriteria(key, criteria, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectKeyCriteria(key, criteria, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectKeyCriteria = function(key, criteria, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectKeyCriteria', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectKeyCriteria_args();
    args.key = key;
    args.criteria = criteria;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectKeyCriteria = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectKeyCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyCriteria failed: unknown result');
};
ConcourseServiceClient.prototype.selectKeyCcl = function(key, ccl, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectKeyCcl(key, ccl, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectKeyCcl(key, ccl, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectKeyCcl = function(key, ccl, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectKeyCcl', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectKeyCcl_args();
    args.key = key;
    args.ccl = ccl;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectKeyCcl = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectKeyCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyCcl failed: unknown result');
};
ConcourseServiceClient.prototype.selectKeyCriteriaTime = function(key, criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectKeyCriteriaTime = function(key, criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectKeyCriteriaTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectKeyCriteriaTime_args();
    args.key = key;
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectKeyCriteriaTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectKeyCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyCriteriaTime failed: unknown result');
};
ConcourseServiceClient.prototype.selectKeyCriteriaTimestr = function(key, criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectKeyCriteriaTimestr = function(key, criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectKeyCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectKeyCriteriaTimestr_args();
    args.key = key;
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectKeyCriteriaTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectKeyCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyCriteriaTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.selectKeyCclTime = function(key, ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectKeyCclTime = function(key, ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectKeyCclTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectKeyCclTime_args();
    args.key = key;
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectKeyCclTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectKeyCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyCclTime failed: unknown result');
};
ConcourseServiceClient.prototype.selectKeyCclTimestr = function(key, ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectKeyCclTimestr = function(key, ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectKeyCclTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectKeyCclTimestr_args();
    args.key = key;
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectKeyCclTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectKeyCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeyCclTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.selectKeysCriteria = function(keys, criteria, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectKeysCriteria(keys, criteria, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectKeysCriteria(keys, criteria, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectKeysCriteria = function(keys, criteria, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectKeysCriteria', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectKeysCriteria_args();
    args.keys = keys;
    args.criteria = criteria;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectKeysCriteria = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectKeysCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysCriteria failed: unknown result');
};
ConcourseServiceClient.prototype.selectKeysCcl = function(keys, ccl, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectKeysCcl(keys, ccl, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectKeysCcl(keys, ccl, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectKeysCcl = function(keys, ccl, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectKeysCcl', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectKeysCcl_args();
    args.keys = keys;
    args.ccl = ccl;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectKeysCcl = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectKeysCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysCcl failed: unknown result');
};
ConcourseServiceClient.prototype.selectKeysCriteriaTime = function(keys, criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectKeysCriteriaTime(keys, criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectKeysCriteriaTime(keys, criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectKeysCriteriaTime = function(keys, criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectKeysCriteriaTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectKeysCriteriaTime_args();
    args.keys = keys;
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectKeysCriteriaTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectKeysCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysCriteriaTime failed: unknown result');
};
ConcourseServiceClient.prototype.selectKeysCriteriaTimestr = function(keys, criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectKeysCriteriaTimestr(keys, criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectKeysCriteriaTimestr(keys, criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectKeysCriteriaTimestr = function(keys, criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectKeysCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectKeysCriteriaTimestr_args();
    args.keys = keys;
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectKeysCriteriaTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectKeysCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysCriteriaTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.selectKeysCclTime = function(keys, ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectKeysCclTime(keys, ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectKeysCclTime(keys, ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectKeysCclTime = function(keys, ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectKeysCclTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectKeysCclTime_args();
    args.keys = keys;
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectKeysCclTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectKeysCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysCclTime failed: unknown result');
};
ConcourseServiceClient.prototype.selectKeysCclTimestr = function(keys, ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_selectKeysCclTimestr(keys, ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_selectKeysCclTimestr(keys, ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_selectKeysCclTimestr = function(keys, ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('selectKeysCclTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_selectKeysCclTimestr_args();
    args.keys = keys;
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_selectKeysCclTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_selectKeysCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('selectKeysCclTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.getKeyRecord = function(key, record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getKeyRecord(key, record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getKeyRecord(key, record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getKeyRecord = function(key, record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getKeyRecord', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getKeyRecord_args();
    args.key = key;
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getKeyRecord = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyRecord failed: unknown result');
};
ConcourseServiceClient.prototype.getKeyRecordTime = function(key, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getKeyRecordTime(key, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getKeyRecordTime = function(key, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getKeyRecordTime_args();
    args.key = key;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getKeyRecordTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyRecordTime failed: unknown result');
};
ConcourseServiceClient.prototype.getKeyRecordTimestr = function(key, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getKeyRecordTimestr = function(key, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getKeyRecordTimestr_args();
    args.key = key;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getKeyRecordTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyRecordTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.getKeysRecord = function(keys, record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getKeysRecord(keys, record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getKeysRecord(keys, record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getKeysRecord = function(keys, record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getKeysRecord', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getKeysRecord_args();
    args.keys = keys;
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getKeysRecord = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getKeysRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysRecord failed: unknown result');
};
ConcourseServiceClient.prototype.getKeysRecordTime = function(keys, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getKeysRecordTime(keys, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getKeysRecordTime(keys, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getKeysRecordTime = function(keys, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getKeysRecordTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getKeysRecordTime_args();
    args.keys = keys;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getKeysRecordTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getKeysRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysRecordTime failed: unknown result');
};
ConcourseServiceClient.prototype.getKeysRecordTimestr = function(keys, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getKeysRecordTimestr(keys, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getKeysRecordTimestr(keys, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getKeysRecordTimestr = function(keys, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getKeysRecordTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getKeysRecordTimestr_args();
    args.keys = keys;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getKeysRecordTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getKeysRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysRecordTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.getKeysRecords = function(keys, records, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getKeysRecords(keys, records, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getKeysRecords(keys, records, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getKeysRecords = function(keys, records, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getKeysRecords', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getKeysRecords_args();
    args.keys = keys;
    args.records = records;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getKeysRecords = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getKeysRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysRecords failed: unknown result');
};
ConcourseServiceClient.prototype.getKeyRecords = function(key, records, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getKeyRecords(key, records, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getKeyRecords(key, records, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getKeyRecords = function(key, records, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getKeyRecords', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getKeyRecords_args();
    args.key = key;
    args.records = records;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getKeyRecords = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyRecords failed: unknown result');
};
ConcourseServiceClient.prototype.getKeyRecordsTime = function(key, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getKeyRecordsTime = function(key, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getKeyRecordsTime_args();
    args.key = key;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getKeyRecordsTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyRecordsTime failed: unknown result');
};
ConcourseServiceClient.prototype.getKeyRecordsTimestr = function(key, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getKeyRecordsTimestr = function(key, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getKeyRecordsTimestr_args();
    args.key = key;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getKeyRecordsTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyRecordsTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.getKeysRecordsTime = function(keys, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getKeysRecordsTime(keys, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getKeysRecordsTime(keys, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getKeysRecordsTime = function(keys, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getKeysRecordsTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getKeysRecordsTime_args();
    args.keys = keys;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getKeysRecordsTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getKeysRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysRecordsTime failed: unknown result');
};
ConcourseServiceClient.prototype.getKeysRecordsTimestr = function(keys, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getKeysRecordsTimestr(keys, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getKeysRecordsTimestr(keys, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getKeysRecordsTimestr = function(keys, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getKeysRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getKeysRecordsTimestr_args();
    args.keys = keys;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getKeysRecordsTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getKeysRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysRecordsTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.getKeyCriteria = function(key, criteria, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getKeyCriteria(key, criteria, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getKeyCriteria(key, criteria, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getKeyCriteria = function(key, criteria, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getKeyCriteria', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getKeyCriteria_args();
    args.key = key;
    args.criteria = criteria;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getKeyCriteria = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getKeyCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyCriteria failed: unknown result');
};
ConcourseServiceClient.prototype.getCriteria = function(criteria, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getCriteria(criteria, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getCriteria(criteria, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getCriteria = function(criteria, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getCriteria', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getCriteria_args();
    args.criteria = criteria;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getCriteria = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCriteria failed: unknown result');
};
ConcourseServiceClient.prototype.getCcl = function(ccl, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getCcl(ccl, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getCcl(ccl, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getCcl = function(ccl, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getCcl', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getCcl_args();
    args.ccl = ccl;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getCcl = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCcl failed: unknown result');
};
ConcourseServiceClient.prototype.getCriteriaTime = function(criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getCriteriaTime(criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getCriteriaTime(criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getCriteriaTime = function(criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getCriteriaTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getCriteriaTime_args();
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getCriteriaTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCriteriaTime failed: unknown result');
};
ConcourseServiceClient.prototype.getCriteriaTimestr = function(criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getCriteriaTimestr(criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getCriteriaTimestr(criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getCriteriaTimestr = function(criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getCriteriaTimestr_args();
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getCriteriaTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCriteriaTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.getCclTime = function(ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getCclTime(ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getCclTime(ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getCclTime = function(ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getCclTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getCclTime_args();
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getCclTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCclTime failed: unknown result');
};
ConcourseServiceClient.prototype.getCclTimestr = function(ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getCclTimestr(ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getCclTimestr(ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getCclTimestr = function(ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getCclTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getCclTimestr_args();
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getCclTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getCclTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.getKeyCcl = function(key, ccl, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getKeyCcl(key, ccl, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getKeyCcl(key, ccl, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getKeyCcl = function(key, ccl, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getKeyCcl', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getKeyCcl_args();
    args.key = key;
    args.ccl = ccl;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getKeyCcl = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getKeyCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyCcl failed: unknown result');
};
ConcourseServiceClient.prototype.getKeyCriteriaTime = function(key, criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getKeyCriteriaTime = function(key, criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getKeyCriteriaTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getKeyCriteriaTime_args();
    args.key = key;
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getKeyCriteriaTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getKeyCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyCriteriaTime failed: unknown result');
};
ConcourseServiceClient.prototype.getKeyCriteriaTimestr = function(key, criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getKeyCriteriaTimestr = function(key, criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getKeyCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getKeyCriteriaTimestr_args();
    args.key = key;
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getKeyCriteriaTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getKeyCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyCriteriaTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.getKeyCclTime = function(key, ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getKeyCclTime = function(key, ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getKeyCclTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getKeyCclTime_args();
    args.key = key;
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getKeyCclTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getKeyCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyCclTime failed: unknown result');
};
ConcourseServiceClient.prototype.getKeyCclTimestr = function(key, ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getKeyCclTimestr = function(key, ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getKeyCclTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getKeyCclTimestr_args();
    args.key = key;
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getKeyCclTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getKeyCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeyCclTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.getKeysCriteria = function(keys, criteria, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getKeysCriteria(keys, criteria, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getKeysCriteria(keys, criteria, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getKeysCriteria = function(keys, criteria, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getKeysCriteria', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getKeysCriteria_args();
    args.keys = keys;
    args.criteria = criteria;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getKeysCriteria = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getKeysCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysCriteria failed: unknown result');
};
ConcourseServiceClient.prototype.getKeysCcl = function(keys, ccl, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getKeysCcl(keys, ccl, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getKeysCcl(keys, ccl, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getKeysCcl = function(keys, ccl, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getKeysCcl', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getKeysCcl_args();
    args.keys = keys;
    args.ccl = ccl;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getKeysCcl = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getKeysCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysCcl failed: unknown result');
};
ConcourseServiceClient.prototype.getKeysCriteriaTime = function(keys, criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getKeysCriteriaTime(keys, criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getKeysCriteriaTime(keys, criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getKeysCriteriaTime = function(keys, criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getKeysCriteriaTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getKeysCriteriaTime_args();
    args.keys = keys;
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getKeysCriteriaTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getKeysCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysCriteriaTime failed: unknown result');
};
ConcourseServiceClient.prototype.getKeysCriteriaTimestr = function(keys, criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getKeysCriteriaTimestr(keys, criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getKeysCriteriaTimestr(keys, criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getKeysCriteriaTimestr = function(keys, criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getKeysCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getKeysCriteriaTimestr_args();
    args.keys = keys;
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getKeysCriteriaTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getKeysCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysCriteriaTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.getKeysCclTime = function(keys, ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getKeysCclTime(keys, ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getKeysCclTime(keys, ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getKeysCclTime = function(keys, ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getKeysCclTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getKeysCclTime_args();
    args.keys = keys;
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getKeysCclTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getKeysCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysCclTime failed: unknown result');
};
ConcourseServiceClient.prototype.getKeysCclTimestr = function(keys, ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getKeysCclTimestr(keys, ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getKeysCclTimestr(keys, ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_getKeysCclTimestr = function(keys, ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getKeysCclTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getKeysCclTimestr_args();
    args.keys = keys;
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getKeysCclTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getKeysCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getKeysCclTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.verifyKeyValueRecord = function(key, value, record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_verifyKeyValueRecord(key, value, record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_verifyKeyValueRecord(key, value, record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_verifyKeyValueRecord = function(key, value, record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('verifyKeyValueRecord', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_verifyKeyValueRecord_args();
    args.key = key;
    args.value = value;
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_verifyKeyValueRecord = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_verifyKeyValueRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('verifyKeyValueRecord failed: unknown result');
};
ConcourseServiceClient.prototype.verifyKeyValueRecordTime = function(key, value, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_verifyKeyValueRecordTime(key, value, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_verifyKeyValueRecordTime(key, value, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_verifyKeyValueRecordTime = function(key, value, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('verifyKeyValueRecordTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_verifyKeyValueRecordTime_args();
    args.key = key;
    args.value = value;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_verifyKeyValueRecordTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_verifyKeyValueRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('verifyKeyValueRecordTime failed: unknown result');
};
ConcourseServiceClient.prototype.verifyKeyValueRecordTimestr = function(key, value, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_verifyKeyValueRecordTimestr(key, value, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_verifyKeyValueRecordTimestr(key, value, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_verifyKeyValueRecordTimestr = function(key, value, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('verifyKeyValueRecordTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_verifyKeyValueRecordTimestr_args();
    args.key = key;
    args.value = value;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_verifyKeyValueRecordTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_verifyKeyValueRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('verifyKeyValueRecordTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.jsonifyRecords = function(records, identifier, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_jsonifyRecords(records, identifier, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_jsonifyRecords(records, identifier, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_jsonifyRecords = function(records, identifier, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('jsonifyRecords', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_jsonifyRecords_args();
    args.records = records;
    args.identifier = identifier;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_jsonifyRecords = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_jsonifyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('jsonifyRecords failed: unknown result');
};
ConcourseServiceClient.prototype.jsonifyRecordsTime = function(records, timestamp, identifier, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_jsonifyRecordsTime(records, timestamp, identifier, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_jsonifyRecordsTime(records, timestamp, identifier, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_jsonifyRecordsTime = function(records, timestamp, identifier, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('jsonifyRecordsTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_jsonifyRecordsTime_args();
    args.records = records;
    args.timestamp = timestamp;
    args.identifier = identifier;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_jsonifyRecordsTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_jsonifyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('jsonifyRecordsTime failed: unknown result');
};
ConcourseServiceClient.prototype.jsonifyRecordsTimestr = function(records, timestamp, identifier, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_jsonifyRecordsTimestr(records, timestamp, identifier, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_jsonifyRecordsTimestr(records, timestamp, identifier, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_jsonifyRecordsTimestr = function(records, timestamp, identifier, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('jsonifyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_jsonifyRecordsTimestr_args();
    args.records = records;
    args.timestamp = timestamp;
    args.identifier = identifier;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_jsonifyRecordsTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_jsonifyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('jsonifyRecordsTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.findCriteria = function(criteria, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_findCriteria(criteria, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_findCriteria(criteria, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_findCriteria = function(criteria, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('findCriteria', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_findCriteria_args();
    args.criteria = criteria;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_findCriteria = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_findCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findCriteria failed: unknown result');
};
ConcourseServiceClient.prototype.findCcl = function(ccl, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_findCcl(ccl, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_findCcl(ccl, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_findCcl = function(ccl, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('findCcl', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_findCcl_args();
    args.ccl = ccl;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_findCcl = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_findCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findCcl failed: unknown result');
};
ConcourseServiceClient.prototype.findKeyOperatorValues = function(key, operator, values, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_findKeyOperatorValues(key, operator, values, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_findKeyOperatorValues(key, operator, values, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_findKeyOperatorValues = function(key, operator, values, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('findKeyOperatorValues', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_findKeyOperatorValues_args();
    args.key = key;
    args.operator = operator;
    args.values = values;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_findKeyOperatorValues = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_findKeyOperatorValues_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findKeyOperatorValues failed: unknown result');
};
ConcourseServiceClient.prototype.findKeyOperatorValuesTime = function(key, operator, values, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_findKeyOperatorValuesTime(key, operator, values, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_findKeyOperatorValuesTime(key, operator, values, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_findKeyOperatorValuesTime = function(key, operator, values, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('findKeyOperatorValuesTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_findKeyOperatorValuesTime_args();
    args.key = key;
    args.operator = operator;
    args.values = values;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_findKeyOperatorValuesTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_findKeyOperatorValuesTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findKeyOperatorValuesTime failed: unknown result');
};
ConcourseServiceClient.prototype.findKeyOperatorValuesTimestr = function(key, operator, values, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_findKeyOperatorValuesTimestr(key, operator, values, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_findKeyOperatorValuesTimestr(key, operator, values, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_findKeyOperatorValuesTimestr = function(key, operator, values, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('findKeyOperatorValuesTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_findKeyOperatorValuesTimestr_args();
    args.key = key;
    args.operator = operator;
    args.values = values;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_findKeyOperatorValuesTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_findKeyOperatorValuesTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findKeyOperatorValuesTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.findKeyOperatorstrValues = function(key, operator, values, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_findKeyOperatorstrValues(key, operator, values, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_findKeyOperatorstrValues(key, operator, values, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_findKeyOperatorstrValues = function(key, operator, values, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('findKeyOperatorstrValues', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_findKeyOperatorstrValues_args();
    args.key = key;
    args.operator = operator;
    args.values = values;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_findKeyOperatorstrValues = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_findKeyOperatorstrValues_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findKeyOperatorstrValues failed: unknown result');
};
ConcourseServiceClient.prototype.findKeyOperatorstrValuesTime = function(key, operator, values, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_findKeyOperatorstrValuesTime(key, operator, values, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_findKeyOperatorstrValuesTime(key, operator, values, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_findKeyOperatorstrValuesTime = function(key, operator, values, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('findKeyOperatorstrValuesTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_findKeyOperatorstrValuesTime_args();
    args.key = key;
    args.operator = operator;
    args.values = values;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_findKeyOperatorstrValuesTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_findKeyOperatorstrValuesTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findKeyOperatorstrValuesTime failed: unknown result');
};
ConcourseServiceClient.prototype.findKeyOperatorstrValuesTimestr = function(key, operator, values, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_findKeyOperatorstrValuesTimestr(key, operator, values, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_findKeyOperatorstrValuesTimestr(key, operator, values, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_findKeyOperatorstrValuesTimestr = function(key, operator, values, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('findKeyOperatorstrValuesTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_findKeyOperatorstrValuesTimestr_args();
    args.key = key;
    args.operator = operator;
    args.values = values;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_findKeyOperatorstrValuesTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_findKeyOperatorstrValuesTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findKeyOperatorstrValuesTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.search = function(key, query, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_search(key, query, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_search(key, query, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_search = function(key, query, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('search', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_search_args();
    args.key = key;
    args.query = query;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_search = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_search_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('search failed: unknown result');
};
ConcourseServiceClient.prototype.revertKeysRecordsTime = function(keys, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_revertKeysRecordsTime(keys, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_revertKeysRecordsTime(keys, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_revertKeysRecordsTime = function(keys, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('revertKeysRecordsTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_revertKeysRecordsTime_args();
    args.keys = keys;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_revertKeysRecordsTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_revertKeysRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null)
};
ConcourseServiceClient.prototype.revertKeysRecordsTimestr = function(keys, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_revertKeysRecordsTimestr(keys, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_revertKeysRecordsTimestr(keys, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_revertKeysRecordsTimestr = function(keys, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('revertKeysRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_revertKeysRecordsTimestr_args();
    args.keys = keys;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_revertKeysRecordsTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_revertKeysRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    callback(null)
};
ConcourseServiceClient.prototype.revertKeysRecordTime = function(keys, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_revertKeysRecordTime(keys, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_revertKeysRecordTime(keys, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_revertKeysRecordTime = function(keys, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('revertKeysRecordTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_revertKeysRecordTime_args();
    args.keys = keys;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_revertKeysRecordTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_revertKeysRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null)
};
ConcourseServiceClient.prototype.revertKeysRecordTimestr = function(keys, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_revertKeysRecordTimestr(keys, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_revertKeysRecordTimestr(keys, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_revertKeysRecordTimestr = function(keys, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('revertKeysRecordTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_revertKeysRecordTimestr_args();
    args.keys = keys;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_revertKeysRecordTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_revertKeysRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    callback(null)
};
ConcourseServiceClient.prototype.revertKeyRecordsTime = function(key, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_revertKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_revertKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_revertKeyRecordsTime = function(key, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('revertKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_revertKeyRecordsTime_args();
    args.key = key;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_revertKeyRecordsTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_revertKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null)
};
ConcourseServiceClient.prototype.revertKeyRecordsTimestr = function(key, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_revertKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_revertKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_revertKeyRecordsTimestr = function(key, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('revertKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_revertKeyRecordsTimestr_args();
    args.key = key;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_revertKeyRecordsTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_revertKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    callback(null)
};
ConcourseServiceClient.prototype.revertKeyRecordTime = function(key, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_revertKeyRecordTime(key, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_revertKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_revertKeyRecordTime = function(key, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('revertKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_revertKeyRecordTime_args();
    args.key = key;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_revertKeyRecordTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_revertKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    callback(null)
};
ConcourseServiceClient.prototype.revertKeyRecordTimestr = function(key, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_revertKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_revertKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_revertKeyRecordTimestr = function(key, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('revertKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_revertKeyRecordTimestr_args();
    args.key = key;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_revertKeyRecordTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_revertKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    callback(null)
};
ConcourseServiceClient.prototype.pingRecords = function(records, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_pingRecords(records, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_pingRecords(records, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_pingRecords = function(records, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('pingRecords', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_pingRecords_args();
    args.records = records;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_pingRecords = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_pingRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('pingRecords failed: unknown result');
};
ConcourseServiceClient.prototype.pingRecord = function(record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_pingRecord(record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_pingRecord(record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_pingRecord = function(record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('pingRecord', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_pingRecord_args();
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_pingRecord = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_pingRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('pingRecord failed: unknown result');
};
ConcourseServiceClient.prototype.verifyAndSwap = function(key, expected, record, replacement, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_verifyAndSwap(key, expected, record, replacement, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_verifyAndSwap(key, expected, record, replacement, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_verifyAndSwap = function(key, expected, record, replacement, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('verifyAndSwap', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_verifyAndSwap_args();
    args.key = key;
    args.expected = expected;
    args.record = record;
    args.replacement = replacement;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_verifyAndSwap = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_verifyAndSwap_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('verifyAndSwap failed: unknown result');
};
ConcourseServiceClient.prototype.verifyOrSet = function(key, value, record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_verifyOrSet(key, value, record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_verifyOrSet(key, value, record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_verifyOrSet = function(key, value, record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('verifyOrSet', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_verifyOrSet_args();
    args.key = key;
    args.value = value;
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_verifyOrSet = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_verifyOrSet_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    callback(null)
};
ConcourseServiceClient.prototype.findOrAddKeyValue = function(key, value, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_findOrAddKeyValue(key, value, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_findOrAddKeyValue(key, value, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_findOrAddKeyValue = function(key, value, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('findOrAddKeyValue', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_findOrAddKeyValue_args();
    args.key = key;
    args.value = value;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_findOrAddKeyValue = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_findOrAddKeyValue_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.ex5) {
      return callback(result.ex5);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findOrAddKeyValue failed: unknown result');
};
ConcourseServiceClient.prototype.findOrInsertCriteriaJson = function(criteria, json, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_findOrInsertCriteriaJson(criteria, json, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_findOrInsertCriteriaJson(criteria, json, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_findOrInsertCriteriaJson = function(criteria, json, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('findOrInsertCriteriaJson', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_findOrInsertCriteriaJson_args();
    args.criteria = criteria;
    args.json = json;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_findOrInsertCriteriaJson = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_findOrInsertCriteriaJson_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findOrInsertCriteriaJson failed: unknown result');
};
ConcourseServiceClient.prototype.findOrInsertCclJson = function(ccl, json, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_findOrInsertCclJson(ccl, json, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_findOrInsertCclJson(ccl, json, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_findOrInsertCclJson = function(ccl, json, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('findOrInsertCclJson', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_findOrInsertCclJson_args();
    args.ccl = ccl;
    args.json = json;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_findOrInsertCclJson = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_findOrInsertCclJson_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.ex5) {
      return callback(result.ex5);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('findOrInsertCclJson failed: unknown result');
};
ConcourseServiceClient.prototype.sumKeyRecord = function(key, record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_sumKeyRecord(key, record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_sumKeyRecord(key, record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_sumKeyRecord = function(key, record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('sumKeyRecord', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_sumKeyRecord_args();
    args.key = key;
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_sumKeyRecord = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_sumKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyRecord failed: unknown result');
};
ConcourseServiceClient.prototype.sumKeyRecordTime = function(key, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_sumKeyRecordTime(key, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_sumKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_sumKeyRecordTime = function(key, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('sumKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_sumKeyRecordTime_args();
    args.key = key;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_sumKeyRecordTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_sumKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyRecordTime failed: unknown result');
};
ConcourseServiceClient.prototype.sumKeyRecordTimestr = function(key, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_sumKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_sumKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_sumKeyRecordTimestr = function(key, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('sumKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_sumKeyRecordTimestr_args();
    args.key = key;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_sumKeyRecordTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_sumKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyRecordTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.sumKeyRecords = function(key, records, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_sumKeyRecords(key, records, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_sumKeyRecords(key, records, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_sumKeyRecords = function(key, records, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('sumKeyRecords', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_sumKeyRecords_args();
    args.key = key;
    args.records = records;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_sumKeyRecords = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_sumKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyRecords failed: unknown result');
};
ConcourseServiceClient.prototype.sumKeyRecordsTime = function(key, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_sumKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_sumKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_sumKeyRecordsTime = function(key, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('sumKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_sumKeyRecordsTime_args();
    args.key = key;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_sumKeyRecordsTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_sumKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyRecordsTime failed: unknown result');
};
ConcourseServiceClient.prototype.sumKeyRecordsTimestr = function(key, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_sumKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_sumKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_sumKeyRecordsTimestr = function(key, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('sumKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_sumKeyRecordsTimestr_args();
    args.key = key;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_sumKeyRecordsTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_sumKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyRecordsTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.sumKey = function(key, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_sumKey(key, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_sumKey(key, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_sumKey = function(key, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('sumKey', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_sumKey_args();
    args.key = key;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_sumKey = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_sumKey_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKey failed: unknown result');
};
ConcourseServiceClient.prototype.sumKeyTime = function(key, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_sumKeyTime(key, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_sumKeyTime(key, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_sumKeyTime = function(key, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('sumKeyTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_sumKeyTime_args();
    args.key = key;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_sumKeyTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_sumKeyTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyTime failed: unknown result');
};
ConcourseServiceClient.prototype.sumKeyTimestr = function(key, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_sumKeyTimestr(key, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_sumKeyTimestr(key, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_sumKeyTimestr = function(key, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('sumKeyTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_sumKeyTimestr_args();
    args.key = key;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_sumKeyTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_sumKeyTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.sumKeyCriteria = function(key, criteria, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_sumKeyCriteria(key, criteria, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_sumKeyCriteria(key, criteria, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_sumKeyCriteria = function(key, criteria, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('sumKeyCriteria', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_sumKeyCriteria_args();
    args.key = key;
    args.criteria = criteria;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_sumKeyCriteria = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_sumKeyCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyCriteria failed: unknown result');
};
ConcourseServiceClient.prototype.sumKeyCriteriaTime = function(key, criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_sumKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_sumKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_sumKeyCriteriaTime = function(key, criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('sumKeyCriteriaTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_sumKeyCriteriaTime_args();
    args.key = key;
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_sumKeyCriteriaTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_sumKeyCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyCriteriaTime failed: unknown result');
};
ConcourseServiceClient.prototype.sumKeyCriteriaTimestr = function(key, criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_sumKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_sumKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_sumKeyCriteriaTimestr = function(key, criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('sumKeyCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_sumKeyCriteriaTimestr_args();
    args.key = key;
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_sumKeyCriteriaTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_sumKeyCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyCriteriaTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.sumKeyCcl = function(key, ccl, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_sumKeyCcl(key, ccl, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_sumKeyCcl(key, ccl, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_sumKeyCcl = function(key, ccl, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('sumKeyCcl', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_sumKeyCcl_args();
    args.key = key;
    args.ccl = ccl;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_sumKeyCcl = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_sumKeyCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyCcl failed: unknown result');
};
ConcourseServiceClient.prototype.sumKeyCclTime = function(key, ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_sumKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_sumKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_sumKeyCclTime = function(key, ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('sumKeyCclTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_sumKeyCclTime_args();
    args.key = key;
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_sumKeyCclTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_sumKeyCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyCclTime failed: unknown result');
};
ConcourseServiceClient.prototype.sumKeyCclTimestr = function(key, ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_sumKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_sumKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_sumKeyCclTimestr = function(key, ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('sumKeyCclTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_sumKeyCclTimestr_args();
    args.key = key;
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_sumKeyCclTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_sumKeyCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('sumKeyCclTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.averageKeyRecord = function(key, record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_averageKeyRecord(key, record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_averageKeyRecord(key, record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_averageKeyRecord = function(key, record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('averageKeyRecord', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_averageKeyRecord_args();
    args.key = key;
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_averageKeyRecord = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_averageKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyRecord failed: unknown result');
};
ConcourseServiceClient.prototype.averageKeyRecordTime = function(key, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_averageKeyRecordTime(key, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_averageKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_averageKeyRecordTime = function(key, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('averageKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_averageKeyRecordTime_args();
    args.key = key;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_averageKeyRecordTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_averageKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyRecordTime failed: unknown result');
};
ConcourseServiceClient.prototype.averageKeyRecordTimestr = function(key, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_averageKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_averageKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_averageKeyRecordTimestr = function(key, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('averageKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_averageKeyRecordTimestr_args();
    args.key = key;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_averageKeyRecordTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_averageKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyRecordTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.averageKeyRecords = function(key, records, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_averageKeyRecords(key, records, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_averageKeyRecords(key, records, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_averageKeyRecords = function(key, records, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('averageKeyRecords', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_averageKeyRecords_args();
    args.key = key;
    args.records = records;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_averageKeyRecords = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_averageKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyRecords failed: unknown result');
};
ConcourseServiceClient.prototype.averageKeyRecordsTime = function(key, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_averageKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_averageKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_averageKeyRecordsTime = function(key, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('averageKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_averageKeyRecordsTime_args();
    args.key = key;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_averageKeyRecordsTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_averageKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyRecordsTime failed: unknown result');
};
ConcourseServiceClient.prototype.averageKeyRecordsTimestr = function(key, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_averageKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_averageKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_averageKeyRecordsTimestr = function(key, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('averageKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_averageKeyRecordsTimestr_args();
    args.key = key;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_averageKeyRecordsTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_averageKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyRecordsTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.averageKey = function(key, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_averageKey(key, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_averageKey(key, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_averageKey = function(key, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('averageKey', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_averageKey_args();
    args.key = key;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_averageKey = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_averageKey_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKey failed: unknown result');
};
ConcourseServiceClient.prototype.averageKeyTime = function(key, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_averageKeyTime(key, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_averageKeyTime(key, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_averageKeyTime = function(key, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('averageKeyTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_averageKeyTime_args();
    args.key = key;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_averageKeyTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_averageKeyTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyTime failed: unknown result');
};
ConcourseServiceClient.prototype.averageKeyTimestr = function(key, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_averageKeyTimestr(key, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_averageKeyTimestr(key, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_averageKeyTimestr = function(key, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('averageKeyTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_averageKeyTimestr_args();
    args.key = key;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_averageKeyTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_averageKeyTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.averageKeyCriteria = function(key, criteria, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_averageKeyCriteria(key, criteria, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_averageKeyCriteria(key, criteria, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_averageKeyCriteria = function(key, criteria, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('averageKeyCriteria', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_averageKeyCriteria_args();
    args.key = key;
    args.criteria = criteria;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_averageKeyCriteria = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_averageKeyCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyCriteria failed: unknown result');
};
ConcourseServiceClient.prototype.averageKeyCriteriaTime = function(key, criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_averageKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_averageKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_averageKeyCriteriaTime = function(key, criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('averageKeyCriteriaTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_averageKeyCriteriaTime_args();
    args.key = key;
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_averageKeyCriteriaTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_averageKeyCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyCriteriaTime failed: unknown result');
};
ConcourseServiceClient.prototype.averageKeyCriteriaTimestr = function(key, criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_averageKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_averageKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_averageKeyCriteriaTimestr = function(key, criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('averageKeyCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_averageKeyCriteriaTimestr_args();
    args.key = key;
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_averageKeyCriteriaTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_averageKeyCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyCriteriaTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.averageKeyCcl = function(key, ccl, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_averageKeyCcl(key, ccl, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_averageKeyCcl(key, ccl, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_averageKeyCcl = function(key, ccl, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('averageKeyCcl', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_averageKeyCcl_args();
    args.key = key;
    args.ccl = ccl;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_averageKeyCcl = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_averageKeyCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyCcl failed: unknown result');
};
ConcourseServiceClient.prototype.averageKeyCclTime = function(key, ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_averageKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_averageKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_averageKeyCclTime = function(key, ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('averageKeyCclTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_averageKeyCclTime_args();
    args.key = key;
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_averageKeyCclTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_averageKeyCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyCclTime failed: unknown result');
};
ConcourseServiceClient.prototype.averageKeyCclTimestr = function(key, ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_averageKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_averageKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_averageKeyCclTimestr = function(key, ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('averageKeyCclTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_averageKeyCclTimestr_args();
    args.key = key;
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_averageKeyCclTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_averageKeyCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('averageKeyCclTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.countKeyRecord = function(key, record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_countKeyRecord(key, record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_countKeyRecord(key, record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_countKeyRecord = function(key, record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('countKeyRecord', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_countKeyRecord_args();
    args.key = key;
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_countKeyRecord = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_countKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyRecord failed: unknown result');
};
ConcourseServiceClient.prototype.countKeyRecordTime = function(key, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_countKeyRecordTime(key, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_countKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_countKeyRecordTime = function(key, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('countKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_countKeyRecordTime_args();
    args.key = key;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_countKeyRecordTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_countKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyRecordTime failed: unknown result');
};
ConcourseServiceClient.prototype.countKeyRecordTimestr = function(key, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_countKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_countKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_countKeyRecordTimestr = function(key, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('countKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_countKeyRecordTimestr_args();
    args.key = key;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_countKeyRecordTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_countKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyRecordTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.countKeyRecords = function(key, records, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_countKeyRecords(key, records, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_countKeyRecords(key, records, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_countKeyRecords = function(key, records, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('countKeyRecords', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_countKeyRecords_args();
    args.key = key;
    args.records = records;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_countKeyRecords = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_countKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyRecords failed: unknown result');
};
ConcourseServiceClient.prototype.countKeyRecordsTime = function(key, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_countKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_countKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_countKeyRecordsTime = function(key, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('countKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_countKeyRecordsTime_args();
    args.key = key;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_countKeyRecordsTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_countKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyRecordsTime failed: unknown result');
};
ConcourseServiceClient.prototype.countKeyRecordsTimestr = function(key, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_countKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_countKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_countKeyRecordsTimestr = function(key, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('countKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_countKeyRecordsTimestr_args();
    args.key = key;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_countKeyRecordsTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_countKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyRecordsTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.countKey = function(key, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_countKey(key, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_countKey(key, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_countKey = function(key, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('countKey', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_countKey_args();
    args.key = key;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_countKey = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_countKey_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKey failed: unknown result');
};
ConcourseServiceClient.prototype.countKeyTime = function(key, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_countKeyTime(key, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_countKeyTime(key, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_countKeyTime = function(key, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('countKeyTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_countKeyTime_args();
    args.key = key;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_countKeyTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_countKeyTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyTime failed: unknown result');
};
ConcourseServiceClient.prototype.countKeyTimestr = function(key, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_countKeyTimestr(key, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_countKeyTimestr(key, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_countKeyTimestr = function(key, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('countKeyTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_countKeyTimestr_args();
    args.key = key;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_countKeyTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_countKeyTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.countKeyCriteria = function(key, criteria, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_countKeyCriteria(key, criteria, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_countKeyCriteria(key, criteria, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_countKeyCriteria = function(key, criteria, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('countKeyCriteria', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_countKeyCriteria_args();
    args.key = key;
    args.criteria = criteria;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_countKeyCriteria = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_countKeyCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyCriteria failed: unknown result');
};
ConcourseServiceClient.prototype.countKeyCriteriaTime = function(key, criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_countKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_countKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_countKeyCriteriaTime = function(key, criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('countKeyCriteriaTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_countKeyCriteriaTime_args();
    args.key = key;
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_countKeyCriteriaTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_countKeyCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyCriteriaTime failed: unknown result');
};
ConcourseServiceClient.prototype.countKeyCriteriaTimestr = function(key, criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_countKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_countKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_countKeyCriteriaTimestr = function(key, criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('countKeyCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_countKeyCriteriaTimestr_args();
    args.key = key;
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_countKeyCriteriaTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_countKeyCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyCriteriaTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.countKeyCcl = function(key, ccl, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_countKeyCcl(key, ccl, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_countKeyCcl(key, ccl, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_countKeyCcl = function(key, ccl, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('countKeyCcl', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_countKeyCcl_args();
    args.key = key;
    args.ccl = ccl;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_countKeyCcl = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_countKeyCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyCcl failed: unknown result');
};
ConcourseServiceClient.prototype.countKeyCclTime = function(key, ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_countKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_countKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_countKeyCclTime = function(key, ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('countKeyCclTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_countKeyCclTime_args();
    args.key = key;
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_countKeyCclTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_countKeyCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyCclTime failed: unknown result');
};
ConcourseServiceClient.prototype.countKeyCclTimestr = function(key, ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_countKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_countKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_countKeyCclTimestr = function(key, ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('countKeyCclTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_countKeyCclTimestr_args();
    args.key = key;
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_countKeyCclTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_countKeyCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('countKeyCclTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.maxKeyRecord = function(key, record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_maxKeyRecord(key, record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_maxKeyRecord(key, record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_maxKeyRecord = function(key, record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('maxKeyRecord', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_maxKeyRecord_args();
    args.key = key;
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_maxKeyRecord = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_maxKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyRecord failed: unknown result');
};
ConcourseServiceClient.prototype.maxKeyRecordTime = function(key, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_maxKeyRecordTime(key, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_maxKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_maxKeyRecordTime = function(key, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('maxKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_maxKeyRecordTime_args();
    args.key = key;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_maxKeyRecordTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_maxKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyRecordTime failed: unknown result');
};
ConcourseServiceClient.prototype.maxKeyRecordTimestr = function(key, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_maxKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_maxKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_maxKeyRecordTimestr = function(key, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('maxKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_maxKeyRecordTimestr_args();
    args.key = key;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_maxKeyRecordTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_maxKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyRecordTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.maxKeyRecords = function(key, records, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_maxKeyRecords(key, records, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_maxKeyRecords(key, records, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_maxKeyRecords = function(key, records, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('maxKeyRecords', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_maxKeyRecords_args();
    args.key = key;
    args.records = records;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_maxKeyRecords = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_maxKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyRecords failed: unknown result');
};
ConcourseServiceClient.prototype.maxKeyRecordsTime = function(key, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_maxKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_maxKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_maxKeyRecordsTime = function(key, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('maxKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_maxKeyRecordsTime_args();
    args.key = key;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_maxKeyRecordsTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_maxKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyRecordsTime failed: unknown result');
};
ConcourseServiceClient.prototype.maxKeyRecordsTimestr = function(key, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_maxKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_maxKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_maxKeyRecordsTimestr = function(key, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('maxKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_maxKeyRecordsTimestr_args();
    args.key = key;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_maxKeyRecordsTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_maxKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyRecordsTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.maxKeyCriteria = function(key, criteria, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_maxKeyCriteria(key, criteria, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_maxKeyCriteria(key, criteria, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_maxKeyCriteria = function(key, criteria, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('maxKeyCriteria', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_maxKeyCriteria_args();
    args.key = key;
    args.criteria = criteria;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_maxKeyCriteria = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_maxKeyCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyCriteria failed: unknown result');
};
ConcourseServiceClient.prototype.maxKeyCriteriaTime = function(key, criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_maxKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_maxKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_maxKeyCriteriaTime = function(key, criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('maxKeyCriteriaTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_maxKeyCriteriaTime_args();
    args.key = key;
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_maxKeyCriteriaTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_maxKeyCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyCriteriaTime failed: unknown result');
};
ConcourseServiceClient.prototype.maxKeyCriteriaTimestr = function(key, criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_maxKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_maxKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_maxKeyCriteriaTimestr = function(key, criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('maxKeyCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_maxKeyCriteriaTimestr_args();
    args.key = key;
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_maxKeyCriteriaTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_maxKeyCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyCriteriaTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.maxKeyCcl = function(key, ccl, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_maxKeyCcl(key, ccl, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_maxKeyCcl(key, ccl, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_maxKeyCcl = function(key, ccl, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('maxKeyCcl', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_maxKeyCcl_args();
    args.key = key;
    args.ccl = ccl;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_maxKeyCcl = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_maxKeyCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyCcl failed: unknown result');
};
ConcourseServiceClient.prototype.maxKeyCclTime = function(key, ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_maxKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_maxKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_maxKeyCclTime = function(key, ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('maxKeyCclTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_maxKeyCclTime_args();
    args.key = key;
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_maxKeyCclTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_maxKeyCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyCclTime failed: unknown result');
};
ConcourseServiceClient.prototype.maxKeyCclTimestr = function(key, ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_maxKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_maxKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_maxKeyCclTimestr = function(key, ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('maxKeyCclTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_maxKeyCclTimestr_args();
    args.key = key;
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_maxKeyCclTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_maxKeyCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyCclTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.maxKey = function(key, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_maxKey(key, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_maxKey(key, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_maxKey = function(key, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('maxKey', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_maxKey_args();
    args.key = key;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_maxKey = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_maxKey_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKey failed: unknown result');
};
ConcourseServiceClient.prototype.maxKeyTime = function(key, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_maxKeyTime(key, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_maxKeyTime(key, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_maxKeyTime = function(key, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('maxKeyTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_maxKeyTime_args();
    args.key = key;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_maxKeyTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_maxKeyTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyTime failed: unknown result');
};
ConcourseServiceClient.prototype.maxKeyTimestr = function(key, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_maxKeyTimestr(key, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_maxKeyTimestr(key, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_maxKeyTimestr = function(key, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('maxKeyTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_maxKeyTimestr_args();
    args.key = key;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_maxKeyTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_maxKeyTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('maxKeyTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.minKeyRecord = function(key, record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_minKeyRecord(key, record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_minKeyRecord(key, record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_minKeyRecord = function(key, record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('minKeyRecord', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_minKeyRecord_args();
    args.key = key;
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_minKeyRecord = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_minKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyRecord failed: unknown result');
};
ConcourseServiceClient.prototype.minKeyRecordTime = function(key, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_minKeyRecordTime(key, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_minKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_minKeyRecordTime = function(key, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('minKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_minKeyRecordTime_args();
    args.key = key;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_minKeyRecordTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_minKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyRecordTime failed: unknown result');
};
ConcourseServiceClient.prototype.minKeyRecordTimestr = function(key, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_minKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_minKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_minKeyRecordTimestr = function(key, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('minKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_minKeyRecordTimestr_args();
    args.key = key;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_minKeyRecordTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_minKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyRecordTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.minKey = function(key, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_minKey(key, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_minKey(key, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_minKey = function(key, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('minKey', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_minKey_args();
    args.key = key;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_minKey = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_minKey_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKey failed: unknown result');
};
ConcourseServiceClient.prototype.minKeyRecordsTime = function(key, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_minKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_minKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_minKeyRecordsTime = function(key, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('minKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_minKeyRecordsTime_args();
    args.key = key;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_minKeyRecordsTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_minKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyRecordsTime failed: unknown result');
};
ConcourseServiceClient.prototype.minKeyRecordsTimestr = function(key, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_minKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_minKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_minKeyRecordsTimestr = function(key, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('minKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_minKeyRecordsTimestr_args();
    args.key = key;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_minKeyRecordsTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_minKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyRecordsTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.minKeyCriteria = function(key, criteria, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_minKeyCriteria(key, criteria, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_minKeyCriteria(key, criteria, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_minKeyCriteria = function(key, criteria, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('minKeyCriteria', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_minKeyCriteria_args();
    args.key = key;
    args.criteria = criteria;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_minKeyCriteria = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_minKeyCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyCriteria failed: unknown result');
};
ConcourseServiceClient.prototype.minKeyCriteriaTime = function(key, criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_minKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_minKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_minKeyCriteriaTime = function(key, criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('minKeyCriteriaTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_minKeyCriteriaTime_args();
    args.key = key;
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_minKeyCriteriaTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_minKeyCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyCriteriaTime failed: unknown result');
};
ConcourseServiceClient.prototype.minKeyCriteriaTimestr = function(key, criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_minKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_minKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_minKeyCriteriaTimestr = function(key, criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('minKeyCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_minKeyCriteriaTimestr_args();
    args.key = key;
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_minKeyCriteriaTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_minKeyCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyCriteriaTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.minKeyCcl = function(key, ccl, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_minKeyCcl(key, ccl, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_minKeyCcl(key, ccl, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_minKeyCcl = function(key, ccl, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('minKeyCcl', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_minKeyCcl_args();
    args.key = key;
    args.ccl = ccl;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_minKeyCcl = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_minKeyCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyCcl failed: unknown result');
};
ConcourseServiceClient.prototype.minKeyCclTime = function(key, ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_minKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_minKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_minKeyCclTime = function(key, ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('minKeyCclTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_minKeyCclTime_args();
    args.key = key;
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_minKeyCclTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_minKeyCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyCclTime failed: unknown result');
};
ConcourseServiceClient.prototype.minKeyCclTimestr = function(key, ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_minKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_minKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_minKeyCclTimestr = function(key, ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('minKeyCclTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_minKeyCclTimestr_args();
    args.key = key;
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_minKeyCclTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_minKeyCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyCclTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.minKeyTime = function(key, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_minKeyTime(key, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_minKeyTime(key, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_minKeyTime = function(key, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('minKeyTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_minKeyTime_args();
    args.key = key;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_minKeyTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_minKeyTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyTime failed: unknown result');
};
ConcourseServiceClient.prototype.minKeyTimestr = function(key, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_minKeyTimestr(key, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_minKeyTimestr(key, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_minKeyTimestr = function(key, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('minKeyTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_minKeyTimestr_args();
    args.key = key;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_minKeyTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_minKeyTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.minKeyRecords = function(key, records, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_minKeyRecords(key, records, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_minKeyRecords(key, records, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_minKeyRecords = function(key, records, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('minKeyRecords', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_minKeyRecords_args();
    args.key = key;
    args.records = records;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_minKeyRecords = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_minKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('minKeyRecords failed: unknown result');
};
ConcourseServiceClient.prototype.navigateKeyRecord = function(key, record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_navigateKeyRecord(key, record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_navigateKeyRecord(key, record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_navigateKeyRecord = function(key, record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('navigateKeyRecord', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_navigateKeyRecord_args();
    args.key = key;
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_navigateKeyRecord = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_navigateKeyRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyRecord failed: unknown result');
};
ConcourseServiceClient.prototype.navigateKeyRecordTime = function(key, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_navigateKeyRecordTime(key, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_navigateKeyRecordTime(key, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_navigateKeyRecordTime = function(key, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('navigateKeyRecordTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_navigateKeyRecordTime_args();
    args.key = key;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_navigateKeyRecordTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_navigateKeyRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyRecordTime failed: unknown result');
};
ConcourseServiceClient.prototype.navigateKeyRecordTimestr = function(key, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_navigateKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_navigateKeyRecordTimestr(key, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_navigateKeyRecordTimestr = function(key, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('navigateKeyRecordTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_navigateKeyRecordTimestr_args();
    args.key = key;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_navigateKeyRecordTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_navigateKeyRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyRecordTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.navigateKeysRecord = function(keys, record, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_navigateKeysRecord(keys, record, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_navigateKeysRecord(keys, record, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_navigateKeysRecord = function(keys, record, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('navigateKeysRecord', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_navigateKeysRecord_args();
    args.keys = keys;
    args.record = record;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_navigateKeysRecord = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_navigateKeysRecord_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysRecord failed: unknown result');
};
ConcourseServiceClient.prototype.navigateKeysRecordTime = function(keys, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_navigateKeysRecordTime(keys, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_navigateKeysRecordTime(keys, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_navigateKeysRecordTime = function(keys, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('navigateKeysRecordTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_navigateKeysRecordTime_args();
    args.keys = keys;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_navigateKeysRecordTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_navigateKeysRecordTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysRecordTime failed: unknown result');
};
ConcourseServiceClient.prototype.navigateKeysRecordTimestr = function(keys, record, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_navigateKeysRecordTimestr(keys, record, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_navigateKeysRecordTimestr(keys, record, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_navigateKeysRecordTimestr = function(keys, record, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('navigateKeysRecordTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_navigateKeysRecordTimestr_args();
    args.keys = keys;
    args.record = record;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_navigateKeysRecordTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_navigateKeysRecordTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysRecordTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.navigateKeysRecords = function(keys, records, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_navigateKeysRecords(keys, records, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_navigateKeysRecords(keys, records, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_navigateKeysRecords = function(keys, records, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('navigateKeysRecords', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_navigateKeysRecords_args();
    args.keys = keys;
    args.records = records;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_navigateKeysRecords = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_navigateKeysRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysRecords failed: unknown result');
};
ConcourseServiceClient.prototype.navigateKeyRecords = function(key, records, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_navigateKeyRecords(key, records, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_navigateKeyRecords(key, records, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_navigateKeyRecords = function(key, records, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('navigateKeyRecords', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_navigateKeyRecords_args();
    args.key = key;
    args.records = records;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_navigateKeyRecords = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_navigateKeyRecords_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyRecords failed: unknown result');
};
ConcourseServiceClient.prototype.navigateKeyRecordsTime = function(key, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_navigateKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_navigateKeyRecordsTime(key, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_navigateKeyRecordsTime = function(key, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('navigateKeyRecordsTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_navigateKeyRecordsTime_args();
    args.key = key;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_navigateKeyRecordsTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_navigateKeyRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyRecordsTime failed: unknown result');
};
ConcourseServiceClient.prototype.navigateKeyRecordsTimestr = function(key, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_navigateKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_navigateKeyRecordsTimestr(key, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_navigateKeyRecordsTimestr = function(key, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('navigateKeyRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_navigateKeyRecordsTimestr_args();
    args.key = key;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_navigateKeyRecordsTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_navigateKeyRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyRecordsTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.navigateKeysRecordsTime = function(keys, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_navigateKeysRecordsTime(keys, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_navigateKeysRecordsTime(keys, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_navigateKeysRecordsTime = function(keys, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('navigateKeysRecordsTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_navigateKeysRecordsTime_args();
    args.keys = keys;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_navigateKeysRecordsTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_navigateKeysRecordsTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysRecordsTime failed: unknown result');
};
ConcourseServiceClient.prototype.navigateKeysRecordsTimestr = function(keys, records, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_navigateKeysRecordsTimestr(keys, records, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_navigateKeysRecordsTimestr(keys, records, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_navigateKeysRecordsTimestr = function(keys, records, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('navigateKeysRecordsTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_navigateKeysRecordsTimestr_args();
    args.keys = keys;
    args.records = records;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_navigateKeysRecordsTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_navigateKeysRecordsTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysRecordsTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.navigateKeyCcl = function(key, ccl, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_navigateKeyCcl(key, ccl, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_navigateKeyCcl(key, ccl, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_navigateKeyCcl = function(key, ccl, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('navigateKeyCcl', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_navigateKeyCcl_args();
    args.key = key;
    args.ccl = ccl;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_navigateKeyCcl = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_navigateKeyCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyCcl failed: unknown result');
};
ConcourseServiceClient.prototype.navigateKeyCclTime = function(key, ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_navigateKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_navigateKeyCclTime(key, ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_navigateKeyCclTime = function(key, ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('navigateKeyCclTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_navigateKeyCclTime_args();
    args.key = key;
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_navigateKeyCclTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_navigateKeyCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyCclTime failed: unknown result');
};
ConcourseServiceClient.prototype.navigateKeyCclTimestr = function(key, ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_navigateKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_navigateKeyCclTimestr(key, ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_navigateKeyCclTimestr = function(key, ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('navigateKeyCclTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_navigateKeyCclTimestr_args();
    args.key = key;
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_navigateKeyCclTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_navigateKeyCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyCclTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.navigateKeysCcl = function(keys, ccl, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_navigateKeysCcl(keys, ccl, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_navigateKeysCcl(keys, ccl, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_navigateKeysCcl = function(keys, ccl, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('navigateKeysCcl', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_navigateKeysCcl_args();
    args.keys = keys;
    args.ccl = ccl;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_navigateKeysCcl = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_navigateKeysCcl_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysCcl failed: unknown result');
};
ConcourseServiceClient.prototype.navigateKeysCclTime = function(keys, ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_navigateKeysCclTime(keys, ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_navigateKeysCclTime(keys, ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_navigateKeysCclTime = function(keys, ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('navigateKeysCclTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_navigateKeysCclTime_args();
    args.keys = keys;
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_navigateKeysCclTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_navigateKeysCclTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysCclTime failed: unknown result');
};
ConcourseServiceClient.prototype.navigateKeysCclTimestr = function(keys, ccl, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_navigateKeysCclTimestr(keys, ccl, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_navigateKeysCclTimestr(keys, ccl, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_navigateKeysCclTimestr = function(keys, ccl, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('navigateKeysCclTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_navigateKeysCclTimestr_args();
    args.keys = keys;
    args.ccl = ccl;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_navigateKeysCclTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_navigateKeysCclTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysCclTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.navigateKeyCriteria = function(key, criteria, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_navigateKeyCriteria(key, criteria, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_navigateKeyCriteria(key, criteria, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_navigateKeyCriteria = function(key, criteria, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('navigateKeyCriteria', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_navigateKeyCriteria_args();
    args.key = key;
    args.criteria = criteria;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_navigateKeyCriteria = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_navigateKeyCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyCriteria failed: unknown result');
};
ConcourseServiceClient.prototype.navigateKeyCriteriaTime = function(key, criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_navigateKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_navigateKeyCriteriaTime(key, criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_navigateKeyCriteriaTime = function(key, criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('navigateKeyCriteriaTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_navigateKeyCriteriaTime_args();
    args.key = key;
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_navigateKeyCriteriaTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_navigateKeyCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyCriteriaTime failed: unknown result');
};
ConcourseServiceClient.prototype.navigateKeyCriteriaTimestr = function(key, criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_navigateKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_navigateKeyCriteriaTimestr(key, criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_navigateKeyCriteriaTimestr = function(key, criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('navigateKeyCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_navigateKeyCriteriaTimestr_args();
    args.key = key;
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_navigateKeyCriteriaTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_navigateKeyCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeyCriteriaTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.navigateKeysCriteria = function(keys, criteria, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_navigateKeysCriteria(keys, criteria, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_navigateKeysCriteria(keys, criteria, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_navigateKeysCriteria = function(keys, criteria, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('navigateKeysCriteria', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_navigateKeysCriteria_args();
    args.keys = keys;
    args.criteria = criteria;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_navigateKeysCriteria = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_navigateKeysCriteria_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysCriteria failed: unknown result');
};
ConcourseServiceClient.prototype.navigateKeysCriteriaTime = function(keys, criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_navigateKeysCriteriaTime(keys, criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_navigateKeysCriteriaTime(keys, criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_navigateKeysCriteriaTime = function(keys, criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('navigateKeysCriteriaTime', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_navigateKeysCriteriaTime_args();
    args.keys = keys;
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_navigateKeysCriteriaTime = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_navigateKeysCriteriaTime_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysCriteriaTime failed: unknown result');
};
ConcourseServiceClient.prototype.navigateKeysCriteriaTimestr = function(keys, criteria, timestamp, creds, transaction, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_navigateKeysCriteriaTimestr(keys, criteria, timestamp, creds, transaction, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_navigateKeysCriteriaTimestr(keys, criteria, timestamp, creds, transaction, environment);
    }
};

ConcourseServiceClient.prototype.send_navigateKeysCriteriaTimestr = function(keys, criteria, timestamp, creds, transaction, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('navigateKeysCriteriaTimestr', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_navigateKeysCriteriaTimestr_args();
    args.keys = keys;
    args.criteria = criteria;
    args.timestamp = timestamp;
    args.creds = creds;
    args.transaction = transaction;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_navigateKeysCriteriaTimestr = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_navigateKeysCriteriaTimestr_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('navigateKeysCriteriaTimestr failed: unknown result');
};
ConcourseServiceClient.prototype.getServerEnvironment = function(creds, token, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getServerEnvironment(creds, token, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getServerEnvironment(creds, token, environment);
    }
};

ConcourseServiceClient.prototype.send_getServerEnvironment = function(creds, token, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getServerEnvironment', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getServerEnvironment_args();
    args.creds = creds;
    args.token = token;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getServerEnvironment = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getServerEnvironment_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getServerEnvironment failed: unknown result');
};
ConcourseServiceClient.prototype.getServerVersion = function(callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_getServerVersion();
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_getServerVersion();
    }
};

ConcourseServiceClient.prototype.send_getServerVersion = function() {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('getServerVersion', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_getServerVersion_args();
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_getServerVersion = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_getServerVersion_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('getServerVersion failed: unknown result');
};
ConcourseServiceClient.prototype.time = function(creds, token, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_time(creds, token, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_time(creds, token, environment);
    }
};

ConcourseServiceClient.prototype.send_time = function(creds, token, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('time', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_time_args();
    args.creds = creds;
    args.token = token;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_time = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_time_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('time failed: unknown result');
};
ConcourseServiceClient.prototype.timePhrase = function(phrase, creds, token, environment, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_timePhrase(phrase, creds, token, environment);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_timePhrase(phrase, creds, token, environment);
    }
};

ConcourseServiceClient.prototype.send_timePhrase = function(phrase, creds, token, environment) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('timePhrase', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_timePhrase_args();
    args.phrase = phrase;
    args.creds = creds;
    args.token = token;
    args.environment = environment;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_timePhrase = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_timePhrase_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.ex3) {
      return callback(result.ex3);
    }
    if (null !== result.ex4) {
      return callback(result.ex4);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('timePhrase failed: unknown result');
};
ConcourseServiceClient.prototype.invokeManagement = function(method, params, creds, callback) {
    this._seqid = this.new_seqid();
    if (callback === undefined) {
      var _defer = Q.defer();
      this._reqs[this.seqid()] = function(error, result) {
        if (error) {
          _defer.reject(error);
        } else {
          _defer.resolve(result);
        }
      };
      this.send_invokeManagement(method, params, creds);
      return _defer.promise;
    } else {
      this._reqs[this.seqid()] = callback;
      this.send_invokeManagement(method, params, creds);
    }
};

ConcourseServiceClient.prototype.send_invokeManagement = function(method, params, creds) {
    var output = new this.pClass(this.output);
    output.writeMessageBegin('invokeManagement', Thrift.MessageType.CALL, this.seqid());
    var args = new ConcourseService_invokeManagement_args();
    args.method = method;
    args.params = params;
    args.creds = creds;
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
};

ConcourseServiceClient.prototype.recv_invokeManagement = function(input,mtype,rseqid) {
    var callback = this._reqs[rseqid] || function() {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      var x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    var result = new ConcourseService_invokeManagement_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.ex) {
      return callback(result.ex);
    }
    if (null !== result.ex2) {
      return callback(result.ex2);
    }
    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback('invokeManagement failed: unknown result');
};
ConcourseServiceProcessor = exports.Processor = function(handler)   {
    this._handler = handler
  }
  ConcourseServiceProcessor.prototype.process = function(input, output)   {
    var r = input.readMessageBegin();
    if (this['process_' + r.fname]) {
      return this['process_' + r.fname].call(this, r.rseqid, input, output);
    } else {
      input.skip(Thrift.Type.STRUCT);
      input.readMessageEnd();
      var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
      output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
      x.write(output);
      output.writeMessageEnd();
      output.flush();
    }
  }

  ConcourseServiceProcessor.prototype.process_abort = function(seqid, input, output)   {
    var args = new ConcourseService_abort_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.abort.length === 3) {
      Q.fcall(this._handler.abort, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_abort_result({success: result});
          output.writeMessageBegin("abort", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException) {
            var result = new ConcourseService_abort_result(err);
            output.writeMessageBegin("abort", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("abort", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.abort(args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException) {
          var result = new ConcourseService_abort_result((err != null ? err : {success: result}));
          output.writeMessageBegin("abort", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("abort", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_addKeyValue = function(seqid, input, output)   {
    var args = new ConcourseService_addKeyValue_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.addKeyValue.length === 5) {
      Q.fcall(this._handler.addKeyValue, args.key, args.value, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_addKeyValue_result({success: result});
          output.writeMessageBegin("addKeyValue", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_addKeyValue_result(err);
            output.writeMessageBegin("addKeyValue", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("addKeyValue", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.addKeyValue(args.key, args.value, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_addKeyValue_result((err != null ? err : {success: result}));
          output.writeMessageBegin("addKeyValue", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addKeyValue", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_addKeyValueRecord = function(seqid, input, output)   {
    var args = new ConcourseService_addKeyValueRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.addKeyValueRecord.length === 6) {
      Q.fcall(this._handler.addKeyValueRecord, args.key, args.value, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_addKeyValueRecord_result({success: result});
          output.writeMessageBegin("addKeyValueRecord", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_addKeyValueRecord_result(err);
            output.writeMessageBegin("addKeyValueRecord", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("addKeyValueRecord", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.addKeyValueRecord(args.key, args.value, args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_addKeyValueRecord_result((err != null ? err : {success: result}));
          output.writeMessageBegin("addKeyValueRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addKeyValueRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_addKeyValueRecords = function(seqid, input, output)   {
    var args = new ConcourseService_addKeyValueRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.addKeyValueRecords.length === 6) {
      Q.fcall(this._handler.addKeyValueRecords, args.key, args.value, args.records, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_addKeyValueRecords_result({success: result});
          output.writeMessageBegin("addKeyValueRecords", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_addKeyValueRecords_result(err);
            output.writeMessageBegin("addKeyValueRecords", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("addKeyValueRecords", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.addKeyValueRecords(args.key, args.value, args.records, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_addKeyValueRecords_result((err != null ? err : {success: result}));
          output.writeMessageBegin("addKeyValueRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addKeyValueRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_auditRecord = function(seqid, input, output)   {
    var args = new ConcourseService_auditRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.auditRecord.length === 4) {
      Q.fcall(this._handler.auditRecord, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_auditRecord_result({success: result});
          output.writeMessageBegin("auditRecord", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_auditRecord_result(err);
            output.writeMessageBegin("auditRecord", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("auditRecord", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.auditRecord(args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_auditRecord_result((err != null ? err : {success: result}));
          output.writeMessageBegin("auditRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_auditRecordStart = function(seqid, input, output)   {
    var args = new ConcourseService_auditRecordStart_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.auditRecordStart.length === 5) {
      Q.fcall(this._handler.auditRecordStart, args.record, args.start, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_auditRecordStart_result({success: result});
          output.writeMessageBegin("auditRecordStart", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_auditRecordStart_result(err);
            output.writeMessageBegin("auditRecordStart", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("auditRecordStart", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.auditRecordStart(args.record, args.start, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_auditRecordStart_result((err != null ? err : {success: result}));
          output.writeMessageBegin("auditRecordStart", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditRecordStart", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_auditRecordStartstr = function(seqid, input, output)   {
    var args = new ConcourseService_auditRecordStartstr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.auditRecordStartstr.length === 5) {
      Q.fcall(this._handler.auditRecordStartstr, args.record, args.start, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_auditRecordStartstr_result({success: result});
          output.writeMessageBegin("auditRecordStartstr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_auditRecordStartstr_result(err);
            output.writeMessageBegin("auditRecordStartstr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("auditRecordStartstr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.auditRecordStartstr(args.record, args.start, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_auditRecordStartstr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("auditRecordStartstr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditRecordStartstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_auditRecordStartEnd = function(seqid, input, output)   {
    var args = new ConcourseService_auditRecordStartEnd_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.auditRecordStartEnd.length === 6) {
      Q.fcall(this._handler.auditRecordStartEnd, args.record, args.start, args.tend, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_auditRecordStartEnd_result({success: result});
          output.writeMessageBegin("auditRecordStartEnd", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_auditRecordStartEnd_result(err);
            output.writeMessageBegin("auditRecordStartEnd", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("auditRecordStartEnd", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.auditRecordStartEnd(args.record, args.start, args.tend, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_auditRecordStartEnd_result((err != null ? err : {success: result}));
          output.writeMessageBegin("auditRecordStartEnd", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditRecordStartEnd", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_auditRecordStartstrEndstr = function(seqid, input, output)   {
    var args = new ConcourseService_auditRecordStartstrEndstr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.auditRecordStartstrEndstr.length === 6) {
      Q.fcall(this._handler.auditRecordStartstrEndstr, args.record, args.start, args.tend, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_auditRecordStartstrEndstr_result({success: result});
          output.writeMessageBegin("auditRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_auditRecordStartstrEndstr_result(err);
            output.writeMessageBegin("auditRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("auditRecordStartstrEndstr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.auditRecordStartstrEndstr(args.record, args.start, args.tend, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_auditRecordStartstrEndstr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("auditRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditRecordStartstrEndstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_auditKeyRecord = function(seqid, input, output)   {
    var args = new ConcourseService_auditKeyRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.auditKeyRecord.length === 5) {
      Q.fcall(this._handler.auditKeyRecord, args.key, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_auditKeyRecord_result({success: result});
          output.writeMessageBegin("auditKeyRecord", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_auditKeyRecord_result(err);
            output.writeMessageBegin("auditKeyRecord", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("auditKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.auditKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_auditKeyRecord_result((err != null ? err : {success: result}));
          output.writeMessageBegin("auditKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_auditKeyRecordStart = function(seqid, input, output)   {
    var args = new ConcourseService_auditKeyRecordStart_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.auditKeyRecordStart.length === 6) {
      Q.fcall(this._handler.auditKeyRecordStart, args.key, args.record, args.start, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_auditKeyRecordStart_result({success: result});
          output.writeMessageBegin("auditKeyRecordStart", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_auditKeyRecordStart_result(err);
            output.writeMessageBegin("auditKeyRecordStart", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("auditKeyRecordStart", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.auditKeyRecordStart(args.key, args.record, args.start, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_auditKeyRecordStart_result((err != null ? err : {success: result}));
          output.writeMessageBegin("auditKeyRecordStart", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditKeyRecordStart", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_auditKeyRecordStartstr = function(seqid, input, output)   {
    var args = new ConcourseService_auditKeyRecordStartstr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.auditKeyRecordStartstr.length === 6) {
      Q.fcall(this._handler.auditKeyRecordStartstr, args.key, args.record, args.start, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_auditKeyRecordStartstr_result({success: result});
          output.writeMessageBegin("auditKeyRecordStartstr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_auditKeyRecordStartstr_result(err);
            output.writeMessageBegin("auditKeyRecordStartstr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("auditKeyRecordStartstr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.auditKeyRecordStartstr(args.key, args.record, args.start, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_auditKeyRecordStartstr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("auditKeyRecordStartstr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditKeyRecordStartstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_auditKeyRecordStartEnd = function(seqid, input, output)   {
    var args = new ConcourseService_auditKeyRecordStartEnd_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.auditKeyRecordStartEnd.length === 7) {
      Q.fcall(this._handler.auditKeyRecordStartEnd, args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_auditKeyRecordStartEnd_result({success: result});
          output.writeMessageBegin("auditKeyRecordStartEnd", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_auditKeyRecordStartEnd_result(err);
            output.writeMessageBegin("auditKeyRecordStartEnd", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("auditKeyRecordStartEnd", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.auditKeyRecordStartEnd(args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_auditKeyRecordStartEnd_result((err != null ? err : {success: result}));
          output.writeMessageBegin("auditKeyRecordStartEnd", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditKeyRecordStartEnd", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_auditKeyRecordStartstrEndstr = function(seqid, input, output)   {
    var args = new ConcourseService_auditKeyRecordStartstrEndstr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.auditKeyRecordStartstrEndstr.length === 7) {
      Q.fcall(this._handler.auditKeyRecordStartstrEndstr, args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_auditKeyRecordStartstrEndstr_result({success: result});
          output.writeMessageBegin("auditKeyRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_auditKeyRecordStartstrEndstr_result(err);
            output.writeMessageBegin("auditKeyRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("auditKeyRecordStartstrEndstr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.auditKeyRecordStartstrEndstr(args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_auditKeyRecordStartstrEndstr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("auditKeyRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("auditKeyRecordStartstrEndstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_browseKey = function(seqid, input, output)   {
    var args = new ConcourseService_browseKey_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.browseKey.length === 4) {
      Q.fcall(this._handler.browseKey, args.key, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_browseKey_result({success: result});
          output.writeMessageBegin("browseKey", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_browseKey_result(err);
            output.writeMessageBegin("browseKey", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("browseKey", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.browseKey(args.key, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_browseKey_result((err != null ? err : {success: result}));
          output.writeMessageBegin("browseKey", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("browseKey", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_browseKeys = function(seqid, input, output)   {
    var args = new ConcourseService_browseKeys_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.browseKeys.length === 4) {
      Q.fcall(this._handler.browseKeys, args.keys, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_browseKeys_result({success: result});
          output.writeMessageBegin("browseKeys", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_browseKeys_result(err);
            output.writeMessageBegin("browseKeys", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("browseKeys", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.browseKeys(args.keys, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_browseKeys_result((err != null ? err : {success: result}));
          output.writeMessageBegin("browseKeys", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("browseKeys", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_browseKeyTime = function(seqid, input, output)   {
    var args = new ConcourseService_browseKeyTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.browseKeyTime.length === 5) {
      Q.fcall(this._handler.browseKeyTime, args.key, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_browseKeyTime_result({success: result});
          output.writeMessageBegin("browseKeyTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_browseKeyTime_result(err);
            output.writeMessageBegin("browseKeyTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("browseKeyTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.browseKeyTime(args.key, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_browseKeyTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("browseKeyTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("browseKeyTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_browseKeyTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_browseKeyTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.browseKeyTimestr.length === 5) {
      Q.fcall(this._handler.browseKeyTimestr, args.key, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_browseKeyTimestr_result({success: result});
          output.writeMessageBegin("browseKeyTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_browseKeyTimestr_result(err);
            output.writeMessageBegin("browseKeyTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("browseKeyTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.browseKeyTimestr(args.key, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_browseKeyTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("browseKeyTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("browseKeyTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_browseKeysTime = function(seqid, input, output)   {
    var args = new ConcourseService_browseKeysTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.browseKeysTime.length === 5) {
      Q.fcall(this._handler.browseKeysTime, args.keys, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_browseKeysTime_result({success: result});
          output.writeMessageBegin("browseKeysTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_browseKeysTime_result(err);
            output.writeMessageBegin("browseKeysTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("browseKeysTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.browseKeysTime(args.keys, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_browseKeysTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("browseKeysTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("browseKeysTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_browseKeysTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_browseKeysTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.browseKeysTimestr.length === 5) {
      Q.fcall(this._handler.browseKeysTimestr, args.keys, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_browseKeysTimestr_result({success: result});
          output.writeMessageBegin("browseKeysTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_browseKeysTimestr_result(err);
            output.writeMessageBegin("browseKeysTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("browseKeysTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.browseKeysTimestr(args.keys, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_browseKeysTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("browseKeysTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("browseKeysTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_chronologizeKeyRecord = function(seqid, input, output)   {
    var args = new ConcourseService_chronologizeKeyRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.chronologizeKeyRecord.length === 5) {
      Q.fcall(this._handler.chronologizeKeyRecord, args.key, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_chronologizeKeyRecord_result({success: result});
          output.writeMessageBegin("chronologizeKeyRecord", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_chronologizeKeyRecord_result(err);
            output.writeMessageBegin("chronologizeKeyRecord", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("chronologizeKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.chronologizeKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_chronologizeKeyRecord_result((err != null ? err : {success: result}));
          output.writeMessageBegin("chronologizeKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("chronologizeKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_chronologizeKeyRecordStart = function(seqid, input, output)   {
    var args = new ConcourseService_chronologizeKeyRecordStart_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.chronologizeKeyRecordStart.length === 6) {
      Q.fcall(this._handler.chronologizeKeyRecordStart, args.key, args.record, args.start, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_chronologizeKeyRecordStart_result({success: result});
          output.writeMessageBegin("chronologizeKeyRecordStart", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_chronologizeKeyRecordStart_result(err);
            output.writeMessageBegin("chronologizeKeyRecordStart", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("chronologizeKeyRecordStart", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.chronologizeKeyRecordStart(args.key, args.record, args.start, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_chronologizeKeyRecordStart_result((err != null ? err : {success: result}));
          output.writeMessageBegin("chronologizeKeyRecordStart", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("chronologizeKeyRecordStart", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_chronologizeKeyRecordStartstr = function(seqid, input, output)   {
    var args = new ConcourseService_chronologizeKeyRecordStartstr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.chronologizeKeyRecordStartstr.length === 6) {
      Q.fcall(this._handler.chronologizeKeyRecordStartstr, args.key, args.record, args.start, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_chronologizeKeyRecordStartstr_result({success: result});
          output.writeMessageBegin("chronologizeKeyRecordStartstr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_chronologizeKeyRecordStartstr_result(err);
            output.writeMessageBegin("chronologizeKeyRecordStartstr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("chronologizeKeyRecordStartstr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.chronologizeKeyRecordStartstr(args.key, args.record, args.start, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_chronologizeKeyRecordStartstr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("chronologizeKeyRecordStartstr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("chronologizeKeyRecordStartstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_chronologizeKeyRecordStartEnd = function(seqid, input, output)   {
    var args = new ConcourseService_chronologizeKeyRecordStartEnd_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.chronologizeKeyRecordStartEnd.length === 7) {
      Q.fcall(this._handler.chronologizeKeyRecordStartEnd, args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_chronologizeKeyRecordStartEnd_result({success: result});
          output.writeMessageBegin("chronologizeKeyRecordStartEnd", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_chronologizeKeyRecordStartEnd_result(err);
            output.writeMessageBegin("chronologizeKeyRecordStartEnd", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("chronologizeKeyRecordStartEnd", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.chronologizeKeyRecordStartEnd(args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_chronologizeKeyRecordStartEnd_result((err != null ? err : {success: result}));
          output.writeMessageBegin("chronologizeKeyRecordStartEnd", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("chronologizeKeyRecordStartEnd", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_chronologizeKeyRecordStartstrEndstr = function(seqid, input, output)   {
    var args = new ConcourseService_chronologizeKeyRecordStartstrEndstr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.chronologizeKeyRecordStartstrEndstr.length === 7) {
      Q.fcall(this._handler.chronologizeKeyRecordStartstrEndstr, args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_chronologizeKeyRecordStartstrEndstr_result({success: result});
          output.writeMessageBegin("chronologizeKeyRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_chronologizeKeyRecordStartstrEndstr_result(err);
            output.writeMessageBegin("chronologizeKeyRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("chronologizeKeyRecordStartstrEndstr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.chronologizeKeyRecordStartstrEndstr(args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_chronologizeKeyRecordStartstrEndstr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("chronologizeKeyRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("chronologizeKeyRecordStartstrEndstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_clearRecord = function(seqid, input, output)   {
    var args = new ConcourseService_clearRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.clearRecord.length === 4) {
      Q.fcall(this._handler.clearRecord, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_clearRecord_result({success: result});
          output.writeMessageBegin("clearRecord", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_clearRecord_result(err);
            output.writeMessageBegin("clearRecord", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("clearRecord", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.clearRecord(args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_clearRecord_result((err != null ? err : {success: result}));
          output.writeMessageBegin("clearRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clearRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_clearRecords = function(seqid, input, output)   {
    var args = new ConcourseService_clearRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.clearRecords.length === 4) {
      Q.fcall(this._handler.clearRecords, args.records, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_clearRecords_result({success: result});
          output.writeMessageBegin("clearRecords", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_clearRecords_result(err);
            output.writeMessageBegin("clearRecords", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("clearRecords", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.clearRecords(args.records, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_clearRecords_result((err != null ? err : {success: result}));
          output.writeMessageBegin("clearRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clearRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_clearKeyRecord = function(seqid, input, output)   {
    var args = new ConcourseService_clearKeyRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.clearKeyRecord.length === 5) {
      Q.fcall(this._handler.clearKeyRecord, args.key, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_clearKeyRecord_result({success: result});
          output.writeMessageBegin("clearKeyRecord", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_clearKeyRecord_result(err);
            output.writeMessageBegin("clearKeyRecord", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("clearKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.clearKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_clearKeyRecord_result((err != null ? err : {success: result}));
          output.writeMessageBegin("clearKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clearKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_clearKeysRecord = function(seqid, input, output)   {
    var args = new ConcourseService_clearKeysRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.clearKeysRecord.length === 5) {
      Q.fcall(this._handler.clearKeysRecord, args.keys, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_clearKeysRecord_result({success: result});
          output.writeMessageBegin("clearKeysRecord", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_clearKeysRecord_result(err);
            output.writeMessageBegin("clearKeysRecord", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("clearKeysRecord", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.clearKeysRecord(args.keys, args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_clearKeysRecord_result((err != null ? err : {success: result}));
          output.writeMessageBegin("clearKeysRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clearKeysRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_clearKeyRecords = function(seqid, input, output)   {
    var args = new ConcourseService_clearKeyRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.clearKeyRecords.length === 5) {
      Q.fcall(this._handler.clearKeyRecords, args.key, args.records, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_clearKeyRecords_result({success: result});
          output.writeMessageBegin("clearKeyRecords", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_clearKeyRecords_result(err);
            output.writeMessageBegin("clearKeyRecords", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("clearKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.clearKeyRecords(args.key, args.records, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_clearKeyRecords_result((err != null ? err : {success: result}));
          output.writeMessageBegin("clearKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clearKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_clearKeysRecords = function(seqid, input, output)   {
    var args = new ConcourseService_clearKeysRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.clearKeysRecords.length === 5) {
      Q.fcall(this._handler.clearKeysRecords, args.keys, args.records, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_clearKeysRecords_result({success: result});
          output.writeMessageBegin("clearKeysRecords", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_clearKeysRecords_result(err);
            output.writeMessageBegin("clearKeysRecords", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("clearKeysRecords", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.clearKeysRecords(args.keys, args.records, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_clearKeysRecords_result((err != null ? err : {success: result}));
          output.writeMessageBegin("clearKeysRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("clearKeysRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_commit = function(seqid, input, output)   {
    var args = new ConcourseService_commit_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.commit.length === 3) {
      Q.fcall(this._handler.commit, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_commit_result({success: result});
          output.writeMessageBegin("commit", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_commit_result(err);
            output.writeMessageBegin("commit", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("commit", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.commit(args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_commit_result((err != null ? err : {success: result}));
          output.writeMessageBegin("commit", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("commit", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_describe = function(seqid, input, output)   {
    var args = new ConcourseService_describe_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.describe.length === 3) {
      Q.fcall(this._handler.describe, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_describe_result({success: result});
          output.writeMessageBegin("describe", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_describe_result(err);
            output.writeMessageBegin("describe", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("describe", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.describe(args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_describe_result((err != null ? err : {success: result}));
          output.writeMessageBegin("describe", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describe", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_describeTime = function(seqid, input, output)   {
    var args = new ConcourseService_describeTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.describeTime.length === 4) {
      Q.fcall(this._handler.describeTime, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_describeTime_result({success: result});
          output.writeMessageBegin("describeTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_describeTime_result(err);
            output.writeMessageBegin("describeTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("describeTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.describeTime(args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_describeTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("describeTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describeTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_describeTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_describeTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.describeTimestr.length === 4) {
      Q.fcall(this._handler.describeTimestr, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_describeTimestr_result({success: result});
          output.writeMessageBegin("describeTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_describeTimestr_result(err);
            output.writeMessageBegin("describeTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("describeTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.describeTimestr(args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_describeTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("describeTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describeTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_describeRecord = function(seqid, input, output)   {
    var args = new ConcourseService_describeRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.describeRecord.length === 4) {
      Q.fcall(this._handler.describeRecord, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_describeRecord_result({success: result});
          output.writeMessageBegin("describeRecord", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_describeRecord_result(err);
            output.writeMessageBegin("describeRecord", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("describeRecord", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.describeRecord(args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_describeRecord_result((err != null ? err : {success: result}));
          output.writeMessageBegin("describeRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describeRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_describeRecordTime = function(seqid, input, output)   {
    var args = new ConcourseService_describeRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.describeRecordTime.length === 5) {
      Q.fcall(this._handler.describeRecordTime, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_describeRecordTime_result({success: result});
          output.writeMessageBegin("describeRecordTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_describeRecordTime_result(err);
            output.writeMessageBegin("describeRecordTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("describeRecordTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.describeRecordTime(args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_describeRecordTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("describeRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describeRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_describeRecordTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_describeRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.describeRecordTimestr.length === 5) {
      Q.fcall(this._handler.describeRecordTimestr, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_describeRecordTimestr_result({success: result});
          output.writeMessageBegin("describeRecordTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_describeRecordTimestr_result(err);
            output.writeMessageBegin("describeRecordTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("describeRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.describeRecordTimestr(args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_describeRecordTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("describeRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describeRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_describeRecords = function(seqid, input, output)   {
    var args = new ConcourseService_describeRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.describeRecords.length === 4) {
      Q.fcall(this._handler.describeRecords, args.records, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_describeRecords_result({success: result});
          output.writeMessageBegin("describeRecords", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_describeRecords_result(err);
            output.writeMessageBegin("describeRecords", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("describeRecords", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.describeRecords(args.records, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_describeRecords_result((err != null ? err : {success: result}));
          output.writeMessageBegin("describeRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describeRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_describeRecordsTime = function(seqid, input, output)   {
    var args = new ConcourseService_describeRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.describeRecordsTime.length === 5) {
      Q.fcall(this._handler.describeRecordsTime, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_describeRecordsTime_result({success: result});
          output.writeMessageBegin("describeRecordsTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_describeRecordsTime_result(err);
            output.writeMessageBegin("describeRecordsTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("describeRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.describeRecordsTime(args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_describeRecordsTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("describeRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describeRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_describeRecordsTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_describeRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.describeRecordsTimestr.length === 5) {
      Q.fcall(this._handler.describeRecordsTimestr, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_describeRecordsTimestr_result({success: result});
          output.writeMessageBegin("describeRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_describeRecordsTimestr_result(err);
            output.writeMessageBegin("describeRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("describeRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.describeRecordsTimestr(args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_describeRecordsTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("describeRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("describeRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_diffRecordStart = function(seqid, input, output)   {
    var args = new ConcourseService_diffRecordStart_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.diffRecordStart.length === 5) {
      Q.fcall(this._handler.diffRecordStart, args.record, args.start, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_diffRecordStart_result({success: result});
          output.writeMessageBegin("diffRecordStart", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_diffRecordStart_result(err);
            output.writeMessageBegin("diffRecordStart", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("diffRecordStart", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.diffRecordStart(args.record, args.start, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_diffRecordStart_result((err != null ? err : {success: result}));
          output.writeMessageBegin("diffRecordStart", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffRecordStart", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_diffRecordStartstr = function(seqid, input, output)   {
    var args = new ConcourseService_diffRecordStartstr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.diffRecordStartstr.length === 5) {
      Q.fcall(this._handler.diffRecordStartstr, args.record, args.start, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_diffRecordStartstr_result({success: result});
          output.writeMessageBegin("diffRecordStartstr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_diffRecordStartstr_result(err);
            output.writeMessageBegin("diffRecordStartstr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("diffRecordStartstr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.diffRecordStartstr(args.record, args.start, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_diffRecordStartstr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("diffRecordStartstr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffRecordStartstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_diffRecordStartEnd = function(seqid, input, output)   {
    var args = new ConcourseService_diffRecordStartEnd_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.diffRecordStartEnd.length === 6) {
      Q.fcall(this._handler.diffRecordStartEnd, args.record, args.start, args.tend, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_diffRecordStartEnd_result({success: result});
          output.writeMessageBegin("diffRecordStartEnd", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_diffRecordStartEnd_result(err);
            output.writeMessageBegin("diffRecordStartEnd", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("diffRecordStartEnd", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.diffRecordStartEnd(args.record, args.start, args.tend, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_diffRecordStartEnd_result((err != null ? err : {success: result}));
          output.writeMessageBegin("diffRecordStartEnd", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffRecordStartEnd", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_diffRecordStartstrEndstr = function(seqid, input, output)   {
    var args = new ConcourseService_diffRecordStartstrEndstr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.diffRecordStartstrEndstr.length === 6) {
      Q.fcall(this._handler.diffRecordStartstrEndstr, args.record, args.start, args.tend, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_diffRecordStartstrEndstr_result({success: result});
          output.writeMessageBegin("diffRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_diffRecordStartstrEndstr_result(err);
            output.writeMessageBegin("diffRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("diffRecordStartstrEndstr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.diffRecordStartstrEndstr(args.record, args.start, args.tend, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_diffRecordStartstrEndstr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("diffRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffRecordStartstrEndstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_diffKeyRecordStart = function(seqid, input, output)   {
    var args = new ConcourseService_diffKeyRecordStart_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.diffKeyRecordStart.length === 6) {
      Q.fcall(this._handler.diffKeyRecordStart, args.key, args.record, args.start, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_diffKeyRecordStart_result({success: result});
          output.writeMessageBegin("diffKeyRecordStart", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_diffKeyRecordStart_result(err);
            output.writeMessageBegin("diffKeyRecordStart", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("diffKeyRecordStart", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.diffKeyRecordStart(args.key, args.record, args.start, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_diffKeyRecordStart_result((err != null ? err : {success: result}));
          output.writeMessageBegin("diffKeyRecordStart", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffKeyRecordStart", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_diffKeyRecordStartstr = function(seqid, input, output)   {
    var args = new ConcourseService_diffKeyRecordStartstr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.diffKeyRecordStartstr.length === 6) {
      Q.fcall(this._handler.diffKeyRecordStartstr, args.key, args.record, args.start, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_diffKeyRecordStartstr_result({success: result});
          output.writeMessageBegin("diffKeyRecordStartstr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_diffKeyRecordStartstr_result(err);
            output.writeMessageBegin("diffKeyRecordStartstr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("diffKeyRecordStartstr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.diffKeyRecordStartstr(args.key, args.record, args.start, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_diffKeyRecordStartstr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("diffKeyRecordStartstr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffKeyRecordStartstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_diffKeyRecordStartEnd = function(seqid, input, output)   {
    var args = new ConcourseService_diffKeyRecordStartEnd_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.diffKeyRecordStartEnd.length === 7) {
      Q.fcall(this._handler.diffKeyRecordStartEnd, args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_diffKeyRecordStartEnd_result({success: result});
          output.writeMessageBegin("diffKeyRecordStartEnd", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_diffKeyRecordStartEnd_result(err);
            output.writeMessageBegin("diffKeyRecordStartEnd", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("diffKeyRecordStartEnd", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.diffKeyRecordStartEnd(args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_diffKeyRecordStartEnd_result((err != null ? err : {success: result}));
          output.writeMessageBegin("diffKeyRecordStartEnd", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffKeyRecordStartEnd", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_diffKeyRecordStartstrEndstr = function(seqid, input, output)   {
    var args = new ConcourseService_diffKeyRecordStartstrEndstr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.diffKeyRecordStartstrEndstr.length === 7) {
      Q.fcall(this._handler.diffKeyRecordStartstrEndstr, args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_diffKeyRecordStartstrEndstr_result({success: result});
          output.writeMessageBegin("diffKeyRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_diffKeyRecordStartstrEndstr_result(err);
            output.writeMessageBegin("diffKeyRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("diffKeyRecordStartstrEndstr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.diffKeyRecordStartstrEndstr(args.key, args.record, args.start, args.tend, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_diffKeyRecordStartstrEndstr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("diffKeyRecordStartstrEndstr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffKeyRecordStartstrEndstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_diffKeyStart = function(seqid, input, output)   {
    var args = new ConcourseService_diffKeyStart_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.diffKeyStart.length === 5) {
      Q.fcall(this._handler.diffKeyStart, args.key, args.start, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_diffKeyStart_result({success: result});
          output.writeMessageBegin("diffKeyStart", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_diffKeyStart_result(err);
            output.writeMessageBegin("diffKeyStart", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("diffKeyStart", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.diffKeyStart(args.key, args.start, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_diffKeyStart_result((err != null ? err : {success: result}));
          output.writeMessageBegin("diffKeyStart", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffKeyStart", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_diffKeyStartstr = function(seqid, input, output)   {
    var args = new ConcourseService_diffKeyStartstr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.diffKeyStartstr.length === 5) {
      Q.fcall(this._handler.diffKeyStartstr, args.key, args.start, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_diffKeyStartstr_result({success: result});
          output.writeMessageBegin("diffKeyStartstr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_diffKeyStartstr_result(err);
            output.writeMessageBegin("diffKeyStartstr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("diffKeyStartstr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.diffKeyStartstr(args.key, args.start, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_diffKeyStartstr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("diffKeyStartstr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffKeyStartstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_diffKeyStartEnd = function(seqid, input, output)   {
    var args = new ConcourseService_diffKeyStartEnd_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.diffKeyStartEnd.length === 6) {
      Q.fcall(this._handler.diffKeyStartEnd, args.key, args.start, args.tend, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_diffKeyStartEnd_result({success: result});
          output.writeMessageBegin("diffKeyStartEnd", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_diffKeyStartEnd_result(err);
            output.writeMessageBegin("diffKeyStartEnd", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("diffKeyStartEnd", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.diffKeyStartEnd(args.key, args.start, args.tend, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_diffKeyStartEnd_result((err != null ? err : {success: result}));
          output.writeMessageBegin("diffKeyStartEnd", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffKeyStartEnd", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_diffKeyStartstrEndstr = function(seqid, input, output)   {
    var args = new ConcourseService_diffKeyStartstrEndstr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.diffKeyStartstrEndstr.length === 6) {
      Q.fcall(this._handler.diffKeyStartstrEndstr, args.key, args.start, args.tend, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_diffKeyStartstrEndstr_result({success: result});
          output.writeMessageBegin("diffKeyStartstrEndstr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_diffKeyStartstrEndstr_result(err);
            output.writeMessageBegin("diffKeyStartstrEndstr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("diffKeyStartstrEndstr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.diffKeyStartstrEndstr(args.key, args.start, args.tend, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_diffKeyStartstrEndstr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("diffKeyStartstrEndstr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("diffKeyStartstrEndstr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_invokePlugin = function(seqid, input, output)   {
    var args = new ConcourseService_invokePlugin_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.invokePlugin.length === 6) {
      Q.fcall(this._handler.invokePlugin, args.id, args.method, args.params, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_invokePlugin_result({success: result});
          output.writeMessageBegin("invokePlugin", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_invokePlugin_result(err);
            output.writeMessageBegin("invokePlugin", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("invokePlugin", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.invokePlugin(args.id, args.method, args.params, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_invokePlugin_result((err != null ? err : {success: result}));
          output.writeMessageBegin("invokePlugin", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("invokePlugin", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_login = function(seqid, input, output)   {
    var args = new ConcourseService_login_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.login.length === 3) {
      Q.fcall(this._handler.login, args.username, args.password, args.environment)
        .then(function(result) {
          var result = new ConcourseService_login_result({success: result});
          output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_login_result(err);
            output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("login", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.login(args.username, args.password, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_login_result((err != null ? err : {success: result}));
          output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("login", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_logout = function(seqid, input, output)   {
    var args = new ConcourseService_logout_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.logout.length === 2) {
      Q.fcall(this._handler.logout, args.token, args.environment)
        .then(function(result) {
          var result = new ConcourseService_logout_result({success: result});
          output.writeMessageBegin("logout", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_logout_result(err);
            output.writeMessageBegin("logout", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("logout", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.logout(args.token, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_logout_result((err != null ? err : {success: result}));
          output.writeMessageBegin("logout", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("logout", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_stage = function(seqid, input, output)   {
    var args = new ConcourseService_stage_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.stage.length === 2) {
      Q.fcall(this._handler.stage, args.token, args.environment)
        .then(function(result) {
          var result = new ConcourseService_stage_result({success: result});
          output.writeMessageBegin("stage", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_stage_result(err);
            output.writeMessageBegin("stage", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("stage", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.stage(args.token, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_stage_result((err != null ? err : {success: result}));
          output.writeMessageBegin("stage", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("stage", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_insertJson = function(seqid, input, output)   {
    var args = new ConcourseService_insertJson_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.insertJson.length === 4) {
      Q.fcall(this._handler.insertJson, args.json, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_insertJson_result({success: result});
          output.writeMessageBegin("insertJson", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_insertJson_result(err);
            output.writeMessageBegin("insertJson", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("insertJson", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.insertJson(args.json, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_insertJson_result((err != null ? err : {success: result}));
          output.writeMessageBegin("insertJson", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("insertJson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_insertJsonRecord = function(seqid, input, output)   {
    var args = new ConcourseService_insertJsonRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.insertJsonRecord.length === 5) {
      Q.fcall(this._handler.insertJsonRecord, args.json, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_insertJsonRecord_result({success: result});
          output.writeMessageBegin("insertJsonRecord", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_insertJsonRecord_result(err);
            output.writeMessageBegin("insertJsonRecord", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("insertJsonRecord", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.insertJsonRecord(args.json, args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_insertJsonRecord_result((err != null ? err : {success: result}));
          output.writeMessageBegin("insertJsonRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("insertJsonRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_insertJsonRecords = function(seqid, input, output)   {
    var args = new ConcourseService_insertJsonRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.insertJsonRecords.length === 5) {
      Q.fcall(this._handler.insertJsonRecords, args.json, args.records, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_insertJsonRecords_result({success: result});
          output.writeMessageBegin("insertJsonRecords", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_insertJsonRecords_result(err);
            output.writeMessageBegin("insertJsonRecords", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("insertJsonRecords", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.insertJsonRecords(args.json, args.records, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_insertJsonRecords_result((err != null ? err : {success: result}));
          output.writeMessageBegin("insertJsonRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("insertJsonRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_removeKeyValueRecord = function(seqid, input, output)   {
    var args = new ConcourseService_removeKeyValueRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.removeKeyValueRecord.length === 6) {
      Q.fcall(this._handler.removeKeyValueRecord, args.key, args.value, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_removeKeyValueRecord_result({success: result});
          output.writeMessageBegin("removeKeyValueRecord", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_removeKeyValueRecord_result(err);
            output.writeMessageBegin("removeKeyValueRecord", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("removeKeyValueRecord", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.removeKeyValueRecord(args.key, args.value, args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_removeKeyValueRecord_result((err != null ? err : {success: result}));
          output.writeMessageBegin("removeKeyValueRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeKeyValueRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_removeKeyValueRecords = function(seqid, input, output)   {
    var args = new ConcourseService_removeKeyValueRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.removeKeyValueRecords.length === 6) {
      Q.fcall(this._handler.removeKeyValueRecords, args.key, args.value, args.records, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_removeKeyValueRecords_result({success: result});
          output.writeMessageBegin("removeKeyValueRecords", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_removeKeyValueRecords_result(err);
            output.writeMessageBegin("removeKeyValueRecords", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("removeKeyValueRecords", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.removeKeyValueRecords(args.key, args.value, args.records, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_removeKeyValueRecords_result((err != null ? err : {success: result}));
          output.writeMessageBegin("removeKeyValueRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeKeyValueRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_setKeyValueRecord = function(seqid, input, output)   {
    var args = new ConcourseService_setKeyValueRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.setKeyValueRecord.length === 6) {
      Q.fcall(this._handler.setKeyValueRecord, args.key, args.value, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_setKeyValueRecord_result({success: result});
          output.writeMessageBegin("setKeyValueRecord", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_setKeyValueRecord_result(err);
            output.writeMessageBegin("setKeyValueRecord", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("setKeyValueRecord", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.setKeyValueRecord(args.key, args.value, args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_setKeyValueRecord_result((err != null ? err : {success: result}));
          output.writeMessageBegin("setKeyValueRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setKeyValueRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_setKeyValue = function(seqid, input, output)   {
    var args = new ConcourseService_setKeyValue_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.setKeyValue.length === 5) {
      Q.fcall(this._handler.setKeyValue, args.key, args.value, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_setKeyValue_result({success: result});
          output.writeMessageBegin("setKeyValue", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_setKeyValue_result(err);
            output.writeMessageBegin("setKeyValue", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("setKeyValue", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.setKeyValue(args.key, args.value, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_setKeyValue_result((err != null ? err : {success: result}));
          output.writeMessageBegin("setKeyValue", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setKeyValue", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_setKeyValueRecords = function(seqid, input, output)   {
    var args = new ConcourseService_setKeyValueRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.setKeyValueRecords.length === 6) {
      Q.fcall(this._handler.setKeyValueRecords, args.key, args.value, args.records, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_setKeyValueRecords_result({success: result});
          output.writeMessageBegin("setKeyValueRecords", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_setKeyValueRecords_result(err);
            output.writeMessageBegin("setKeyValueRecords", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("setKeyValueRecords", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.setKeyValueRecords(args.key, args.value, args.records, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_setKeyValueRecords_result((err != null ? err : {success: result}));
          output.writeMessageBegin("setKeyValueRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setKeyValueRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_reconcileKeyRecordValues = function(seqid, input, output)   {
    var args = new ConcourseService_reconcileKeyRecordValues_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.reconcileKeyRecordValues.length === 6) {
      Q.fcall(this._handler.reconcileKeyRecordValues, args.key, args.record, args.values, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_reconcileKeyRecordValues_result({success: result});
          output.writeMessageBegin("reconcileKeyRecordValues", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_reconcileKeyRecordValues_result(err);
            output.writeMessageBegin("reconcileKeyRecordValues", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("reconcileKeyRecordValues", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.reconcileKeyRecordValues(args.key, args.record, args.values, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_reconcileKeyRecordValues_result((err != null ? err : {success: result}));
          output.writeMessageBegin("reconcileKeyRecordValues", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("reconcileKeyRecordValues", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_inventory = function(seqid, input, output)   {
    var args = new ConcourseService_inventory_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.inventory.length === 3) {
      Q.fcall(this._handler.inventory, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_inventory_result({success: result});
          output.writeMessageBegin("inventory", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_inventory_result(err);
            output.writeMessageBegin("inventory", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("inventory", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.inventory(args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_inventory_result((err != null ? err : {success: result}));
          output.writeMessageBegin("inventory", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("inventory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectRecord = function(seqid, input, output)   {
    var args = new ConcourseService_selectRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectRecord.length === 4) {
      Q.fcall(this._handler.selectRecord, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectRecord_result({success: result});
          output.writeMessageBegin("selectRecord", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectRecord_result(err);
            output.writeMessageBegin("selectRecord", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectRecord", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectRecord(args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectRecord_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectRecords = function(seqid, input, output)   {
    var args = new ConcourseService_selectRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectRecords.length === 4) {
      Q.fcall(this._handler.selectRecords, args.records, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectRecords_result({success: result});
          output.writeMessageBegin("selectRecords", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectRecords_result(err);
            output.writeMessageBegin("selectRecords", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectRecords", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectRecords(args.records, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectRecords_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectRecordTime = function(seqid, input, output)   {
    var args = new ConcourseService_selectRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectRecordTime.length === 5) {
      Q.fcall(this._handler.selectRecordTime, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectRecordTime_result({success: result});
          output.writeMessageBegin("selectRecordTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectRecordTime_result(err);
            output.writeMessageBegin("selectRecordTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectRecordTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectRecordTime(args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectRecordTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectRecordTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_selectRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectRecordTimestr.length === 5) {
      Q.fcall(this._handler.selectRecordTimestr, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectRecordTimestr_result({success: result});
          output.writeMessageBegin("selectRecordTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectRecordTimestr_result(err);
            output.writeMessageBegin("selectRecordTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectRecordTimestr(args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectRecordTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectRecordsTime = function(seqid, input, output)   {
    var args = new ConcourseService_selectRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectRecordsTime.length === 5) {
      Q.fcall(this._handler.selectRecordsTime, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectRecordsTime_result({success: result});
          output.writeMessageBegin("selectRecordsTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectRecordsTime_result(err);
            output.writeMessageBegin("selectRecordsTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectRecordsTime(args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectRecordsTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectRecordsTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_selectRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectRecordsTimestr.length === 5) {
      Q.fcall(this._handler.selectRecordsTimestr, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectRecordsTimestr_result({success: result});
          output.writeMessageBegin("selectRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectRecordsTimestr_result(err);
            output.writeMessageBegin("selectRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectRecordsTimestr(args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectRecordsTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectKeyRecord = function(seqid, input, output)   {
    var args = new ConcourseService_selectKeyRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeyRecord.length === 5) {
      Q.fcall(this._handler.selectKeyRecord, args.key, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectKeyRecord_result({success: result});
          output.writeMessageBegin("selectKeyRecord", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectKeyRecord_result(err);
            output.writeMessageBegin("selectKeyRecord", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectKeyRecord_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectKeyRecordTime = function(seqid, input, output)   {
    var args = new ConcourseService_selectKeyRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeyRecordTime.length === 6) {
      Q.fcall(this._handler.selectKeyRecordTime, args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectKeyRecordTime_result({success: result});
          output.writeMessageBegin("selectKeyRecordTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectKeyRecordTime_result(err);
            output.writeMessageBegin("selectKeyRecordTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectKeyRecordTime(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectKeyRecordTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectKeyRecordTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_selectKeyRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeyRecordTimestr.length === 6) {
      Q.fcall(this._handler.selectKeyRecordTimestr, args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectKeyRecordTimestr_result({success: result});
          output.writeMessageBegin("selectKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectKeyRecordTimestr_result(err);
            output.writeMessageBegin("selectKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectKeyRecordTimestr(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectKeyRecordTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectKeysRecord = function(seqid, input, output)   {
    var args = new ConcourseService_selectKeysRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeysRecord.length === 5) {
      Q.fcall(this._handler.selectKeysRecord, args.keys, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectKeysRecord_result({success: result});
          output.writeMessageBegin("selectKeysRecord", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectKeysRecord_result(err);
            output.writeMessageBegin("selectKeysRecord", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectKeysRecord", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectKeysRecord(args.keys, args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectKeysRecord_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectKeysRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectKeysRecordTime = function(seqid, input, output)   {
    var args = new ConcourseService_selectKeysRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeysRecordTime.length === 6) {
      Q.fcall(this._handler.selectKeysRecordTime, args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectKeysRecordTime_result({success: result});
          output.writeMessageBegin("selectKeysRecordTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectKeysRecordTime_result(err);
            output.writeMessageBegin("selectKeysRecordTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectKeysRecordTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectKeysRecordTime(args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectKeysRecordTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectKeysRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectKeysRecordTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_selectKeysRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeysRecordTimestr.length === 6) {
      Q.fcall(this._handler.selectKeysRecordTimestr, args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectKeysRecordTimestr_result({success: result});
          output.writeMessageBegin("selectKeysRecordTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectKeysRecordTimestr_result(err);
            output.writeMessageBegin("selectKeysRecordTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectKeysRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectKeysRecordTimestr(args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectKeysRecordTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectKeysRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectKeysRecords = function(seqid, input, output)   {
    var args = new ConcourseService_selectKeysRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeysRecords.length === 5) {
      Q.fcall(this._handler.selectKeysRecords, args.keys, args.records, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectKeysRecords_result({success: result});
          output.writeMessageBegin("selectKeysRecords", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectKeysRecords_result(err);
            output.writeMessageBegin("selectKeysRecords", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectKeysRecords", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectKeysRecords(args.keys, args.records, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectKeysRecords_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectKeysRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectKeyRecords = function(seqid, input, output)   {
    var args = new ConcourseService_selectKeyRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeyRecords.length === 5) {
      Q.fcall(this._handler.selectKeyRecords, args.key, args.records, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectKeyRecords_result({success: result});
          output.writeMessageBegin("selectKeyRecords", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectKeyRecords_result(err);
            output.writeMessageBegin("selectKeyRecords", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectKeyRecords(args.key, args.records, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectKeyRecords_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectKeyRecordsTime = function(seqid, input, output)   {
    var args = new ConcourseService_selectKeyRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeyRecordsTime.length === 6) {
      Q.fcall(this._handler.selectKeyRecordsTime, args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectKeyRecordsTime_result({success: result});
          output.writeMessageBegin("selectKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectKeyRecordsTime_result(err);
            output.writeMessageBegin("selectKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectKeyRecordsTime(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectKeyRecordsTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectKeyRecordsTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_selectKeyRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeyRecordsTimestr.length === 6) {
      Q.fcall(this._handler.selectKeyRecordsTimestr, args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectKeyRecordsTimestr_result({success: result});
          output.writeMessageBegin("selectKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectKeyRecordsTimestr_result(err);
            output.writeMessageBegin("selectKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectKeyRecordsTimestr(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectKeyRecordsTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectKeysRecordsTime = function(seqid, input, output)   {
    var args = new ConcourseService_selectKeysRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeysRecordsTime.length === 6) {
      Q.fcall(this._handler.selectKeysRecordsTime, args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectKeysRecordsTime_result({success: result});
          output.writeMessageBegin("selectKeysRecordsTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectKeysRecordsTime_result(err);
            output.writeMessageBegin("selectKeysRecordsTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectKeysRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectKeysRecordsTime(args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectKeysRecordsTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectKeysRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectKeysRecordsTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_selectKeysRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeysRecordsTimestr.length === 6) {
      Q.fcall(this._handler.selectKeysRecordsTimestr, args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectKeysRecordsTimestr_result({success: result});
          output.writeMessageBegin("selectKeysRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectKeysRecordsTimestr_result(err);
            output.writeMessageBegin("selectKeysRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectKeysRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectKeysRecordsTimestr(args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectKeysRecordsTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectKeysRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectCriteria = function(seqid, input, output)   {
    var args = new ConcourseService_selectCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectCriteria.length === 4) {
      Q.fcall(this._handler.selectCriteria, args.criteria, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectCriteria_result({success: result});
          output.writeMessageBegin("selectCriteria", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectCriteria_result(err);
            output.writeMessageBegin("selectCriteria", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectCriteria", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectCriteria(args.criteria, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectCriteria_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectCcl = function(seqid, input, output)   {
    var args = new ConcourseService_selectCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectCcl.length === 4) {
      Q.fcall(this._handler.selectCcl, args.ccl, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectCcl_result({success: result});
          output.writeMessageBegin("selectCcl", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectCcl_result(err);
            output.writeMessageBegin("selectCcl", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectCcl", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectCcl(args.ccl, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectCcl_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectCriteriaTime = function(seqid, input, output)   {
    var args = new ConcourseService_selectCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectCriteriaTime.length === 5) {
      Q.fcall(this._handler.selectCriteriaTime, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectCriteriaTime_result({success: result});
          output.writeMessageBegin("selectCriteriaTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectCriteriaTime_result(err);
            output.writeMessageBegin("selectCriteriaTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectCriteriaTime(args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectCriteriaTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectCriteriaTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_selectCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectCriteriaTimestr.length === 5) {
      Q.fcall(this._handler.selectCriteriaTimestr, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectCriteriaTimestr_result({success: result});
          output.writeMessageBegin("selectCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectCriteriaTimestr_result(err);
            output.writeMessageBegin("selectCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectCriteriaTimestr(args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectCriteriaTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectCclTime = function(seqid, input, output)   {
    var args = new ConcourseService_selectCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectCclTime.length === 5) {
      Q.fcall(this._handler.selectCclTime, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectCclTime_result({success: result});
          output.writeMessageBegin("selectCclTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectCclTime_result(err);
            output.writeMessageBegin("selectCclTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectCclTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectCclTime(args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectCclTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectCclTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_selectCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectCclTimestr.length === 5) {
      Q.fcall(this._handler.selectCclTimestr, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectCclTimestr_result({success: result});
          output.writeMessageBegin("selectCclTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectCclTimestr_result(err);
            output.writeMessageBegin("selectCclTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectCclTimestr(args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectCclTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectKeyCriteria = function(seqid, input, output)   {
    var args = new ConcourseService_selectKeyCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeyCriteria.length === 5) {
      Q.fcall(this._handler.selectKeyCriteria, args.key, args.criteria, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectKeyCriteria_result({success: result});
          output.writeMessageBegin("selectKeyCriteria", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectKeyCriteria_result(err);
            output.writeMessageBegin("selectKeyCriteria", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectKeyCriteria(args.key, args.criteria, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectKeyCriteria_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectKeyCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectKeyCcl = function(seqid, input, output)   {
    var args = new ConcourseService_selectKeyCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeyCcl.length === 5) {
      Q.fcall(this._handler.selectKeyCcl, args.key, args.ccl, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectKeyCcl_result({success: result});
          output.writeMessageBegin("selectKeyCcl", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectKeyCcl_result(err);
            output.writeMessageBegin("selectKeyCcl", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectKeyCcl(args.key, args.ccl, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectKeyCcl_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectKeyCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectKeyCriteriaTime = function(seqid, input, output)   {
    var args = new ConcourseService_selectKeyCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeyCriteriaTime.length === 6) {
      Q.fcall(this._handler.selectKeyCriteriaTime, args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectKeyCriteriaTime_result({success: result});
          output.writeMessageBegin("selectKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectKeyCriteriaTime_result(err);
            output.writeMessageBegin("selectKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectKeyCriteriaTime(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectKeyCriteriaTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectKeyCriteriaTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_selectKeyCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeyCriteriaTimestr.length === 6) {
      Q.fcall(this._handler.selectKeyCriteriaTimestr, args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectKeyCriteriaTimestr_result({success: result});
          output.writeMessageBegin("selectKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectKeyCriteriaTimestr_result(err);
            output.writeMessageBegin("selectKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectKeyCriteriaTimestr(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectKeyCriteriaTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectKeyCclTime = function(seqid, input, output)   {
    var args = new ConcourseService_selectKeyCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeyCclTime.length === 6) {
      Q.fcall(this._handler.selectKeyCclTime, args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectKeyCclTime_result({success: result});
          output.writeMessageBegin("selectKeyCclTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectKeyCclTime_result(err);
            output.writeMessageBegin("selectKeyCclTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectKeyCclTime(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectKeyCclTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectKeyCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectKeyCclTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_selectKeyCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeyCclTimestr.length === 6) {
      Q.fcall(this._handler.selectKeyCclTimestr, args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectKeyCclTimestr_result({success: result});
          output.writeMessageBegin("selectKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectKeyCclTimestr_result(err);
            output.writeMessageBegin("selectKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectKeyCclTimestr(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectKeyCclTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectKeysCriteria = function(seqid, input, output)   {
    var args = new ConcourseService_selectKeysCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeysCriteria.length === 5) {
      Q.fcall(this._handler.selectKeysCriteria, args.keys, args.criteria, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectKeysCriteria_result({success: result});
          output.writeMessageBegin("selectKeysCriteria", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectKeysCriteria_result(err);
            output.writeMessageBegin("selectKeysCriteria", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectKeysCriteria", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectKeysCriteria(args.keys, args.criteria, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectKeysCriteria_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectKeysCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectKeysCcl = function(seqid, input, output)   {
    var args = new ConcourseService_selectKeysCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeysCcl.length === 5) {
      Q.fcall(this._handler.selectKeysCcl, args.keys, args.ccl, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectKeysCcl_result({success: result});
          output.writeMessageBegin("selectKeysCcl", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectKeysCcl_result(err);
            output.writeMessageBegin("selectKeysCcl", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectKeysCcl", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectKeysCcl(args.keys, args.ccl, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectKeysCcl_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectKeysCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectKeysCriteriaTime = function(seqid, input, output)   {
    var args = new ConcourseService_selectKeysCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeysCriteriaTime.length === 6) {
      Q.fcall(this._handler.selectKeysCriteriaTime, args.keys, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectKeysCriteriaTime_result({success: result});
          output.writeMessageBegin("selectKeysCriteriaTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectKeysCriteriaTime_result(err);
            output.writeMessageBegin("selectKeysCriteriaTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectKeysCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectKeysCriteriaTime(args.keys, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectKeysCriteriaTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectKeysCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectKeysCriteriaTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_selectKeysCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeysCriteriaTimestr.length === 6) {
      Q.fcall(this._handler.selectKeysCriteriaTimestr, args.keys, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectKeysCriteriaTimestr_result({success: result});
          output.writeMessageBegin("selectKeysCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectKeysCriteriaTimestr_result(err);
            output.writeMessageBegin("selectKeysCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectKeysCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectKeysCriteriaTimestr(args.keys, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectKeysCriteriaTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectKeysCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectKeysCclTime = function(seqid, input, output)   {
    var args = new ConcourseService_selectKeysCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeysCclTime.length === 6) {
      Q.fcall(this._handler.selectKeysCclTime, args.keys, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectKeysCclTime_result({success: result});
          output.writeMessageBegin("selectKeysCclTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectKeysCclTime_result(err);
            output.writeMessageBegin("selectKeysCclTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectKeysCclTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectKeysCclTime(args.keys, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectKeysCclTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectKeysCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_selectKeysCclTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_selectKeysCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.selectKeysCclTimestr.length === 6) {
      Q.fcall(this._handler.selectKeysCclTimestr, args.keys, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_selectKeysCclTimestr_result({success: result});
          output.writeMessageBegin("selectKeysCclTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_selectKeysCclTimestr_result(err);
            output.writeMessageBegin("selectKeysCclTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("selectKeysCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.selectKeysCclTimestr(args.keys, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_selectKeysCclTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("selectKeysCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("selectKeysCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getKeyRecord = function(seqid, input, output)   {
    var args = new ConcourseService_getKeyRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeyRecord.length === 5) {
      Q.fcall(this._handler.getKeyRecord, args.key, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getKeyRecord_result({success: result});
          output.writeMessageBegin("getKeyRecord", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getKeyRecord_result(err);
            output.writeMessageBegin("getKeyRecord", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getKeyRecord_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getKeyRecordTime = function(seqid, input, output)   {
    var args = new ConcourseService_getKeyRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeyRecordTime.length === 6) {
      Q.fcall(this._handler.getKeyRecordTime, args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getKeyRecordTime_result({success: result});
          output.writeMessageBegin("getKeyRecordTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getKeyRecordTime_result(err);
            output.writeMessageBegin("getKeyRecordTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getKeyRecordTime(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getKeyRecordTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getKeyRecordTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_getKeyRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeyRecordTimestr.length === 6) {
      Q.fcall(this._handler.getKeyRecordTimestr, args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getKeyRecordTimestr_result({success: result});
          output.writeMessageBegin("getKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getKeyRecordTimestr_result(err);
            output.writeMessageBegin("getKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getKeyRecordTimestr(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getKeyRecordTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getKeysRecord = function(seqid, input, output)   {
    var args = new ConcourseService_getKeysRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeysRecord.length === 5) {
      Q.fcall(this._handler.getKeysRecord, args.keys, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getKeysRecord_result({success: result});
          output.writeMessageBegin("getKeysRecord", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getKeysRecord_result(err);
            output.writeMessageBegin("getKeysRecord", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getKeysRecord", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getKeysRecord(args.keys, args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getKeysRecord_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getKeysRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getKeysRecordTime = function(seqid, input, output)   {
    var args = new ConcourseService_getKeysRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeysRecordTime.length === 6) {
      Q.fcall(this._handler.getKeysRecordTime, args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getKeysRecordTime_result({success: result});
          output.writeMessageBegin("getKeysRecordTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getKeysRecordTime_result(err);
            output.writeMessageBegin("getKeysRecordTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getKeysRecordTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getKeysRecordTime(args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getKeysRecordTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getKeysRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getKeysRecordTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_getKeysRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeysRecordTimestr.length === 6) {
      Q.fcall(this._handler.getKeysRecordTimestr, args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getKeysRecordTimestr_result({success: result});
          output.writeMessageBegin("getKeysRecordTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getKeysRecordTimestr_result(err);
            output.writeMessageBegin("getKeysRecordTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getKeysRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getKeysRecordTimestr(args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getKeysRecordTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getKeysRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getKeysRecords = function(seqid, input, output)   {
    var args = new ConcourseService_getKeysRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeysRecords.length === 5) {
      Q.fcall(this._handler.getKeysRecords, args.keys, args.records, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getKeysRecords_result({success: result});
          output.writeMessageBegin("getKeysRecords", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getKeysRecords_result(err);
            output.writeMessageBegin("getKeysRecords", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getKeysRecords", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getKeysRecords(args.keys, args.records, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getKeysRecords_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getKeysRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getKeyRecords = function(seqid, input, output)   {
    var args = new ConcourseService_getKeyRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeyRecords.length === 5) {
      Q.fcall(this._handler.getKeyRecords, args.key, args.records, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getKeyRecords_result({success: result});
          output.writeMessageBegin("getKeyRecords", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getKeyRecords_result(err);
            output.writeMessageBegin("getKeyRecords", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getKeyRecords(args.key, args.records, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getKeyRecords_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getKeyRecordsTime = function(seqid, input, output)   {
    var args = new ConcourseService_getKeyRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeyRecordsTime.length === 6) {
      Q.fcall(this._handler.getKeyRecordsTime, args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getKeyRecordsTime_result({success: result});
          output.writeMessageBegin("getKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getKeyRecordsTime_result(err);
            output.writeMessageBegin("getKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getKeyRecordsTime(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getKeyRecordsTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getKeyRecordsTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_getKeyRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeyRecordsTimestr.length === 6) {
      Q.fcall(this._handler.getKeyRecordsTimestr, args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getKeyRecordsTimestr_result({success: result});
          output.writeMessageBegin("getKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getKeyRecordsTimestr_result(err);
            output.writeMessageBegin("getKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getKeyRecordsTimestr(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getKeyRecordsTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getKeysRecordsTime = function(seqid, input, output)   {
    var args = new ConcourseService_getKeysRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeysRecordsTime.length === 6) {
      Q.fcall(this._handler.getKeysRecordsTime, args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getKeysRecordsTime_result({success: result});
          output.writeMessageBegin("getKeysRecordsTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getKeysRecordsTime_result(err);
            output.writeMessageBegin("getKeysRecordsTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getKeysRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getKeysRecordsTime(args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getKeysRecordsTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getKeysRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getKeysRecordsTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_getKeysRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeysRecordsTimestr.length === 6) {
      Q.fcall(this._handler.getKeysRecordsTimestr, args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getKeysRecordsTimestr_result({success: result});
          output.writeMessageBegin("getKeysRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getKeysRecordsTimestr_result(err);
            output.writeMessageBegin("getKeysRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getKeysRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getKeysRecordsTimestr(args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getKeysRecordsTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getKeysRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getKeyCriteria = function(seqid, input, output)   {
    var args = new ConcourseService_getKeyCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeyCriteria.length === 5) {
      Q.fcall(this._handler.getKeyCriteria, args.key, args.criteria, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getKeyCriteria_result({success: result});
          output.writeMessageBegin("getKeyCriteria", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getKeyCriteria_result(err);
            output.writeMessageBegin("getKeyCriteria", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getKeyCriteria(args.key, args.criteria, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getKeyCriteria_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getKeyCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getCriteria = function(seqid, input, output)   {
    var args = new ConcourseService_getCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCriteria.length === 4) {
      Q.fcall(this._handler.getCriteria, args.criteria, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getCriteria_result({success: result});
          output.writeMessageBegin("getCriteria", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getCriteria_result(err);
            output.writeMessageBegin("getCriteria", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getCriteria", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getCriteria(args.criteria, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getCriteria_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getCcl = function(seqid, input, output)   {
    var args = new ConcourseService_getCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCcl.length === 4) {
      Q.fcall(this._handler.getCcl, args.ccl, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getCcl_result({success: result});
          output.writeMessageBegin("getCcl", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getCcl_result(err);
            output.writeMessageBegin("getCcl", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getCcl", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getCcl(args.ccl, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getCcl_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getCriteriaTime = function(seqid, input, output)   {
    var args = new ConcourseService_getCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCriteriaTime.length === 5) {
      Q.fcall(this._handler.getCriteriaTime, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getCriteriaTime_result({success: result});
          output.writeMessageBegin("getCriteriaTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getCriteriaTime_result(err);
            output.writeMessageBegin("getCriteriaTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getCriteriaTime(args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getCriteriaTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getCriteriaTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_getCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCriteriaTimestr.length === 5) {
      Q.fcall(this._handler.getCriteriaTimestr, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getCriteriaTimestr_result({success: result});
          output.writeMessageBegin("getCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getCriteriaTimestr_result(err);
            output.writeMessageBegin("getCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getCriteriaTimestr(args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getCriteriaTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getCclTime = function(seqid, input, output)   {
    var args = new ConcourseService_getCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCclTime.length === 5) {
      Q.fcall(this._handler.getCclTime, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getCclTime_result({success: result});
          output.writeMessageBegin("getCclTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getCclTime_result(err);
            output.writeMessageBegin("getCclTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getCclTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getCclTime(args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getCclTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getCclTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_getCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getCclTimestr.length === 5) {
      Q.fcall(this._handler.getCclTimestr, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getCclTimestr_result({success: result});
          output.writeMessageBegin("getCclTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getCclTimestr_result(err);
            output.writeMessageBegin("getCclTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getCclTimestr(args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getCclTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getKeyCcl = function(seqid, input, output)   {
    var args = new ConcourseService_getKeyCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeyCcl.length === 5) {
      Q.fcall(this._handler.getKeyCcl, args.key, args.ccl, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getKeyCcl_result({success: result});
          output.writeMessageBegin("getKeyCcl", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getKeyCcl_result(err);
            output.writeMessageBegin("getKeyCcl", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getKeyCcl(args.key, args.ccl, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getKeyCcl_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getKeyCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getKeyCriteriaTime = function(seqid, input, output)   {
    var args = new ConcourseService_getKeyCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeyCriteriaTime.length === 6) {
      Q.fcall(this._handler.getKeyCriteriaTime, args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getKeyCriteriaTime_result({success: result});
          output.writeMessageBegin("getKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getKeyCriteriaTime_result(err);
            output.writeMessageBegin("getKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getKeyCriteriaTime(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getKeyCriteriaTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getKeyCriteriaTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_getKeyCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeyCriteriaTimestr.length === 6) {
      Q.fcall(this._handler.getKeyCriteriaTimestr, args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getKeyCriteriaTimestr_result({success: result});
          output.writeMessageBegin("getKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getKeyCriteriaTimestr_result(err);
            output.writeMessageBegin("getKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getKeyCriteriaTimestr(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getKeyCriteriaTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getKeyCclTime = function(seqid, input, output)   {
    var args = new ConcourseService_getKeyCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeyCclTime.length === 6) {
      Q.fcall(this._handler.getKeyCclTime, args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getKeyCclTime_result({success: result});
          output.writeMessageBegin("getKeyCclTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getKeyCclTime_result(err);
            output.writeMessageBegin("getKeyCclTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getKeyCclTime(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getKeyCclTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getKeyCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getKeyCclTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_getKeyCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeyCclTimestr.length === 6) {
      Q.fcall(this._handler.getKeyCclTimestr, args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getKeyCclTimestr_result({success: result});
          output.writeMessageBegin("getKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getKeyCclTimestr_result(err);
            output.writeMessageBegin("getKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getKeyCclTimestr(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getKeyCclTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getKeysCriteria = function(seqid, input, output)   {
    var args = new ConcourseService_getKeysCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeysCriteria.length === 5) {
      Q.fcall(this._handler.getKeysCriteria, args.keys, args.criteria, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getKeysCriteria_result({success: result});
          output.writeMessageBegin("getKeysCriteria", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getKeysCriteria_result(err);
            output.writeMessageBegin("getKeysCriteria", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getKeysCriteria", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getKeysCriteria(args.keys, args.criteria, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getKeysCriteria_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getKeysCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getKeysCcl = function(seqid, input, output)   {
    var args = new ConcourseService_getKeysCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeysCcl.length === 5) {
      Q.fcall(this._handler.getKeysCcl, args.keys, args.ccl, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getKeysCcl_result({success: result});
          output.writeMessageBegin("getKeysCcl", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getKeysCcl_result(err);
            output.writeMessageBegin("getKeysCcl", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getKeysCcl", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getKeysCcl(args.keys, args.ccl, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getKeysCcl_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getKeysCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getKeysCriteriaTime = function(seqid, input, output)   {
    var args = new ConcourseService_getKeysCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeysCriteriaTime.length === 6) {
      Q.fcall(this._handler.getKeysCriteriaTime, args.keys, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getKeysCriteriaTime_result({success: result});
          output.writeMessageBegin("getKeysCriteriaTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getKeysCriteriaTime_result(err);
            output.writeMessageBegin("getKeysCriteriaTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getKeysCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getKeysCriteriaTime(args.keys, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getKeysCriteriaTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getKeysCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getKeysCriteriaTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_getKeysCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeysCriteriaTimestr.length === 6) {
      Q.fcall(this._handler.getKeysCriteriaTimestr, args.keys, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getKeysCriteriaTimestr_result({success: result});
          output.writeMessageBegin("getKeysCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getKeysCriteriaTimestr_result(err);
            output.writeMessageBegin("getKeysCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getKeysCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getKeysCriteriaTimestr(args.keys, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getKeysCriteriaTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getKeysCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getKeysCclTime = function(seqid, input, output)   {
    var args = new ConcourseService_getKeysCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeysCclTime.length === 6) {
      Q.fcall(this._handler.getKeysCclTime, args.keys, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getKeysCclTime_result({success: result});
          output.writeMessageBegin("getKeysCclTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getKeysCclTime_result(err);
            output.writeMessageBegin("getKeysCclTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getKeysCclTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getKeysCclTime(args.keys, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getKeysCclTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getKeysCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getKeysCclTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_getKeysCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getKeysCclTimestr.length === 6) {
      Q.fcall(this._handler.getKeysCclTimestr, args.keys, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getKeysCclTimestr_result({success: result});
          output.writeMessageBegin("getKeysCclTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getKeysCclTimestr_result(err);
            output.writeMessageBegin("getKeysCclTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getKeysCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getKeysCclTimestr(args.keys, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getKeysCclTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getKeysCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getKeysCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_verifyKeyValueRecord = function(seqid, input, output)   {
    var args = new ConcourseService_verifyKeyValueRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.verifyKeyValueRecord.length === 6) {
      Q.fcall(this._handler.verifyKeyValueRecord, args.key, args.value, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_verifyKeyValueRecord_result({success: result});
          output.writeMessageBegin("verifyKeyValueRecord", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_verifyKeyValueRecord_result(err);
            output.writeMessageBegin("verifyKeyValueRecord", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("verifyKeyValueRecord", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.verifyKeyValueRecord(args.key, args.value, args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_verifyKeyValueRecord_result((err != null ? err : {success: result}));
          output.writeMessageBegin("verifyKeyValueRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyKeyValueRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_verifyKeyValueRecordTime = function(seqid, input, output)   {
    var args = new ConcourseService_verifyKeyValueRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.verifyKeyValueRecordTime.length === 7) {
      Q.fcall(this._handler.verifyKeyValueRecordTime, args.key, args.value, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_verifyKeyValueRecordTime_result({success: result});
          output.writeMessageBegin("verifyKeyValueRecordTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_verifyKeyValueRecordTime_result(err);
            output.writeMessageBegin("verifyKeyValueRecordTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("verifyKeyValueRecordTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.verifyKeyValueRecordTime(args.key, args.value, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_verifyKeyValueRecordTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("verifyKeyValueRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyKeyValueRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_verifyKeyValueRecordTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_verifyKeyValueRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.verifyKeyValueRecordTimestr.length === 7) {
      Q.fcall(this._handler.verifyKeyValueRecordTimestr, args.key, args.value, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_verifyKeyValueRecordTimestr_result({success: result});
          output.writeMessageBegin("verifyKeyValueRecordTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_verifyKeyValueRecordTimestr_result(err);
            output.writeMessageBegin("verifyKeyValueRecordTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("verifyKeyValueRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.verifyKeyValueRecordTimestr(args.key, args.value, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_verifyKeyValueRecordTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("verifyKeyValueRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyKeyValueRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_jsonifyRecords = function(seqid, input, output)   {
    var args = new ConcourseService_jsonifyRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.jsonifyRecords.length === 5) {
      Q.fcall(this._handler.jsonifyRecords, args.records, args.identifier, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_jsonifyRecords_result({success: result});
          output.writeMessageBegin("jsonifyRecords", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_jsonifyRecords_result(err);
            output.writeMessageBegin("jsonifyRecords", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("jsonifyRecords", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.jsonifyRecords(args.records, args.identifier, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_jsonifyRecords_result((err != null ? err : {success: result}));
          output.writeMessageBegin("jsonifyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("jsonifyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_jsonifyRecordsTime = function(seqid, input, output)   {
    var args = new ConcourseService_jsonifyRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.jsonifyRecordsTime.length === 6) {
      Q.fcall(this._handler.jsonifyRecordsTime, args.records, args.timestamp, args.identifier, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_jsonifyRecordsTime_result({success: result});
          output.writeMessageBegin("jsonifyRecordsTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_jsonifyRecordsTime_result(err);
            output.writeMessageBegin("jsonifyRecordsTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("jsonifyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.jsonifyRecordsTime(args.records, args.timestamp, args.identifier, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_jsonifyRecordsTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("jsonifyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("jsonifyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_jsonifyRecordsTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_jsonifyRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.jsonifyRecordsTimestr.length === 6) {
      Q.fcall(this._handler.jsonifyRecordsTimestr, args.records, args.timestamp, args.identifier, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_jsonifyRecordsTimestr_result({success: result});
          output.writeMessageBegin("jsonifyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_jsonifyRecordsTimestr_result(err);
            output.writeMessageBegin("jsonifyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("jsonifyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.jsonifyRecordsTimestr(args.records, args.timestamp, args.identifier, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_jsonifyRecordsTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("jsonifyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("jsonifyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_findCriteria = function(seqid, input, output)   {
    var args = new ConcourseService_findCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.findCriteria.length === 4) {
      Q.fcall(this._handler.findCriteria, args.criteria, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_findCriteria_result({success: result});
          output.writeMessageBegin("findCriteria", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_findCriteria_result(err);
            output.writeMessageBegin("findCriteria", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("findCriteria", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.findCriteria(args.criteria, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_findCriteria_result((err != null ? err : {success: result}));
          output.writeMessageBegin("findCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_findCcl = function(seqid, input, output)   {
    var args = new ConcourseService_findCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.findCcl.length === 4) {
      Q.fcall(this._handler.findCcl, args.ccl, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_findCcl_result({success: result});
          output.writeMessageBegin("findCcl", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_findCcl_result(err);
            output.writeMessageBegin("findCcl", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("findCcl", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.findCcl(args.ccl, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_findCcl_result((err != null ? err : {success: result}));
          output.writeMessageBegin("findCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_findKeyOperatorValues = function(seqid, input, output)   {
    var args = new ConcourseService_findKeyOperatorValues_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.findKeyOperatorValues.length === 6) {
      Q.fcall(this._handler.findKeyOperatorValues, args.key, args.operator, args.values, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_findKeyOperatorValues_result({success: result});
          output.writeMessageBegin("findKeyOperatorValues", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_findKeyOperatorValues_result(err);
            output.writeMessageBegin("findKeyOperatorValues", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("findKeyOperatorValues", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.findKeyOperatorValues(args.key, args.operator, args.values, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_findKeyOperatorValues_result((err != null ? err : {success: result}));
          output.writeMessageBegin("findKeyOperatorValues", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findKeyOperatorValues", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_findKeyOperatorValuesTime = function(seqid, input, output)   {
    var args = new ConcourseService_findKeyOperatorValuesTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.findKeyOperatorValuesTime.length === 7) {
      Q.fcall(this._handler.findKeyOperatorValuesTime, args.key, args.operator, args.values, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_findKeyOperatorValuesTime_result({success: result});
          output.writeMessageBegin("findKeyOperatorValuesTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_findKeyOperatorValuesTime_result(err);
            output.writeMessageBegin("findKeyOperatorValuesTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("findKeyOperatorValuesTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.findKeyOperatorValuesTime(args.key, args.operator, args.values, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_findKeyOperatorValuesTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("findKeyOperatorValuesTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findKeyOperatorValuesTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_findKeyOperatorValuesTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_findKeyOperatorValuesTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.findKeyOperatorValuesTimestr.length === 7) {
      Q.fcall(this._handler.findKeyOperatorValuesTimestr, args.key, args.operator, args.values, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_findKeyOperatorValuesTimestr_result({success: result});
          output.writeMessageBegin("findKeyOperatorValuesTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_findKeyOperatorValuesTimestr_result(err);
            output.writeMessageBegin("findKeyOperatorValuesTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("findKeyOperatorValuesTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.findKeyOperatorValuesTimestr(args.key, args.operator, args.values, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_findKeyOperatorValuesTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("findKeyOperatorValuesTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findKeyOperatorValuesTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_findKeyOperatorstrValues = function(seqid, input, output)   {
    var args = new ConcourseService_findKeyOperatorstrValues_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.findKeyOperatorstrValues.length === 6) {
      Q.fcall(this._handler.findKeyOperatorstrValues, args.key, args.operator, args.values, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_findKeyOperatorstrValues_result({success: result});
          output.writeMessageBegin("findKeyOperatorstrValues", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_findKeyOperatorstrValues_result(err);
            output.writeMessageBegin("findKeyOperatorstrValues", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("findKeyOperatorstrValues", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.findKeyOperatorstrValues(args.key, args.operator, args.values, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_findKeyOperatorstrValues_result((err != null ? err : {success: result}));
          output.writeMessageBegin("findKeyOperatorstrValues", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findKeyOperatorstrValues", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_findKeyOperatorstrValuesTime = function(seqid, input, output)   {
    var args = new ConcourseService_findKeyOperatorstrValuesTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.findKeyOperatorstrValuesTime.length === 7) {
      Q.fcall(this._handler.findKeyOperatorstrValuesTime, args.key, args.operator, args.values, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_findKeyOperatorstrValuesTime_result({success: result});
          output.writeMessageBegin("findKeyOperatorstrValuesTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_findKeyOperatorstrValuesTime_result(err);
            output.writeMessageBegin("findKeyOperatorstrValuesTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("findKeyOperatorstrValuesTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.findKeyOperatorstrValuesTime(args.key, args.operator, args.values, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_findKeyOperatorstrValuesTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("findKeyOperatorstrValuesTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findKeyOperatorstrValuesTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_findKeyOperatorstrValuesTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_findKeyOperatorstrValuesTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.findKeyOperatorstrValuesTimestr.length === 7) {
      Q.fcall(this._handler.findKeyOperatorstrValuesTimestr, args.key, args.operator, args.values, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_findKeyOperatorstrValuesTimestr_result({success: result});
          output.writeMessageBegin("findKeyOperatorstrValuesTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_findKeyOperatorstrValuesTimestr_result(err);
            output.writeMessageBegin("findKeyOperatorstrValuesTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("findKeyOperatorstrValuesTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.findKeyOperatorstrValuesTimestr(args.key, args.operator, args.values, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_findKeyOperatorstrValuesTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("findKeyOperatorstrValuesTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findKeyOperatorstrValuesTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_search = function(seqid, input, output)   {
    var args = new ConcourseService_search_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.search.length === 5) {
      Q.fcall(this._handler.search, args.key, args.query, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_search_result({success: result});
          output.writeMessageBegin("search", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_search_result(err);
            output.writeMessageBegin("search", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("search", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.search(args.key, args.query, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_search_result((err != null ? err : {success: result}));
          output.writeMessageBegin("search", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("search", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_revertKeysRecordsTime = function(seqid, input, output)   {
    var args = new ConcourseService_revertKeysRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.revertKeysRecordsTime.length === 6) {
      Q.fcall(this._handler.revertKeysRecordsTime, args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_revertKeysRecordsTime_result({success: result});
          output.writeMessageBegin("revertKeysRecordsTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_revertKeysRecordsTime_result(err);
            output.writeMessageBegin("revertKeysRecordsTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("revertKeysRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.revertKeysRecordsTime(args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_revertKeysRecordsTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("revertKeysRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revertKeysRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_revertKeysRecordsTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_revertKeysRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.revertKeysRecordsTimestr.length === 6) {
      Q.fcall(this._handler.revertKeysRecordsTimestr, args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_revertKeysRecordsTimestr_result({success: result});
          output.writeMessageBegin("revertKeysRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_revertKeysRecordsTimestr_result(err);
            output.writeMessageBegin("revertKeysRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("revertKeysRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.revertKeysRecordsTimestr(args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_revertKeysRecordsTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("revertKeysRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revertKeysRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_revertKeysRecordTime = function(seqid, input, output)   {
    var args = new ConcourseService_revertKeysRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.revertKeysRecordTime.length === 6) {
      Q.fcall(this._handler.revertKeysRecordTime, args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_revertKeysRecordTime_result({success: result});
          output.writeMessageBegin("revertKeysRecordTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_revertKeysRecordTime_result(err);
            output.writeMessageBegin("revertKeysRecordTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("revertKeysRecordTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.revertKeysRecordTime(args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_revertKeysRecordTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("revertKeysRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revertKeysRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_revertKeysRecordTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_revertKeysRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.revertKeysRecordTimestr.length === 6) {
      Q.fcall(this._handler.revertKeysRecordTimestr, args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_revertKeysRecordTimestr_result({success: result});
          output.writeMessageBegin("revertKeysRecordTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_revertKeysRecordTimestr_result(err);
            output.writeMessageBegin("revertKeysRecordTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("revertKeysRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.revertKeysRecordTimestr(args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_revertKeysRecordTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("revertKeysRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revertKeysRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_revertKeyRecordsTime = function(seqid, input, output)   {
    var args = new ConcourseService_revertKeyRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.revertKeyRecordsTime.length === 6) {
      Q.fcall(this._handler.revertKeyRecordsTime, args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_revertKeyRecordsTime_result({success: result});
          output.writeMessageBegin("revertKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_revertKeyRecordsTime_result(err);
            output.writeMessageBegin("revertKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("revertKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.revertKeyRecordsTime(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_revertKeyRecordsTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("revertKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revertKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_revertKeyRecordsTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_revertKeyRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.revertKeyRecordsTimestr.length === 6) {
      Q.fcall(this._handler.revertKeyRecordsTimestr, args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_revertKeyRecordsTimestr_result({success: result});
          output.writeMessageBegin("revertKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_revertKeyRecordsTimestr_result(err);
            output.writeMessageBegin("revertKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("revertKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.revertKeyRecordsTimestr(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_revertKeyRecordsTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("revertKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revertKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_revertKeyRecordTime = function(seqid, input, output)   {
    var args = new ConcourseService_revertKeyRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.revertKeyRecordTime.length === 6) {
      Q.fcall(this._handler.revertKeyRecordTime, args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_revertKeyRecordTime_result({success: result});
          output.writeMessageBegin("revertKeyRecordTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_revertKeyRecordTime_result(err);
            output.writeMessageBegin("revertKeyRecordTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("revertKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.revertKeyRecordTime(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_revertKeyRecordTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("revertKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revertKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_revertKeyRecordTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_revertKeyRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.revertKeyRecordTimestr.length === 6) {
      Q.fcall(this._handler.revertKeyRecordTimestr, args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_revertKeyRecordTimestr_result({success: result});
          output.writeMessageBegin("revertKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_revertKeyRecordTimestr_result(err);
            output.writeMessageBegin("revertKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("revertKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.revertKeyRecordTimestr(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_revertKeyRecordTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("revertKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("revertKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_pingRecords = function(seqid, input, output)   {
    var args = new ConcourseService_pingRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.pingRecords.length === 4) {
      Q.fcall(this._handler.pingRecords, args.records, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_pingRecords_result({success: result});
          output.writeMessageBegin("pingRecords", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_pingRecords_result(err);
            output.writeMessageBegin("pingRecords", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("pingRecords", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.pingRecords(args.records, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_pingRecords_result((err != null ? err : {success: result}));
          output.writeMessageBegin("pingRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("pingRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_pingRecord = function(seqid, input, output)   {
    var args = new ConcourseService_pingRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.pingRecord.length === 4) {
      Q.fcall(this._handler.pingRecord, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_pingRecord_result({success: result});
          output.writeMessageBegin("pingRecord", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_pingRecord_result(err);
            output.writeMessageBegin("pingRecord", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("pingRecord", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.pingRecord(args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_pingRecord_result((err != null ? err : {success: result}));
          output.writeMessageBegin("pingRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("pingRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_verifyAndSwap = function(seqid, input, output)   {
    var args = new ConcourseService_verifyAndSwap_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.verifyAndSwap.length === 7) {
      Q.fcall(this._handler.verifyAndSwap, args.key, args.expected, args.record, args.replacement, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_verifyAndSwap_result({success: result});
          output.writeMessageBegin("verifyAndSwap", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_verifyAndSwap_result(err);
            output.writeMessageBegin("verifyAndSwap", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("verifyAndSwap", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.verifyAndSwap(args.key, args.expected, args.record, args.replacement, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_verifyAndSwap_result((err != null ? err : {success: result}));
          output.writeMessageBegin("verifyAndSwap", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyAndSwap", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_verifyOrSet = function(seqid, input, output)   {
    var args = new ConcourseService_verifyOrSet_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.verifyOrSet.length === 6) {
      Q.fcall(this._handler.verifyOrSet, args.key, args.value, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_verifyOrSet_result({success: result});
          output.writeMessageBegin("verifyOrSet", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_verifyOrSet_result(err);
            output.writeMessageBegin("verifyOrSet", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("verifyOrSet", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.verifyOrSet(args.key, args.value, args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_verifyOrSet_result((err != null ? err : {success: result}));
          output.writeMessageBegin("verifyOrSet", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("verifyOrSet", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_findOrAddKeyValue = function(seqid, input, output)   {
    var args = new ConcourseService_findOrAddKeyValue_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.findOrAddKeyValue.length === 5) {
      Q.fcall(this._handler.findOrAddKeyValue, args.key, args.value, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_findOrAddKeyValue_result({success: result});
          output.writeMessageBegin("findOrAddKeyValue", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.DuplicateEntryException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_findOrAddKeyValue_result(err);
            output.writeMessageBegin("findOrAddKeyValue", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("findOrAddKeyValue", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.findOrAddKeyValue(args.key, args.value, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.DuplicateEntryException || err instanceof exceptions_ttypes.InvalidArgumentException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_findOrAddKeyValue_result((err != null ? err : {success: result}));
          output.writeMessageBegin("findOrAddKeyValue", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findOrAddKeyValue", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_findOrInsertCriteriaJson = function(seqid, input, output)   {
    var args = new ConcourseService_findOrInsertCriteriaJson_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.findOrInsertCriteriaJson.length === 5) {
      Q.fcall(this._handler.findOrInsertCriteriaJson, args.criteria, args.json, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_findOrInsertCriteriaJson_result({success: result});
          output.writeMessageBegin("findOrInsertCriteriaJson", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.DuplicateEntryException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_findOrInsertCriteriaJson_result(err);
            output.writeMessageBegin("findOrInsertCriteriaJson", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("findOrInsertCriteriaJson", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.findOrInsertCriteriaJson(args.criteria, args.json, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.DuplicateEntryException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_findOrInsertCriteriaJson_result((err != null ? err : {success: result}));
          output.writeMessageBegin("findOrInsertCriteriaJson", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findOrInsertCriteriaJson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_findOrInsertCclJson = function(seqid, input, output)   {
    var args = new ConcourseService_findOrInsertCclJson_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.findOrInsertCclJson.length === 5) {
      Q.fcall(this._handler.findOrInsertCclJson, args.ccl, args.json, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_findOrInsertCclJson_result({success: result});
          output.writeMessageBegin("findOrInsertCclJson", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.DuplicateEntryException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_findOrInsertCclJson_result(err);
            output.writeMessageBegin("findOrInsertCclJson", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("findOrInsertCclJson", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.findOrInsertCclJson(args.ccl, args.json, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.DuplicateEntryException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_findOrInsertCclJson_result((err != null ? err : {success: result}));
          output.writeMessageBegin("findOrInsertCclJson", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findOrInsertCclJson", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_sumKeyRecord = function(seqid, input, output)   {
    var args = new ConcourseService_sumKeyRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyRecord.length === 5) {
      Q.fcall(this._handler.sumKeyRecord, args.key, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_sumKeyRecord_result({success: result});
          output.writeMessageBegin("sumKeyRecord", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_sumKeyRecord_result(err);
            output.writeMessageBegin("sumKeyRecord", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("sumKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.sumKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_sumKeyRecord_result((err != null ? err : {success: result}));
          output.writeMessageBegin("sumKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_sumKeyRecordTime = function(seqid, input, output)   {
    var args = new ConcourseService_sumKeyRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyRecordTime.length === 6) {
      Q.fcall(this._handler.sumKeyRecordTime, args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_sumKeyRecordTime_result({success: result});
          output.writeMessageBegin("sumKeyRecordTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_sumKeyRecordTime_result(err);
            output.writeMessageBegin("sumKeyRecordTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("sumKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.sumKeyRecordTime(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_sumKeyRecordTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("sumKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_sumKeyRecordTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_sumKeyRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyRecordTimestr.length === 6) {
      Q.fcall(this._handler.sumKeyRecordTimestr, args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_sumKeyRecordTimestr_result({success: result});
          output.writeMessageBegin("sumKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_sumKeyRecordTimestr_result(err);
            output.writeMessageBegin("sumKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("sumKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.sumKeyRecordTimestr(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_sumKeyRecordTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("sumKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_sumKeyRecords = function(seqid, input, output)   {
    var args = new ConcourseService_sumKeyRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyRecords.length === 5) {
      Q.fcall(this._handler.sumKeyRecords, args.key, args.records, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_sumKeyRecords_result({success: result});
          output.writeMessageBegin("sumKeyRecords", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_sumKeyRecords_result(err);
            output.writeMessageBegin("sumKeyRecords", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("sumKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.sumKeyRecords(args.key, args.records, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_sumKeyRecords_result((err != null ? err : {success: result}));
          output.writeMessageBegin("sumKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_sumKeyRecordsTime = function(seqid, input, output)   {
    var args = new ConcourseService_sumKeyRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyRecordsTime.length === 6) {
      Q.fcall(this._handler.sumKeyRecordsTime, args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_sumKeyRecordsTime_result({success: result});
          output.writeMessageBegin("sumKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_sumKeyRecordsTime_result(err);
            output.writeMessageBegin("sumKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("sumKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.sumKeyRecordsTime(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_sumKeyRecordsTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("sumKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_sumKeyRecordsTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_sumKeyRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyRecordsTimestr.length === 6) {
      Q.fcall(this._handler.sumKeyRecordsTimestr, args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_sumKeyRecordsTimestr_result({success: result});
          output.writeMessageBegin("sumKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_sumKeyRecordsTimestr_result(err);
            output.writeMessageBegin("sumKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("sumKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.sumKeyRecordsTimestr(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_sumKeyRecordsTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("sumKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_sumKey = function(seqid, input, output)   {
    var args = new ConcourseService_sumKey_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKey.length === 4) {
      Q.fcall(this._handler.sumKey, args.key, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_sumKey_result({success: result});
          output.writeMessageBegin("sumKey", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_sumKey_result(err);
            output.writeMessageBegin("sumKey", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("sumKey", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.sumKey(args.key, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_sumKey_result((err != null ? err : {success: result}));
          output.writeMessageBegin("sumKey", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKey", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_sumKeyTime = function(seqid, input, output)   {
    var args = new ConcourseService_sumKeyTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyTime.length === 5) {
      Q.fcall(this._handler.sumKeyTime, args.key, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_sumKeyTime_result({success: result});
          output.writeMessageBegin("sumKeyTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_sumKeyTime_result(err);
            output.writeMessageBegin("sumKeyTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("sumKeyTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.sumKeyTime(args.key, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_sumKeyTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("sumKeyTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_sumKeyTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_sumKeyTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyTimestr.length === 5) {
      Q.fcall(this._handler.sumKeyTimestr, args.key, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_sumKeyTimestr_result({success: result});
          output.writeMessageBegin("sumKeyTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_sumKeyTimestr_result(err);
            output.writeMessageBegin("sumKeyTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("sumKeyTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.sumKeyTimestr(args.key, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_sumKeyTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("sumKeyTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_sumKeyCriteria = function(seqid, input, output)   {
    var args = new ConcourseService_sumKeyCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyCriteria.length === 5) {
      Q.fcall(this._handler.sumKeyCriteria, args.key, args.criteria, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_sumKeyCriteria_result({success: result});
          output.writeMessageBegin("sumKeyCriteria", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_sumKeyCriteria_result(err);
            output.writeMessageBegin("sumKeyCriteria", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("sumKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.sumKeyCriteria(args.key, args.criteria, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_sumKeyCriteria_result((err != null ? err : {success: result}));
          output.writeMessageBegin("sumKeyCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_sumKeyCriteriaTime = function(seqid, input, output)   {
    var args = new ConcourseService_sumKeyCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyCriteriaTime.length === 6) {
      Q.fcall(this._handler.sumKeyCriteriaTime, args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_sumKeyCriteriaTime_result({success: result});
          output.writeMessageBegin("sumKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_sumKeyCriteriaTime_result(err);
            output.writeMessageBegin("sumKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("sumKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.sumKeyCriteriaTime(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_sumKeyCriteriaTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("sumKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_sumKeyCriteriaTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_sumKeyCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyCriteriaTimestr.length === 6) {
      Q.fcall(this._handler.sumKeyCriteriaTimestr, args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_sumKeyCriteriaTimestr_result({success: result});
          output.writeMessageBegin("sumKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_sumKeyCriteriaTimestr_result(err);
            output.writeMessageBegin("sumKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("sumKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.sumKeyCriteriaTimestr(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_sumKeyCriteriaTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("sumKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_sumKeyCcl = function(seqid, input, output)   {
    var args = new ConcourseService_sumKeyCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyCcl.length === 5) {
      Q.fcall(this._handler.sumKeyCcl, args.key, args.ccl, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_sumKeyCcl_result({success: result});
          output.writeMessageBegin("sumKeyCcl", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_sumKeyCcl_result(err);
            output.writeMessageBegin("sumKeyCcl", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("sumKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.sumKeyCcl(args.key, args.ccl, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_sumKeyCcl_result((err != null ? err : {success: result}));
          output.writeMessageBegin("sumKeyCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_sumKeyCclTime = function(seqid, input, output)   {
    var args = new ConcourseService_sumKeyCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyCclTime.length === 6) {
      Q.fcall(this._handler.sumKeyCclTime, args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_sumKeyCclTime_result({success: result});
          output.writeMessageBegin("sumKeyCclTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_sumKeyCclTime_result(err);
            output.writeMessageBegin("sumKeyCclTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("sumKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.sumKeyCclTime(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_sumKeyCclTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("sumKeyCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_sumKeyCclTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_sumKeyCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.sumKeyCclTimestr.length === 6) {
      Q.fcall(this._handler.sumKeyCclTimestr, args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_sumKeyCclTimestr_result({success: result});
          output.writeMessageBegin("sumKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_sumKeyCclTimestr_result(err);
            output.writeMessageBegin("sumKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("sumKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.sumKeyCclTimestr(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_sumKeyCclTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("sumKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sumKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_averageKeyRecord = function(seqid, input, output)   {
    var args = new ConcourseService_averageKeyRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyRecord.length === 5) {
      Q.fcall(this._handler.averageKeyRecord, args.key, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_averageKeyRecord_result({success: result});
          output.writeMessageBegin("averageKeyRecord", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_averageKeyRecord_result(err);
            output.writeMessageBegin("averageKeyRecord", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("averageKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.averageKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_averageKeyRecord_result((err != null ? err : {success: result}));
          output.writeMessageBegin("averageKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_averageKeyRecordTime = function(seqid, input, output)   {
    var args = new ConcourseService_averageKeyRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyRecordTime.length === 6) {
      Q.fcall(this._handler.averageKeyRecordTime, args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_averageKeyRecordTime_result({success: result});
          output.writeMessageBegin("averageKeyRecordTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_averageKeyRecordTime_result(err);
            output.writeMessageBegin("averageKeyRecordTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("averageKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.averageKeyRecordTime(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_averageKeyRecordTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("averageKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_averageKeyRecordTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_averageKeyRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyRecordTimestr.length === 6) {
      Q.fcall(this._handler.averageKeyRecordTimestr, args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_averageKeyRecordTimestr_result({success: result});
          output.writeMessageBegin("averageKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_averageKeyRecordTimestr_result(err);
            output.writeMessageBegin("averageKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("averageKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.averageKeyRecordTimestr(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_averageKeyRecordTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("averageKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_averageKeyRecords = function(seqid, input, output)   {
    var args = new ConcourseService_averageKeyRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyRecords.length === 5) {
      Q.fcall(this._handler.averageKeyRecords, args.key, args.records, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_averageKeyRecords_result({success: result});
          output.writeMessageBegin("averageKeyRecords", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_averageKeyRecords_result(err);
            output.writeMessageBegin("averageKeyRecords", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("averageKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.averageKeyRecords(args.key, args.records, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_averageKeyRecords_result((err != null ? err : {success: result}));
          output.writeMessageBegin("averageKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_averageKeyRecordsTime = function(seqid, input, output)   {
    var args = new ConcourseService_averageKeyRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyRecordsTime.length === 6) {
      Q.fcall(this._handler.averageKeyRecordsTime, args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_averageKeyRecordsTime_result({success: result});
          output.writeMessageBegin("averageKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_averageKeyRecordsTime_result(err);
            output.writeMessageBegin("averageKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("averageKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.averageKeyRecordsTime(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_averageKeyRecordsTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("averageKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_averageKeyRecordsTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_averageKeyRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyRecordsTimestr.length === 6) {
      Q.fcall(this._handler.averageKeyRecordsTimestr, args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_averageKeyRecordsTimestr_result({success: result});
          output.writeMessageBegin("averageKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_averageKeyRecordsTimestr_result(err);
            output.writeMessageBegin("averageKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("averageKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.averageKeyRecordsTimestr(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_averageKeyRecordsTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("averageKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_averageKey = function(seqid, input, output)   {
    var args = new ConcourseService_averageKey_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKey.length === 4) {
      Q.fcall(this._handler.averageKey, args.key, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_averageKey_result({success: result});
          output.writeMessageBegin("averageKey", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_averageKey_result(err);
            output.writeMessageBegin("averageKey", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("averageKey", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.averageKey(args.key, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_averageKey_result((err != null ? err : {success: result}));
          output.writeMessageBegin("averageKey", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKey", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_averageKeyTime = function(seqid, input, output)   {
    var args = new ConcourseService_averageKeyTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyTime.length === 5) {
      Q.fcall(this._handler.averageKeyTime, args.key, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_averageKeyTime_result({success: result});
          output.writeMessageBegin("averageKeyTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_averageKeyTime_result(err);
            output.writeMessageBegin("averageKeyTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("averageKeyTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.averageKeyTime(args.key, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_averageKeyTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("averageKeyTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_averageKeyTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_averageKeyTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyTimestr.length === 5) {
      Q.fcall(this._handler.averageKeyTimestr, args.key, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_averageKeyTimestr_result({success: result});
          output.writeMessageBegin("averageKeyTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_averageKeyTimestr_result(err);
            output.writeMessageBegin("averageKeyTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("averageKeyTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.averageKeyTimestr(args.key, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_averageKeyTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("averageKeyTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_averageKeyCriteria = function(seqid, input, output)   {
    var args = new ConcourseService_averageKeyCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyCriteria.length === 5) {
      Q.fcall(this._handler.averageKeyCriteria, args.key, args.criteria, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_averageKeyCriteria_result({success: result});
          output.writeMessageBegin("averageKeyCriteria", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_averageKeyCriteria_result(err);
            output.writeMessageBegin("averageKeyCriteria", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("averageKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.averageKeyCriteria(args.key, args.criteria, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_averageKeyCriteria_result((err != null ? err : {success: result}));
          output.writeMessageBegin("averageKeyCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_averageKeyCriteriaTime = function(seqid, input, output)   {
    var args = new ConcourseService_averageKeyCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyCriteriaTime.length === 6) {
      Q.fcall(this._handler.averageKeyCriteriaTime, args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_averageKeyCriteriaTime_result({success: result});
          output.writeMessageBegin("averageKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_averageKeyCriteriaTime_result(err);
            output.writeMessageBegin("averageKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("averageKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.averageKeyCriteriaTime(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_averageKeyCriteriaTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("averageKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_averageKeyCriteriaTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_averageKeyCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyCriteriaTimestr.length === 6) {
      Q.fcall(this._handler.averageKeyCriteriaTimestr, args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_averageKeyCriteriaTimestr_result({success: result});
          output.writeMessageBegin("averageKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_averageKeyCriteriaTimestr_result(err);
            output.writeMessageBegin("averageKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("averageKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.averageKeyCriteriaTimestr(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_averageKeyCriteriaTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("averageKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_averageKeyCcl = function(seqid, input, output)   {
    var args = new ConcourseService_averageKeyCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyCcl.length === 5) {
      Q.fcall(this._handler.averageKeyCcl, args.key, args.ccl, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_averageKeyCcl_result({success: result});
          output.writeMessageBegin("averageKeyCcl", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_averageKeyCcl_result(err);
            output.writeMessageBegin("averageKeyCcl", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("averageKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.averageKeyCcl(args.key, args.ccl, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_averageKeyCcl_result((err != null ? err : {success: result}));
          output.writeMessageBegin("averageKeyCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_averageKeyCclTime = function(seqid, input, output)   {
    var args = new ConcourseService_averageKeyCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyCclTime.length === 6) {
      Q.fcall(this._handler.averageKeyCclTime, args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_averageKeyCclTime_result({success: result});
          output.writeMessageBegin("averageKeyCclTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_averageKeyCclTime_result(err);
            output.writeMessageBegin("averageKeyCclTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("averageKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.averageKeyCclTime(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_averageKeyCclTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("averageKeyCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_averageKeyCclTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_averageKeyCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.averageKeyCclTimestr.length === 6) {
      Q.fcall(this._handler.averageKeyCclTimestr, args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_averageKeyCclTimestr_result({success: result});
          output.writeMessageBegin("averageKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_averageKeyCclTimestr_result(err);
            output.writeMessageBegin("averageKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("averageKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.averageKeyCclTimestr(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_averageKeyCclTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("averageKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("averageKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_countKeyRecord = function(seqid, input, output)   {
    var args = new ConcourseService_countKeyRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyRecord.length === 5) {
      Q.fcall(this._handler.countKeyRecord, args.key, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_countKeyRecord_result({success: result});
          output.writeMessageBegin("countKeyRecord", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_countKeyRecord_result(err);
            output.writeMessageBegin("countKeyRecord", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("countKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.countKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_countKeyRecord_result((err != null ? err : {success: result}));
          output.writeMessageBegin("countKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_countKeyRecordTime = function(seqid, input, output)   {
    var args = new ConcourseService_countKeyRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyRecordTime.length === 6) {
      Q.fcall(this._handler.countKeyRecordTime, args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_countKeyRecordTime_result({success: result});
          output.writeMessageBegin("countKeyRecordTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_countKeyRecordTime_result(err);
            output.writeMessageBegin("countKeyRecordTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("countKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.countKeyRecordTime(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_countKeyRecordTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("countKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_countKeyRecordTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_countKeyRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyRecordTimestr.length === 6) {
      Q.fcall(this._handler.countKeyRecordTimestr, args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_countKeyRecordTimestr_result({success: result});
          output.writeMessageBegin("countKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_countKeyRecordTimestr_result(err);
            output.writeMessageBegin("countKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("countKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.countKeyRecordTimestr(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_countKeyRecordTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("countKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_countKeyRecords = function(seqid, input, output)   {
    var args = new ConcourseService_countKeyRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyRecords.length === 5) {
      Q.fcall(this._handler.countKeyRecords, args.key, args.records, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_countKeyRecords_result({success: result});
          output.writeMessageBegin("countKeyRecords", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_countKeyRecords_result(err);
            output.writeMessageBegin("countKeyRecords", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("countKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.countKeyRecords(args.key, args.records, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_countKeyRecords_result((err != null ? err : {success: result}));
          output.writeMessageBegin("countKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_countKeyRecordsTime = function(seqid, input, output)   {
    var args = new ConcourseService_countKeyRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyRecordsTime.length === 6) {
      Q.fcall(this._handler.countKeyRecordsTime, args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_countKeyRecordsTime_result({success: result});
          output.writeMessageBegin("countKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_countKeyRecordsTime_result(err);
            output.writeMessageBegin("countKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("countKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.countKeyRecordsTime(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_countKeyRecordsTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("countKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_countKeyRecordsTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_countKeyRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyRecordsTimestr.length === 6) {
      Q.fcall(this._handler.countKeyRecordsTimestr, args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_countKeyRecordsTimestr_result({success: result});
          output.writeMessageBegin("countKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_countKeyRecordsTimestr_result(err);
            output.writeMessageBegin("countKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("countKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.countKeyRecordsTimestr(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_countKeyRecordsTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("countKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_countKey = function(seqid, input, output)   {
    var args = new ConcourseService_countKey_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKey.length === 4) {
      Q.fcall(this._handler.countKey, args.key, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_countKey_result({success: result});
          output.writeMessageBegin("countKey", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_countKey_result(err);
            output.writeMessageBegin("countKey", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("countKey", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.countKey(args.key, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_countKey_result((err != null ? err : {success: result}));
          output.writeMessageBegin("countKey", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKey", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_countKeyTime = function(seqid, input, output)   {
    var args = new ConcourseService_countKeyTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyTime.length === 5) {
      Q.fcall(this._handler.countKeyTime, args.key, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_countKeyTime_result({success: result});
          output.writeMessageBegin("countKeyTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_countKeyTime_result(err);
            output.writeMessageBegin("countKeyTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("countKeyTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.countKeyTime(args.key, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_countKeyTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("countKeyTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_countKeyTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_countKeyTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyTimestr.length === 5) {
      Q.fcall(this._handler.countKeyTimestr, args.key, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_countKeyTimestr_result({success: result});
          output.writeMessageBegin("countKeyTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_countKeyTimestr_result(err);
            output.writeMessageBegin("countKeyTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("countKeyTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.countKeyTimestr(args.key, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_countKeyTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("countKeyTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_countKeyCriteria = function(seqid, input, output)   {
    var args = new ConcourseService_countKeyCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyCriteria.length === 5) {
      Q.fcall(this._handler.countKeyCriteria, args.key, args.criteria, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_countKeyCriteria_result({success: result});
          output.writeMessageBegin("countKeyCriteria", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_countKeyCriteria_result(err);
            output.writeMessageBegin("countKeyCriteria", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("countKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.countKeyCriteria(args.key, args.criteria, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_countKeyCriteria_result((err != null ? err : {success: result}));
          output.writeMessageBegin("countKeyCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_countKeyCriteriaTime = function(seqid, input, output)   {
    var args = new ConcourseService_countKeyCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyCriteriaTime.length === 6) {
      Q.fcall(this._handler.countKeyCriteriaTime, args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_countKeyCriteriaTime_result({success: result});
          output.writeMessageBegin("countKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_countKeyCriteriaTime_result(err);
            output.writeMessageBegin("countKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("countKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.countKeyCriteriaTime(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_countKeyCriteriaTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("countKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_countKeyCriteriaTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_countKeyCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyCriteriaTimestr.length === 6) {
      Q.fcall(this._handler.countKeyCriteriaTimestr, args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_countKeyCriteriaTimestr_result({success: result});
          output.writeMessageBegin("countKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_countKeyCriteriaTimestr_result(err);
            output.writeMessageBegin("countKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("countKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.countKeyCriteriaTimestr(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_countKeyCriteriaTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("countKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_countKeyCcl = function(seqid, input, output)   {
    var args = new ConcourseService_countKeyCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyCcl.length === 5) {
      Q.fcall(this._handler.countKeyCcl, args.key, args.ccl, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_countKeyCcl_result({success: result});
          output.writeMessageBegin("countKeyCcl", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_countKeyCcl_result(err);
            output.writeMessageBegin("countKeyCcl", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("countKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.countKeyCcl(args.key, args.ccl, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_countKeyCcl_result((err != null ? err : {success: result}));
          output.writeMessageBegin("countKeyCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_countKeyCclTime = function(seqid, input, output)   {
    var args = new ConcourseService_countKeyCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyCclTime.length === 6) {
      Q.fcall(this._handler.countKeyCclTime, args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_countKeyCclTime_result({success: result});
          output.writeMessageBegin("countKeyCclTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_countKeyCclTime_result(err);
            output.writeMessageBegin("countKeyCclTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("countKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.countKeyCclTime(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_countKeyCclTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("countKeyCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_countKeyCclTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_countKeyCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.countKeyCclTimestr.length === 6) {
      Q.fcall(this._handler.countKeyCclTimestr, args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_countKeyCclTimestr_result({success: result});
          output.writeMessageBegin("countKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_countKeyCclTimestr_result(err);
            output.writeMessageBegin("countKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("countKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.countKeyCclTimestr(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_countKeyCclTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("countKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("countKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_maxKeyRecord = function(seqid, input, output)   {
    var args = new ConcourseService_maxKeyRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyRecord.length === 5) {
      Q.fcall(this._handler.maxKeyRecord, args.key, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_maxKeyRecord_result({success: result});
          output.writeMessageBegin("maxKeyRecord", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_maxKeyRecord_result(err);
            output.writeMessageBegin("maxKeyRecord", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("maxKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.maxKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_maxKeyRecord_result((err != null ? err : {success: result}));
          output.writeMessageBegin("maxKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_maxKeyRecordTime = function(seqid, input, output)   {
    var args = new ConcourseService_maxKeyRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyRecordTime.length === 6) {
      Q.fcall(this._handler.maxKeyRecordTime, args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_maxKeyRecordTime_result({success: result});
          output.writeMessageBegin("maxKeyRecordTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_maxKeyRecordTime_result(err);
            output.writeMessageBegin("maxKeyRecordTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("maxKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.maxKeyRecordTime(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_maxKeyRecordTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("maxKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_maxKeyRecordTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_maxKeyRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyRecordTimestr.length === 6) {
      Q.fcall(this._handler.maxKeyRecordTimestr, args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_maxKeyRecordTimestr_result({success: result});
          output.writeMessageBegin("maxKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_maxKeyRecordTimestr_result(err);
            output.writeMessageBegin("maxKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("maxKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.maxKeyRecordTimestr(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_maxKeyRecordTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("maxKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_maxKeyRecords = function(seqid, input, output)   {
    var args = new ConcourseService_maxKeyRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyRecords.length === 5) {
      Q.fcall(this._handler.maxKeyRecords, args.key, args.records, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_maxKeyRecords_result({success: result});
          output.writeMessageBegin("maxKeyRecords", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_maxKeyRecords_result(err);
            output.writeMessageBegin("maxKeyRecords", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("maxKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.maxKeyRecords(args.key, args.records, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_maxKeyRecords_result((err != null ? err : {success: result}));
          output.writeMessageBegin("maxKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_maxKeyRecordsTime = function(seqid, input, output)   {
    var args = new ConcourseService_maxKeyRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyRecordsTime.length === 6) {
      Q.fcall(this._handler.maxKeyRecordsTime, args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_maxKeyRecordsTime_result({success: result});
          output.writeMessageBegin("maxKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_maxKeyRecordsTime_result(err);
            output.writeMessageBegin("maxKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("maxKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.maxKeyRecordsTime(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_maxKeyRecordsTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("maxKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_maxKeyRecordsTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_maxKeyRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyRecordsTimestr.length === 6) {
      Q.fcall(this._handler.maxKeyRecordsTimestr, args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_maxKeyRecordsTimestr_result({success: result});
          output.writeMessageBegin("maxKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_maxKeyRecordsTimestr_result(err);
            output.writeMessageBegin("maxKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("maxKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.maxKeyRecordsTimestr(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_maxKeyRecordsTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("maxKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_maxKeyCriteria = function(seqid, input, output)   {
    var args = new ConcourseService_maxKeyCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyCriteria.length === 5) {
      Q.fcall(this._handler.maxKeyCriteria, args.key, args.criteria, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_maxKeyCriteria_result({success: result});
          output.writeMessageBegin("maxKeyCriteria", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_maxKeyCriteria_result(err);
            output.writeMessageBegin("maxKeyCriteria", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("maxKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.maxKeyCriteria(args.key, args.criteria, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_maxKeyCriteria_result((err != null ? err : {success: result}));
          output.writeMessageBegin("maxKeyCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_maxKeyCriteriaTime = function(seqid, input, output)   {
    var args = new ConcourseService_maxKeyCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyCriteriaTime.length === 6) {
      Q.fcall(this._handler.maxKeyCriteriaTime, args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_maxKeyCriteriaTime_result({success: result});
          output.writeMessageBegin("maxKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_maxKeyCriteriaTime_result(err);
            output.writeMessageBegin("maxKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("maxKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.maxKeyCriteriaTime(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_maxKeyCriteriaTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("maxKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_maxKeyCriteriaTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_maxKeyCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyCriteriaTimestr.length === 6) {
      Q.fcall(this._handler.maxKeyCriteriaTimestr, args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_maxKeyCriteriaTimestr_result({success: result});
          output.writeMessageBegin("maxKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_maxKeyCriteriaTimestr_result(err);
            output.writeMessageBegin("maxKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("maxKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.maxKeyCriteriaTimestr(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_maxKeyCriteriaTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("maxKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_maxKeyCcl = function(seqid, input, output)   {
    var args = new ConcourseService_maxKeyCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyCcl.length === 5) {
      Q.fcall(this._handler.maxKeyCcl, args.key, args.ccl, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_maxKeyCcl_result({success: result});
          output.writeMessageBegin("maxKeyCcl", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_maxKeyCcl_result(err);
            output.writeMessageBegin("maxKeyCcl", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("maxKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.maxKeyCcl(args.key, args.ccl, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_maxKeyCcl_result((err != null ? err : {success: result}));
          output.writeMessageBegin("maxKeyCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_maxKeyCclTime = function(seqid, input, output)   {
    var args = new ConcourseService_maxKeyCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyCclTime.length === 6) {
      Q.fcall(this._handler.maxKeyCclTime, args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_maxKeyCclTime_result({success: result});
          output.writeMessageBegin("maxKeyCclTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_maxKeyCclTime_result(err);
            output.writeMessageBegin("maxKeyCclTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("maxKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.maxKeyCclTime(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_maxKeyCclTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("maxKeyCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_maxKeyCclTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_maxKeyCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyCclTimestr.length === 6) {
      Q.fcall(this._handler.maxKeyCclTimestr, args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_maxKeyCclTimestr_result({success: result});
          output.writeMessageBegin("maxKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_maxKeyCclTimestr_result(err);
            output.writeMessageBegin("maxKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("maxKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.maxKeyCclTimestr(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_maxKeyCclTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("maxKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_maxKey = function(seqid, input, output)   {
    var args = new ConcourseService_maxKey_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKey.length === 4) {
      Q.fcall(this._handler.maxKey, args.key, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_maxKey_result({success: result});
          output.writeMessageBegin("maxKey", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_maxKey_result(err);
            output.writeMessageBegin("maxKey", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("maxKey", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.maxKey(args.key, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_maxKey_result((err != null ? err : {success: result}));
          output.writeMessageBegin("maxKey", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKey", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_maxKeyTime = function(seqid, input, output)   {
    var args = new ConcourseService_maxKeyTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyTime.length === 5) {
      Q.fcall(this._handler.maxKeyTime, args.key, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_maxKeyTime_result({success: result});
          output.writeMessageBegin("maxKeyTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_maxKeyTime_result(err);
            output.writeMessageBegin("maxKeyTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("maxKeyTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.maxKeyTime(args.key, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_maxKeyTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("maxKeyTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_maxKeyTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_maxKeyTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.maxKeyTimestr.length === 5) {
      Q.fcall(this._handler.maxKeyTimestr, args.key, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_maxKeyTimestr_result({success: result});
          output.writeMessageBegin("maxKeyTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_maxKeyTimestr_result(err);
            output.writeMessageBegin("maxKeyTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("maxKeyTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.maxKeyTimestr(args.key, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_maxKeyTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("maxKeyTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("maxKeyTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_minKeyRecord = function(seqid, input, output)   {
    var args = new ConcourseService_minKeyRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyRecord.length === 5) {
      Q.fcall(this._handler.minKeyRecord, args.key, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_minKeyRecord_result({success: result});
          output.writeMessageBegin("minKeyRecord", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_minKeyRecord_result(err);
            output.writeMessageBegin("minKeyRecord", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("minKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.minKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_minKeyRecord_result((err != null ? err : {success: result}));
          output.writeMessageBegin("minKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_minKeyRecordTime = function(seqid, input, output)   {
    var args = new ConcourseService_minKeyRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyRecordTime.length === 6) {
      Q.fcall(this._handler.minKeyRecordTime, args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_minKeyRecordTime_result({success: result});
          output.writeMessageBegin("minKeyRecordTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_minKeyRecordTime_result(err);
            output.writeMessageBegin("minKeyRecordTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("minKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.minKeyRecordTime(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_minKeyRecordTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("minKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_minKeyRecordTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_minKeyRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyRecordTimestr.length === 6) {
      Q.fcall(this._handler.minKeyRecordTimestr, args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_minKeyRecordTimestr_result({success: result});
          output.writeMessageBegin("minKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_minKeyRecordTimestr_result(err);
            output.writeMessageBegin("minKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("minKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.minKeyRecordTimestr(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_minKeyRecordTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("minKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_minKey = function(seqid, input, output)   {
    var args = new ConcourseService_minKey_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKey.length === 4) {
      Q.fcall(this._handler.minKey, args.key, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_minKey_result({success: result});
          output.writeMessageBegin("minKey", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_minKey_result(err);
            output.writeMessageBegin("minKey", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("minKey", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.minKey(args.key, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_minKey_result((err != null ? err : {success: result}));
          output.writeMessageBegin("minKey", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKey", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_minKeyRecordsTime = function(seqid, input, output)   {
    var args = new ConcourseService_minKeyRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyRecordsTime.length === 6) {
      Q.fcall(this._handler.minKeyRecordsTime, args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_minKeyRecordsTime_result({success: result});
          output.writeMessageBegin("minKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_minKeyRecordsTime_result(err);
            output.writeMessageBegin("minKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("minKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.minKeyRecordsTime(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_minKeyRecordsTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("minKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_minKeyRecordsTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_minKeyRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyRecordsTimestr.length === 6) {
      Q.fcall(this._handler.minKeyRecordsTimestr, args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_minKeyRecordsTimestr_result({success: result});
          output.writeMessageBegin("minKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_minKeyRecordsTimestr_result(err);
            output.writeMessageBegin("minKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("minKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.minKeyRecordsTimestr(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_minKeyRecordsTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("minKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_minKeyCriteria = function(seqid, input, output)   {
    var args = new ConcourseService_minKeyCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyCriteria.length === 5) {
      Q.fcall(this._handler.minKeyCriteria, args.key, args.criteria, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_minKeyCriteria_result({success: result});
          output.writeMessageBegin("minKeyCriteria", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_minKeyCriteria_result(err);
            output.writeMessageBegin("minKeyCriteria", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("minKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.minKeyCriteria(args.key, args.criteria, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_minKeyCriteria_result((err != null ? err : {success: result}));
          output.writeMessageBegin("minKeyCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_minKeyCriteriaTime = function(seqid, input, output)   {
    var args = new ConcourseService_minKeyCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyCriteriaTime.length === 6) {
      Q.fcall(this._handler.minKeyCriteriaTime, args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_minKeyCriteriaTime_result({success: result});
          output.writeMessageBegin("minKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_minKeyCriteriaTime_result(err);
            output.writeMessageBegin("minKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("minKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.minKeyCriteriaTime(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_minKeyCriteriaTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("minKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_minKeyCriteriaTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_minKeyCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyCriteriaTimestr.length === 6) {
      Q.fcall(this._handler.minKeyCriteriaTimestr, args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_minKeyCriteriaTimestr_result({success: result});
          output.writeMessageBegin("minKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_minKeyCriteriaTimestr_result(err);
            output.writeMessageBegin("minKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("minKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.minKeyCriteriaTimestr(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_minKeyCriteriaTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("minKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_minKeyCcl = function(seqid, input, output)   {
    var args = new ConcourseService_minKeyCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyCcl.length === 5) {
      Q.fcall(this._handler.minKeyCcl, args.key, args.ccl, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_minKeyCcl_result({success: result});
          output.writeMessageBegin("minKeyCcl", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_minKeyCcl_result(err);
            output.writeMessageBegin("minKeyCcl", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("minKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.minKeyCcl(args.key, args.ccl, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_minKeyCcl_result((err != null ? err : {success: result}));
          output.writeMessageBegin("minKeyCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_minKeyCclTime = function(seqid, input, output)   {
    var args = new ConcourseService_minKeyCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyCclTime.length === 6) {
      Q.fcall(this._handler.minKeyCclTime, args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_minKeyCclTime_result({success: result});
          output.writeMessageBegin("minKeyCclTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_minKeyCclTime_result(err);
            output.writeMessageBegin("minKeyCclTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("minKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.minKeyCclTime(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_minKeyCclTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("minKeyCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_minKeyCclTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_minKeyCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyCclTimestr.length === 6) {
      Q.fcall(this._handler.minKeyCclTimestr, args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_minKeyCclTimestr_result({success: result});
          output.writeMessageBegin("minKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_minKeyCclTimestr_result(err);
            output.writeMessageBegin("minKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("minKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.minKeyCclTimestr(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_minKeyCclTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("minKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_minKeyTime = function(seqid, input, output)   {
    var args = new ConcourseService_minKeyTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyTime.length === 5) {
      Q.fcall(this._handler.minKeyTime, args.key, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_minKeyTime_result({success: result});
          output.writeMessageBegin("minKeyTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_minKeyTime_result(err);
            output.writeMessageBegin("minKeyTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("minKeyTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.minKeyTime(args.key, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_minKeyTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("minKeyTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_minKeyTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_minKeyTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyTimestr.length === 5) {
      Q.fcall(this._handler.minKeyTimestr, args.key, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_minKeyTimestr_result({success: result});
          output.writeMessageBegin("minKeyTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_minKeyTimestr_result(err);
            output.writeMessageBegin("minKeyTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("minKeyTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.minKeyTimestr(args.key, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_minKeyTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("minKeyTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_minKeyRecords = function(seqid, input, output)   {
    var args = new ConcourseService_minKeyRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.minKeyRecords.length === 5) {
      Q.fcall(this._handler.minKeyRecords, args.key, args.records, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_minKeyRecords_result({success: result});
          output.writeMessageBegin("minKeyRecords", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_minKeyRecords_result(err);
            output.writeMessageBegin("minKeyRecords", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("minKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.minKeyRecords(args.key, args.records, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_minKeyRecords_result((err != null ? err : {success: result}));
          output.writeMessageBegin("minKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("minKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_navigateKeyRecord = function(seqid, input, output)   {
    var args = new ConcourseService_navigateKeyRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeyRecord.length === 5) {
      Q.fcall(this._handler.navigateKeyRecord, args.key, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_navigateKeyRecord_result({success: result});
          output.writeMessageBegin("navigateKeyRecord", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_navigateKeyRecord_result(err);
            output.writeMessageBegin("navigateKeyRecord", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("navigateKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.navigateKeyRecord(args.key, args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_navigateKeyRecord_result((err != null ? err : {success: result}));
          output.writeMessageBegin("navigateKeyRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_navigateKeyRecordTime = function(seqid, input, output)   {
    var args = new ConcourseService_navigateKeyRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeyRecordTime.length === 6) {
      Q.fcall(this._handler.navigateKeyRecordTime, args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_navigateKeyRecordTime_result({success: result});
          output.writeMessageBegin("navigateKeyRecordTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_navigateKeyRecordTime_result(err);
            output.writeMessageBegin("navigateKeyRecordTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("navigateKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.navigateKeyRecordTime(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_navigateKeyRecordTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("navigateKeyRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_navigateKeyRecordTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_navigateKeyRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeyRecordTimestr.length === 6) {
      Q.fcall(this._handler.navigateKeyRecordTimestr, args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_navigateKeyRecordTimestr_result({success: result});
          output.writeMessageBegin("navigateKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_navigateKeyRecordTimestr_result(err);
            output.writeMessageBegin("navigateKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("navigateKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.navigateKeyRecordTimestr(args.key, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_navigateKeyRecordTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("navigateKeyRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_navigateKeysRecord = function(seqid, input, output)   {
    var args = new ConcourseService_navigateKeysRecord_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeysRecord.length === 5) {
      Q.fcall(this._handler.navigateKeysRecord, args.keys, args.record, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_navigateKeysRecord_result({success: result});
          output.writeMessageBegin("navigateKeysRecord", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_navigateKeysRecord_result(err);
            output.writeMessageBegin("navigateKeysRecord", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("navigateKeysRecord", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.navigateKeysRecord(args.keys, args.record, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_navigateKeysRecord_result((err != null ? err : {success: result}));
          output.writeMessageBegin("navigateKeysRecord", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysRecord", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_navigateKeysRecordTime = function(seqid, input, output)   {
    var args = new ConcourseService_navigateKeysRecordTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeysRecordTime.length === 6) {
      Q.fcall(this._handler.navigateKeysRecordTime, args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_navigateKeysRecordTime_result({success: result});
          output.writeMessageBegin("navigateKeysRecordTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_navigateKeysRecordTime_result(err);
            output.writeMessageBegin("navigateKeysRecordTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("navigateKeysRecordTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.navigateKeysRecordTime(args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_navigateKeysRecordTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("navigateKeysRecordTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysRecordTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_navigateKeysRecordTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_navigateKeysRecordTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeysRecordTimestr.length === 6) {
      Q.fcall(this._handler.navigateKeysRecordTimestr, args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_navigateKeysRecordTimestr_result({success: result});
          output.writeMessageBegin("navigateKeysRecordTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_navigateKeysRecordTimestr_result(err);
            output.writeMessageBegin("navigateKeysRecordTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("navigateKeysRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.navigateKeysRecordTimestr(args.keys, args.record, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_navigateKeysRecordTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("navigateKeysRecordTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysRecordTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_navigateKeysRecords = function(seqid, input, output)   {
    var args = new ConcourseService_navigateKeysRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeysRecords.length === 5) {
      Q.fcall(this._handler.navigateKeysRecords, args.keys, args.records, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_navigateKeysRecords_result({success: result});
          output.writeMessageBegin("navigateKeysRecords", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_navigateKeysRecords_result(err);
            output.writeMessageBegin("navigateKeysRecords", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("navigateKeysRecords", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.navigateKeysRecords(args.keys, args.records, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_navigateKeysRecords_result((err != null ? err : {success: result}));
          output.writeMessageBegin("navigateKeysRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_navigateKeyRecords = function(seqid, input, output)   {
    var args = new ConcourseService_navigateKeyRecords_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeyRecords.length === 5) {
      Q.fcall(this._handler.navigateKeyRecords, args.key, args.records, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_navigateKeyRecords_result({success: result});
          output.writeMessageBegin("navigateKeyRecords", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_navigateKeyRecords_result(err);
            output.writeMessageBegin("navigateKeyRecords", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("navigateKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.navigateKeyRecords(args.key, args.records, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_navigateKeyRecords_result((err != null ? err : {success: result}));
          output.writeMessageBegin("navigateKeyRecords", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyRecords", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_navigateKeyRecordsTime = function(seqid, input, output)   {
    var args = new ConcourseService_navigateKeyRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeyRecordsTime.length === 6) {
      Q.fcall(this._handler.navigateKeyRecordsTime, args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_navigateKeyRecordsTime_result({success: result});
          output.writeMessageBegin("navigateKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_navigateKeyRecordsTime_result(err);
            output.writeMessageBegin("navigateKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("navigateKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.navigateKeyRecordsTime(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_navigateKeyRecordsTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("navigateKeyRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_navigateKeyRecordsTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_navigateKeyRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeyRecordsTimestr.length === 6) {
      Q.fcall(this._handler.navigateKeyRecordsTimestr, args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_navigateKeyRecordsTimestr_result({success: result});
          output.writeMessageBegin("navigateKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_navigateKeyRecordsTimestr_result(err);
            output.writeMessageBegin("navigateKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("navigateKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.navigateKeyRecordsTimestr(args.key, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_navigateKeyRecordsTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("navigateKeyRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_navigateKeysRecordsTime = function(seqid, input, output)   {
    var args = new ConcourseService_navigateKeysRecordsTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeysRecordsTime.length === 6) {
      Q.fcall(this._handler.navigateKeysRecordsTime, args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_navigateKeysRecordsTime_result({success: result});
          output.writeMessageBegin("navigateKeysRecordsTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_navigateKeysRecordsTime_result(err);
            output.writeMessageBegin("navigateKeysRecordsTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("navigateKeysRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.navigateKeysRecordsTime(args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_navigateKeysRecordsTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("navigateKeysRecordsTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysRecordsTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_navigateKeysRecordsTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_navigateKeysRecordsTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeysRecordsTimestr.length === 6) {
      Q.fcall(this._handler.navigateKeysRecordsTimestr, args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_navigateKeysRecordsTimestr_result({success: result});
          output.writeMessageBegin("navigateKeysRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_navigateKeysRecordsTimestr_result(err);
            output.writeMessageBegin("navigateKeysRecordsTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("navigateKeysRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.navigateKeysRecordsTimestr(args.keys, args.records, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_navigateKeysRecordsTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("navigateKeysRecordsTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysRecordsTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_navigateKeyCcl = function(seqid, input, output)   {
    var args = new ConcourseService_navigateKeyCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeyCcl.length === 5) {
      Q.fcall(this._handler.navigateKeyCcl, args.key, args.ccl, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_navigateKeyCcl_result({success: result});
          output.writeMessageBegin("navigateKeyCcl", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_navigateKeyCcl_result(err);
            output.writeMessageBegin("navigateKeyCcl", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("navigateKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.navigateKeyCcl(args.key, args.ccl, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_navigateKeyCcl_result((err != null ? err : {success: result}));
          output.writeMessageBegin("navigateKeyCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_navigateKeyCclTime = function(seqid, input, output)   {
    var args = new ConcourseService_navigateKeyCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeyCclTime.length === 6) {
      Q.fcall(this._handler.navigateKeyCclTime, args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_navigateKeyCclTime_result({success: result});
          output.writeMessageBegin("navigateKeyCclTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_navigateKeyCclTime_result(err);
            output.writeMessageBegin("navigateKeyCclTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("navigateKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.navigateKeyCclTime(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_navigateKeyCclTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("navigateKeyCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_navigateKeyCclTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_navigateKeyCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeyCclTimestr.length === 6) {
      Q.fcall(this._handler.navigateKeyCclTimestr, args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_navigateKeyCclTimestr_result({success: result});
          output.writeMessageBegin("navigateKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_navigateKeyCclTimestr_result(err);
            output.writeMessageBegin("navigateKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("navigateKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.navigateKeyCclTimestr(args.key, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_navigateKeyCclTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("navigateKeyCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_navigateKeysCcl = function(seqid, input, output)   {
    var args = new ConcourseService_navigateKeysCcl_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeysCcl.length === 5) {
      Q.fcall(this._handler.navigateKeysCcl, args.keys, args.ccl, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_navigateKeysCcl_result({success: result});
          output.writeMessageBegin("navigateKeysCcl", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_navigateKeysCcl_result(err);
            output.writeMessageBegin("navigateKeysCcl", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("navigateKeysCcl", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.navigateKeysCcl(args.keys, args.ccl, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_navigateKeysCcl_result((err != null ? err : {success: result}));
          output.writeMessageBegin("navigateKeysCcl", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysCcl", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_navigateKeysCclTime = function(seqid, input, output)   {
    var args = new ConcourseService_navigateKeysCclTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeysCclTime.length === 6) {
      Q.fcall(this._handler.navigateKeysCclTime, args.keys, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_navigateKeysCclTime_result({success: result});
          output.writeMessageBegin("navigateKeysCclTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_navigateKeysCclTime_result(err);
            output.writeMessageBegin("navigateKeysCclTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("navigateKeysCclTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.navigateKeysCclTime(args.keys, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_navigateKeysCclTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("navigateKeysCclTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysCclTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_navigateKeysCclTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_navigateKeysCclTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeysCclTimestr.length === 6) {
      Q.fcall(this._handler.navigateKeysCclTimestr, args.keys, args.ccl, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_navigateKeysCclTimestr_result({success: result});
          output.writeMessageBegin("navigateKeysCclTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_navigateKeysCclTimestr_result(err);
            output.writeMessageBegin("navigateKeysCclTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("navigateKeysCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.navigateKeysCclTimestr(args.keys, args.ccl, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_navigateKeysCclTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("navigateKeysCclTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysCclTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_navigateKeyCriteria = function(seqid, input, output)   {
    var args = new ConcourseService_navigateKeyCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeyCriteria.length === 5) {
      Q.fcall(this._handler.navigateKeyCriteria, args.key, args.criteria, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_navigateKeyCriteria_result({success: result});
          output.writeMessageBegin("navigateKeyCriteria", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_navigateKeyCriteria_result(err);
            output.writeMessageBegin("navigateKeyCriteria", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("navigateKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.navigateKeyCriteria(args.key, args.criteria, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_navigateKeyCriteria_result((err != null ? err : {success: result}));
          output.writeMessageBegin("navigateKeyCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_navigateKeyCriteriaTime = function(seqid, input, output)   {
    var args = new ConcourseService_navigateKeyCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeyCriteriaTime.length === 6) {
      Q.fcall(this._handler.navigateKeyCriteriaTime, args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_navigateKeyCriteriaTime_result({success: result});
          output.writeMessageBegin("navigateKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_navigateKeyCriteriaTime_result(err);
            output.writeMessageBegin("navigateKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("navigateKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.navigateKeyCriteriaTime(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_navigateKeyCriteriaTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("navigateKeyCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_navigateKeyCriteriaTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_navigateKeyCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeyCriteriaTimestr.length === 6) {
      Q.fcall(this._handler.navigateKeyCriteriaTimestr, args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_navigateKeyCriteriaTimestr_result({success: result});
          output.writeMessageBegin("navigateKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_navigateKeyCriteriaTimestr_result(err);
            output.writeMessageBegin("navigateKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("navigateKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.navigateKeyCriteriaTimestr(args.key, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_navigateKeyCriteriaTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("navigateKeyCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeyCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_navigateKeysCriteria = function(seqid, input, output)   {
    var args = new ConcourseService_navigateKeysCriteria_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeysCriteria.length === 5) {
      Q.fcall(this._handler.navigateKeysCriteria, args.keys, args.criteria, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_navigateKeysCriteria_result({success: result});
          output.writeMessageBegin("navigateKeysCriteria", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_navigateKeysCriteria_result(err);
            output.writeMessageBegin("navigateKeysCriteria", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("navigateKeysCriteria", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.navigateKeysCriteria(args.keys, args.criteria, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_navigateKeysCriteria_result((err != null ? err : {success: result}));
          output.writeMessageBegin("navigateKeysCriteria", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysCriteria", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_navigateKeysCriteriaTime = function(seqid, input, output)   {
    var args = new ConcourseService_navigateKeysCriteriaTime_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeysCriteriaTime.length === 6) {
      Q.fcall(this._handler.navigateKeysCriteriaTime, args.keys, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_navigateKeysCriteriaTime_result({success: result});
          output.writeMessageBegin("navigateKeysCriteriaTime", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_navigateKeysCriteriaTime_result(err);
            output.writeMessageBegin("navigateKeysCriteriaTime", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("navigateKeysCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.navigateKeysCriteriaTime(args.keys, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_navigateKeysCriteriaTime_result((err != null ? err : {success: result}));
          output.writeMessageBegin("navigateKeysCriteriaTime", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysCriteriaTime", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_navigateKeysCriteriaTimestr = function(seqid, input, output)   {
    var args = new ConcourseService_navigateKeysCriteriaTimestr_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.navigateKeysCriteriaTimestr.length === 6) {
      Q.fcall(this._handler.navigateKeysCriteriaTimestr, args.keys, args.criteria, args.timestamp, args.creds, args.transaction, args.environment)
        .then(function(result) {
          var result = new ConcourseService_navigateKeysCriteriaTimestr_result({success: result});
          output.writeMessageBegin("navigateKeysCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_navigateKeysCriteriaTimestr_result(err);
            output.writeMessageBegin("navigateKeysCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("navigateKeysCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.navigateKeysCriteriaTimestr(args.keys, args.criteria, args.timestamp, args.creds, args.transaction, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_navigateKeysCriteriaTimestr_result((err != null ? err : {success: result}));
          output.writeMessageBegin("navigateKeysCriteriaTimestr", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("navigateKeysCriteriaTimestr", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getServerEnvironment = function(seqid, input, output)   {
    var args = new ConcourseService_getServerEnvironment_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getServerEnvironment.length === 3) {
      Q.fcall(this._handler.getServerEnvironment, args.creds, args.token, args.environment)
        .then(function(result) {
          var result = new ConcourseService_getServerEnvironment_result({success: result});
          output.writeMessageBegin("getServerEnvironment", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getServerEnvironment_result(err);
            output.writeMessageBegin("getServerEnvironment", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getServerEnvironment", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getServerEnvironment(args.creds, args.token, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getServerEnvironment_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getServerEnvironment", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getServerEnvironment", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_getServerVersion = function(seqid, input, output)   {
    var args = new ConcourseService_getServerVersion_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getServerVersion.length === 0) {
      Q.fcall(this._handler.getServerVersion)
        .then(function(result) {
          var result = new ConcourseService_getServerVersion_result({success: result});
          output.writeMessageBegin("getServerVersion", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_getServerVersion_result(err);
            output.writeMessageBegin("getServerVersion", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getServerVersion", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getServerVersion(function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_getServerVersion_result((err != null ? err : {success: result}));
          output.writeMessageBegin("getServerVersion", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getServerVersion", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_time = function(seqid, input, output)   {
    var args = new ConcourseService_time_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.time.length === 3) {
      Q.fcall(this._handler.time, args.creds, args.token, args.environment)
        .then(function(result) {
          var result = new ConcourseService_time_result({success: result});
          output.writeMessageBegin("time", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_time_result(err);
            output.writeMessageBegin("time", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("time", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.time(args.creds, args.token, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_time_result((err != null ? err : {success: result}));
          output.writeMessageBegin("time", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("time", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_timePhrase = function(seqid, input, output)   {
    var args = new ConcourseService_timePhrase_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.timePhrase.length === 4) {
      Q.fcall(this._handler.timePhrase, args.phrase, args.creds, args.token, args.environment)
        .then(function(result) {
          var result = new ConcourseService_timePhrase_result({success: result});
          output.writeMessageBegin("timePhrase", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
            var result = new ConcourseService_timePhrase_result(err);
            output.writeMessageBegin("timePhrase", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("timePhrase", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.timePhrase(args.phrase, args.creds, args.token, args.environment, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.TransactionException || err instanceof exceptions_ttypes.ParseException || err instanceof exceptions_ttypes.PermissionException) {
          var result = new ConcourseService_timePhrase_result((err != null ? err : {success: result}));
          output.writeMessageBegin("timePhrase", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("timePhrase", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }

  ConcourseServiceProcessor.prototype.process_invokeManagement = function(seqid, input, output)   {
    var args = new ConcourseService_invokeManagement_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.invokeManagement.length === 3) {
      Q.fcall(this._handler.invokeManagement, args.method, args.params, args.creds)
        .then(function(result) {
          var result = new ConcourseService_invokeManagement_result({success: result});
          output.writeMessageBegin("invokeManagement", Thrift.MessageType.REPLY, seqid);
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        }, function (err) {
          if (err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.ManagementException) {
            var result = new ConcourseService_invokeManagement_result(err);
            output.writeMessageBegin("invokeManagement", Thrift.MessageType.REPLY, seqid);
          } else {
            var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("invokeManagement", Thrift.MessageType.EXCEPTION, seqid);
          }
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.invokeManagement(args.method, args.params, args.creds, function (err, result) {
        if (err == null || err instanceof exceptions_ttypes.SecurityException || err instanceof exceptions_ttypes.ManagementException) {
          var result = new ConcourseService_invokeManagement_result((err != null ? err : {success: result}));
          output.writeMessageBegin("invokeManagement", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("invokeManagement", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }


#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module Concourse
  # Components that are required for Thrift RPC
  module Thrift

    # The list of operators that can be used in a criteria.
    module Operator
      # Look for values that match a particular regex expression
      REGEX = 1
      # Look for values that don't make a particular regex expression
      NOT_REGEX = 2
      # Look for values that are equal to another one
      EQUALS = 3
      # Look for values that are not equal to another one
      NOT_EQUALS = 4
      # Look for values that are greater than another one
      GREATER_THAN = 5
      # Look for values that are greater than or equal to another one
      GREATER_THAN_OR_EQUALS = 6
      # Look for values that are less than another one
      LESS_THAN = 7
      # Look for values that are less than or equal to another one
      LESS_THAN_OR_EQUALS = 8
      # Look for values that are between two other values
      BETWEEN = 9
      # Look for links to another record
      LINKS_TO = 10
      # Alias for REGEX
      LIKE = 11
      # Alias for NOT_REGEX
      NOT_LIKE = 12
      # @!visibility private
      VALUE_MAP = {1 => "REGEX", 2 => "NOT_REGEX", 3 => "EQUALS", 4 => "NOT_EQUALS", 5 => "GREATER_THAN", 6 => "GREATER_THAN_OR_EQUALS", 7 => "LESS_THAN", 8 => "LESS_THAN_OR_EQUALS", 9 => "BETWEEN", 10 => "LINKS_TO", 11 => "LIKE", 12 => "NOT_LIKE"}
      # @!visibility private
      VALID_VALUES = Set.new([REGEX, NOT_REGEX, EQUALS, NOT_EQUALS, GREATER_THAN, GREATER_THAN_OR_EQUALS, LESS_THAN, LESS_THAN_OR_EQUALS, BETWEEN, LINKS_TO, LIKE, NOT_LIKE]).freeze
    end

    # @!visibility private
    module Type
      BOOLEAN = 1
      DOUBLE = 2
      FLOAT = 3
      INTEGER = 4
      LONG = 5
      LINK = 6
      STRING = 7
      TAG = 8
      NULL = 9
      VALUE_MAP = {1 => "BOOLEAN", 2 => "DOUBLE", 3 => "FLOAT", 4 => "INTEGER", 5 => "LONG", 6 => "LINK", 7 => "STRING", 8 => "TAG", 9 => "NULL"}
      VALID_VALUES = Set.new([BOOLEAN, DOUBLE, FLOAT, INTEGER, LONG, LINK, STRING, TAG, NULL]).freeze
    end

    # A description of the operation used when calculating a diff.
    module Diff
      # Describes data tat was added
      ADDED = 1
      # Describes data that was removed
      REMOVED = 2
      # @!visibility private
      VALUE_MAP = {1 => "ADDED", 2 => "REMOVED"}
      # @!visibility private
      VALID_VALUES = Set.new([ADDED, REMOVED]).freeze
    end

    # A temporary token that is returned by the
    # {@link ConcourseService#login(String, String)} method to grant access
    # to secure resources in place of raw credentials.
    # @!visibility private
    class AccessToken
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DATA = 1

      FIELDS = {
        DATA => {:type => ::Thrift::Types::STRING, :name => 'data', :binary => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field data is unset!') unless @data
      end

      ::Thrift::Struct.generate_accessors self
    end

    # A token that identifies a Transaction.
    # @!visibility private
    class TransactionToken
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ACCESSTOKEN = 1
      TIMESTAMP = 2

      FIELDS = {
        ACCESSTOKEN => {:type => ::Thrift::Types::STRUCT, :name => 'accessToken', :class => ::Concourse::Thrift::AccessToken},
        TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field accessToken is unset!') unless @accessToken
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field timestamp is unset!') unless @timestamp
      end

      ::Thrift::Struct.generate_accessors self
    end

    # The security ex that occurs when the user session
    # is invalidated from Concourse server.
    # @!visibility private
    class TSecurityException < ::Thrift::Exception
      include ::Thrift::Struct, ::Thrift::Struct_Union
      def initialize(message=nil)
        super()
        self.message = message
      end

      MESSAGE = 1

      FIELDS = {
        MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    # The exception that is thrown from the server when a
    # transaction related exception occurs.
    # @!visibility private
    class TTransactionException < ::Thrift::Exception
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    # The exception that is thrown from the server when an
    # error occurs while parsing a string.
    # @!visibility private
    class TParseException < ::Thrift::Exception
      include ::Thrift::Struct, ::Thrift::Struct_Union
      def initialize(message=nil)
        super()
        self.message = message
      end

      MESSAGE = 1

      FIELDS = {
        MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    # The exception that is thrown from the server when multiple matches exists
    # for a criteria when performing a write that simulates unique indexes
    # (e.g. findOrAdd, findOrInsert, etc)
    # @!visibility private
    class TDuplicateEntryException < ::Thrift::Exception
      include ::Thrift::Struct, ::Thrift::Struct_Union
      def initialize(message=nil)
        super()
        self.message = message
      end

      MESSAGE = 1

      FIELDS = {
        MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end
